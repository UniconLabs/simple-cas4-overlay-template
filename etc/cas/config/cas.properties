cas.server.name=https://cas.example.org:8443
cas.server.prefix=${cas.server.name}/cas

logging.config=file:/etc/cas/config/log4j2.xml

# cas.authn.accept.enabled=false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.AcceptableUsagePolicyCoreProperties
# Module: cas-server-support-aup-webflow
# AUP attribute to choose in order to determine whether policy has been accepted or not. The attribute is expected to contain a boolean value where {@code true} indicates policy has been accepted and {@code false} indicates otherwise. The attribute is fetched for the principal from configured sources and compared for the right match to determine policy status. If the attribute is not found, the policy status is considered as denied.
# cas.acceptable-usage-policy.core.aup-attribute-name: aupAccepted

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.AcceptableUsagePolicyCoreProperties
# Module: cas-server-support-aup-webflow
# AUP attribute to choose whose single value dictates how CAS should fetch the policy terms from the relevant message bundles.
# cas.acceptable-usage-policy.core.aup-policy-terms-attribute-name: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.AcceptableUsagePolicyCoreProperties
# Module: cas-server-support-aup-webflow
# Allows AUP to be turned off on startup.
# cas.acceptable-usage-policy.core.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Make DB updates asynchronously.
# cas.acceptable-usage-policy.couch-db.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Use a local cache to reduce fetches..
# cas.acceptable-usage-policy.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Remove idle connections from pool.
# cas.acceptable-usage-policy.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# TCP connection timeout.
# cas.acceptable-usage-policy.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Create the database if it doesn't exist.
# cas.acceptable-usage-policy.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Database name.
# cas.acceptable-usage-policy.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.acceptable-usage-policy.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Max entries in local cache.
# cas.acceptable-usage-policy.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Maximum connections to CouchDB.
# cas.acceptable-usage-policy.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Largest allowable serialized object.
# cas.acceptable-usage-policy.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Password for connection.
# cas.acceptable-usage-policy.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Proxy host.
# cas.acceptable-usage-policy.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# proxy port.
# cas.acceptable-usage-policy.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.acceptable-usage-policy.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Retries for update conflicts.
# cas.acceptable-usage-policy.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Socket idle timeout.
# cas.acceptable-usage-policy.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Connection url.
# cas.acceptable-usage-policy.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Expect HTTP 100 Continue during connection.
# cas.acceptable-usage-policy.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchdb
# Username for connection.
# cas.acceptable-usage-policy.couch-db.username: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Node addresses.
# cas.acceptable-usage-policy.couchbase.addresses: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Bucket name.
# cas.acceptable-usage-policy.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Cluster password.
# cas.acceptable-usage-policy.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Cluster username.
# cas.acceptable-usage-policy.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of connection timeout.
# cas.acceptable-usage-policy.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of idle connection timeout.
# cas.acceptable-usage-policy.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of KV timeout.
# cas.acceptable-usage-policy.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Maximum number of connections made to the cluster.
# cas.acceptable-usage-policy.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.acceptable-usage-policy.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Maximum number of parallel threads made for queries.
# cas.acceptable-usage-policy.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of query threshold.
# cas.acceptable-usage-policy.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of query timeout.
# cas.acceptable-usage-policy.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.acceptable-usage-policy.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of scan timeout.
# cas.acceptable-usage-policy.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of search timeout.
# cas.acceptable-usage-policy.couchbase.search-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.CouchbaseAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-couchbase
# String representation of view timeout.
# cas.acceptable-usage-policy.couchbase.view-timeout: PT30S

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.acceptable-usage-policy.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: Configuration setting is moved to the new core namespace
# Deprecation Replacement: cas.acceptable-usage-policy.core.enabled

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.aup.GroovyAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-core
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.acceptable-usage-policy.groovy.location: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.aup.InMemoryAcceptableUsagePolicyProperties$Scope
# Owner: org.apereo.cas.configuration.model.support.aup.InMemoryAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-core
# Scope of map where the aup selection is stored.
Available values are as follows:
<ul><li>{@code GLOBAL}: Store in global in-memory map (for life of server).</li><li>{@code AUTHENTICATION}: Store aup acceptance such that user is prompted when
they authenticate via credentials.</li></ul>
# cas.acceptable-usage-policy.in-memory.scope: GLOBAL

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The column to store the AUP attribute. May differ from the profile attribute defined by {@link AcceptableUsagePolicyCoreProperties#getAupAttributeName()}. SQL query can be further customized by setting {@link #sqlUpdate}.
# cas.acceptable-usage-policy.jdbc.aup-column: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.acceptable-usage-policy.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.acceptable-usage-policy.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.acceptable-usage-policy.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.acceptable-usage-policy.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.acceptable-usage-policy.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.acceptable-usage-policy.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.acceptable-usage-policy.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The JDBC driver used to connect to the database.
# cas.acceptable-usage-policy.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.acceptable-usage-policy.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.acceptable-usage-policy.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Allow hibernate to generate query statistics.
# cas.acceptable-usage-policy.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.acceptable-usage-policy.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.acceptable-usage-policy.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.acceptable-usage-policy.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.acceptable-usage-policy.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.acceptable-usage-policy.jdbc.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The database connection password.
# cas.acceptable-usage-policy.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.acceptable-usage-policy.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.acceptable-usage-policy.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.acceptable-usage-policy.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.acceptable-usage-policy.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.acceptable-usage-policy.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.acceptable-usage-policy.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The profile attribute to extract the value for the {@link #principalIdColumn} used in the WHERE clause of {@link #sqlUpdate}. If empty, the principal ID will be used.
# cas.acceptable-usage-policy.jdbc.principal-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The column to identify the principal. SQL query can be further customized by setting {@link #sqlUpdate}.
# cas.acceptable-usage-policy.jdbc.principal-id-column: username

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.acceptable-usage-policy.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.acceptable-usage-policy.jdbc.properties: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The query template to search for the AUP attribute. %s placeholders represent {@link #aupColumn}, {@link #tableName}, {@link #principalIdColumn} settings.
# cas.acceptable-usage-policy.jdbc.sql-select: SELECT %s FROM %s WHERE %s&#61;?

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The query template to update the AUP attribute. %s placeholders represent {@link #tableName}, {@link #aupColumn}, {@link #principalIdColumn} settings.
# cas.acceptable-usage-policy.jdbc.sql-update: UPDATE %s SET %s&#61;true WHERE %s&#61;?

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The table name in the database that holds the AUP attribute to update for the user.
# cas.acceptable-usage-policy.jdbc.table-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The database connection URL.
# cas.acceptable-usage-policy.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.JdbcAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.acceptable-usage-policy.jdbc.user: sa

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties>
# Owner: org.apereo.cas.configuration.model.support.aup.AcceptableUsagePolicyProperties
# Module: cas-server-support-aup-webflow
# Control AUP via LDAP.
# cas.acceptable-usage-policy.ldap: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.acceptable-usage-policy.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Set if multiple Entries are allowed.
# cas.acceptable-usage-policy.ldap[].allow-multiple-entries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Attribute value that indicates whether AUP has been accepted
for the LDAP record.
# cas.acceptable-usage-policy.ldap[].aup-accepted-attribute-value: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Base DN to use.
There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating
the LDAP configuration block for each individual base-dn, each entry can be specified
and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN
resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned.
Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.acceptable-usage-policy.ldap[].base-dn: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.acceptable-usage-policy.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The bind credential to use when connecting to LDAP.
# cas.acceptable-usage-policy.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.acceptable-usage-policy.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.acceptable-usage-policy.ldap[].block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Sets the maximum amount of time that connects will block.
# cas.acceptable-usage-policy.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.acceptable-usage-policy.ldap[].connection-strategy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether to use a pooled connection factory in components.
# cas.acceptable-usage-policy.ldap[].disable-pooling: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.acceptable-usage-policy.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Set if search referrals should be followed.
# cas.acceptable-usage-policy.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.acceptable-usage-policy.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.acceptable-usage-policy.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.acceptable-usage-policy.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Keystore password.
# cas.acceptable-usage-policy.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.acceptable-usage-policy.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.acceptable-usage-policy.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.acceptable-usage-policy.ldap[].max-pool-size: 10

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.acceptable-usage-policy.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Name of the LDAP handler.
# cas.acceptable-usage-policy.ldap[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Request that the server return results in batches of a
specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often
used to work around server result size limits.
A negative/zero value disables paged requests.
# cas.acceptable-usage-policy.ldap[].page-size: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.acceptable-usage-policy.ldap[].pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.acceptable-usage-policy.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Duration of time to wait for responses.
# cas.acceptable-usage-policy.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# SASL authorization id.
# cas.acceptable-usage-policy.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The SASL mechanism.
# cas.acceptable-usage-policy.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# SASL mutual auth is enabled?
# cas.acceptable-usage-policy.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# SASL quality of protected.
# cas.acceptable-usage-policy.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The SASL realm.
# cas.acceptable-usage-policy.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# SASL security strength.
# cas.acceptable-usage-policy.ldap[].sasl-security-strength: 

# Required: false
# Type: java.util.List<LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Search handlers.
# cas.acceptable-usage-policy.ldap[].search-entry-handlers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# User filter to use for searching.
Syntax is {@code cn={user}} or {@code cn={0}}.

You may also provide an external groovy script
in the syntax of {@code file:/path/to/GroovyScript.groovy}
to fully build the final filter template dynamically.
# cas.acceptable-usage-policy.ldap[].search-filter: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether subtree searching is allowed.
# cas.acceptable-usage-policy.ldap[].subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.acceptable-usage-policy.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.acceptable-usage-policy.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.acceptable-usage-policy.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Password needed to open the truststore.
# cas.acceptable-usage-policy.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.acceptable-usage-policy.ldap[].trust-store-type: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.acceptable-usage-policy.ldap[].use-start-tls: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.acceptable-usage-policy.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Period at which pool should be validated.
# cas.acceptable-usage-policy.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.acceptable-usage-policy.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.LdapAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-ldap
# Period at which validation operations may time out.
# cas.acceptable-usage-policy.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.acceptable-usage-policy.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.acceptable-usage-policy.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.acceptable-usage-policy.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.acceptable-usage-policy.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.acceptable-usage-policy.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.acceptable-usage-policy.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.acceptable-usage-policy.ldap[].validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Name of the database to use for authentication.
# cas.acceptable-usage-policy.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.acceptable-usage-policy.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database collection name to fetch and/or create.
# cas.acceptable-usage-policy.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database instance name.
# cas.acceptable-usage-policy.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Whether collections should be dropped on startup and re-created.
# cas.acceptable-usage-policy.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.acceptable-usage-policy.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database password for authentication.
# cas.acceptable-usage-policy.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.acceptable-usage-policy.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.acceptable-usage-policy.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.acceptable-usage-policy.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.acceptable-usage-policy.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.acceptable-usage-policy.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.acceptable-usage-policy.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database port.
# cas.acceptable-usage-policy.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.acceptable-usage-policy.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.acceptable-usage-policy.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.acceptable-usage-policy.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.acceptable-usage-policy.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.acceptable-usage-policy.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Whether connections require SSL.
# cas.acceptable-usage-policy.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database connection timeout.
# cas.acceptable-usage-policy.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# MongoDb database user for authentication.
# cas.acceptable-usage-policy.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.MongoDbAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.acceptable-usage-policy.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.acceptable-usage-policy.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.acceptable-usage-policy.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.acceptable-usage-policy.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.acceptable-usage-policy.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.acceptable-usage-policy.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.acceptable-usage-policy.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.acceptable-usage-policy.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.acceptable-usage-policy.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.acceptable-usage-policy.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.acceptable-usage-policy.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.acceptable-usage-policy.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.acceptable-usage-policy.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Connection timeout.
# cas.acceptable-usage-policy.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Database index used by the connection factory.
# cas.acceptable-usage-policy.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Whether the module is enabled or not, defaults to true.
# cas.acceptable-usage-policy.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Redis server host.
# cas.acceptable-usage-policy.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Login password of the redis server.
# cas.acceptable-usage-policy.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.acceptable-usage-policy.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.acceptable-usage-policy.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.acceptable-usage-policy.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.acceptable-usage-policy.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.acceptable-usage-policy.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.acceptable-usage-policy.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.acceptable-usage-policy.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.acceptable-usage-policy.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.acceptable-usage-policy.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.acceptable-usage-policy.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.acceptable-usage-policy.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.acceptable-usage-policy.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.acceptable-usage-policy.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.acceptable-usage-policy.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Redis server port.
# cas.acceptable-usage-policy.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.acceptable-usage-policy.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.acceptable-usage-policy.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.acceptable-usage-policy.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Command timeout.
# cas.acceptable-usage-policy.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aup.RedisAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-redis
# Whether or not to use SSL for connection factory.
# cas.acceptable-usage-policy.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RestAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.acceptable-usage-policy.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RestAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.acceptable-usage-policy.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.aup.RestAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.acceptable-usage-policy.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RestAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.acceptable-usage-policy.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aup.RestAcceptableUsagePolicyProperties
# Module: cas-server-support-aup-rest
# The endpoint URL to contact and retrieve attributes.
# cas.acceptable-usage-policy.rest.url: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.acme.domain-chain.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.acme.domain-csr.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.acme.domain-key.location: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# List of domains or sub domains that are requesting a certificate renewal.
# cas.acme.domains: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# Indicate the key length/size used when requesting/generating keys.
# cas.acme.key-size: 2048

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# Number of attempts to retry when executing certificate orders or checking for status of an existing order or challenge acknowledgement.
# cas.acme.retry-attempts: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# Delay interval between to retry attempts when executing certificate orders or checking for status of an existing order or challenge acknowledgement.
# cas.acme.retry-internal: PT2S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# Server url to contact, when requesting certificates. Use {@code acme://letsencrypt.org} for production.
# cas.acme.server-url: acme://letsencrypt.org/staging

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.acme.AcmeProperties
# Module: cas-server-support-acme
# Flag that indicates ACME terms of use has been accepted by the user.
# cas.acme.terms-of-use-accepted: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.acme.user-key.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.admin-pages-security.actuator-endpoints-enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: cas.adminPagesSecurity.* moved to management.endpoints.*., e.g. management.endpoints.enabled-by-default.

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.admin-pages-security.ip: 
# Deprecation Level: ERROR
# Deprecation Reason: management endpoints security under cas.monitor.endpoints.endpoint

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Client execution timeout.
# cas.amazon-sts.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Connection timeout.
# cas.amazon-sts.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Use access-key provided by AWS to authenticate.
# cas.amazon-sts.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Use secret key provided by AWS to authenticate.
# cas.amazon-sts.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# AWS custom endpoint.
# cas.amazon-sts.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Local address.
# cas.amazon-sts.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Maximum connections setting.
# cas.amazon-sts.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Attribute name that must be found and resolved for the principal to authorize the user to proceed with obtaining credentials.
# cas.amazon-sts.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Attribute value, defined as a regex pattern that must be found and resolved for the principal to authorize the user to proceed with obtaining credentials.
# cas.amazon-sts.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Profile name to use.
# cas.amazon-sts.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Profile path.
# cas.amazon-sts.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Optionally specifies the proxy host to connect through.
# cas.amazon-sts.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Optionally specifies the proxy password to connect through.
# cas.amazon-sts.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Optionally specifies the proxy username to connect through.
# cas.amazon-sts.proxy-username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# When set to {@code true}, credentials will be obtained based on roles as attributes resolved for the user. Typically, you could use roles wthin your account or for cross-account access. <p> When set to {@code true}, the {@link #getPrincipalAttributeName()} must contain {@code roleArn}s as values.
# cas.amazon-sts.rbac-enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# AWS region used.
# cas.amazon-sts.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.amazon-sts.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Socket timeout.
# cas.amazon-sts.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonSecurityTokenServiceProperties
# Module: cas-server-support-aws
# Flag that indicates whether to use reaper.
# cas.amazon-sts.use-reaper: false

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.audit.alternate-client-addr-header-name: 
# Deprecation Level: ERROR
# Deprecation Reason: alternate-client-addr-header-name setting is now moved into the engine namespace.
# Deprecation Replacement: cas.audit.engine.alternate-client-addr-header-name

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Make DB updates asynchronously.
# cas.audit.couch-db.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Use a local cache to reduce fetches..
# cas.audit.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Remove idle connections from pool.
# cas.audit.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# TCP connection timeout.
# cas.audit.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Create the database if it doesn't exist.
# cas.audit.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Database name.
# cas.audit.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.audit.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Max entries in local cache.
# cas.audit.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Maximum connections to CouchDB.
# cas.audit.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Largest allowable serialized object.
# cas.audit.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Password for connection.
# cas.audit.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Proxy host.
# cas.audit.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# proxy port.
# cas.audit.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.audit.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Retries for update conflicts.
# cas.audit.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Socket idle timeout.
# cas.audit.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Connection url.
# cas.audit.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Expect HTTP 100 Continue during connection.
# cas.audit.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchDbProperties
# Module: cas-server-support-audit-couchdb
# Username for connection.
# cas.audit.couch-db.username: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Node addresses.
# cas.audit.couchbase.addresses: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Whether audit records should be executed asynchronously.
# cas.audit.couchbase.asynchronous: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Bucket name.
# cas.audit.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Cluster password.
# cas.audit.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Cluster username.
# cas.audit.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of connection timeout.
# cas.audit.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of idle connection timeout.
# cas.audit.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of KV timeout.
# cas.audit.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Maximum number of connections made to the cluster.
# cas.audit.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.audit.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Maximum number of parallel threads made for queries.
# cas.audit.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of query threshold.
# cas.audit.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of query timeout.
# cas.audit.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.audit.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of scan timeout.
# cas.audit.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of search timeout.
# cas.audit.couchbase.search-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditCouchbaseProperties
# Module: cas-server-support-audit-couchbase
# String representation of view timeout.
# cas.audit.couchbase.view-timeout: PT30S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Make storage requests asynchronously.
# cas.audit.dynamo-db.asynchronous: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.audit.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Client execution timeout.
# cas.audit.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Connection timeout.
# cas.audit.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.audit.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.audit.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.audit.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# AWS custom endpoint.
# cas.audit.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Local address.
# cas.audit.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.audit.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Maximum connections setting.
# cas.audit.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.audit.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Profile name to use.
# cas.audit.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Profile path.
# cas.audit.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.audit.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.audit.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.audit.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Read capacity.
# cas.audit.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# AWS region used.
# cas.audit.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.audit.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Socket timeout.
# cas.audit.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# The table name used and created by CAS to hold audit logs in DynamoDb.
# cas.audit.dynamo-db.table-name: DynamoDbCasAuditRecords

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Time offset.
# cas.audit.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Flag that indicates whether to use reaper.
# cas.audit.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.AuditDynamoDbProperties
# Module: cas-server-support-audit-dynamodb
# Write capacity.
# cas.audit.dynamo-db.write-capacity: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Request header to use identify the client address. <p> If the application is sitting behind a load balancer, the client address typically ends up being the load balancer address itself. A common example for a header here would be {@code X-Forwarded-For} to glean the client address from the request, assuming the load balancer is configured correctly to pass that header along.
# cas.audit.engine.alternate-client-addr-header-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Request header to use identify the server address.
# cas.audit.engine.alternate-server-addr-header-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Application code to use in the audit logs. <p> This is a unique code that acts as the identifier for the application. In case audit logs are aggregated in a central location. This makes it easy to identify the application and filter results based on the code.
# cas.audit.engine.app-code: CAS

# Required: false
# Type: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties$AuditFormatTypes
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# The audit format to use in the logs.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default audit format.</li><li>{@code JSON}: Output audit logs as JSON strings
where necessary/possible.</li></ul>
# cas.audit.engine.audit-format: DEFAULT

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Whether auditing functionality should be enabled.
# cas.audit.engine.enabled: true

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Indicate a list of supported audit actions that should be excluded, filtered and ignored by CAS audit managers. Each supported action can be treated as a regular expression to match against built-in CAS actions.
# cas.audit.engine.excluded-actions: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Indicates whether catastrophic audit failures should be logged or whether errors should bubble up and thrown back.
# cas.audit.engine.ignore-audit-failures: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Whether ticket validation events in the audit log should include information about the assertion that is validated; things such as the principal id and attributes released.
# cas.audit.engine.include-validation-assertion: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Retrieve audit records from storage, starting from now and going back the indicated number of days in history.
# cas.audit.engine.number-of-days-in-history: 30

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Indicate a list of supported audit actions that should be recognized, processed and recorded by CAS audit managers. Each supported action can be treated as a regular expression to match against built-in CAS actions.
# cas.audit.engine.supported-actions: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditEngineProperties
# Module: cas-server-core-audit
# Determines whether a local DNS lookup should be made to query for the CAS server address. <p> By default, the server is address is determined from the request. Aside from special headers, this option allows one to query DNS to look up the server address of the CAS server processing requests.
# cas.audit.engine.use-server-host-address: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Execute the recording of audit records in async manner. This setting must almost always be set to true.
# cas.audit.jdbc.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.audit.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.audit.jdbc.batch-size: 100

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Allows one to trim the audit data by the specified length. A negative value disables the trimming process where the audit functionality no longer substrings the audit record.
# cas.audit.jdbc.column-length: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.audit.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Indicate the date formatter pattern used to fetch audit records from the database based on the record date. Default value is {@code yyyy-MM-dd 00:00:00.000000}.
# cas.audit.jdbc.date-formatter-pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.audit.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.audit.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.audit.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.audit.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The JDBC driver used to connect to the database.
# cas.audit.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.audit.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.audit.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Allow hibernate to generate query statistics.
# cas.audit.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.audit.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.audit.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.audit.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.audit.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.audit.jdbc.leak-threshold: 3000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Indicates how long audit records should be kept in the database. This is used by the clean-up criteria to clean up after stale audit records.
# cas.audit.jdbc.max-age-days: 180

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The database connection password.
# cas.audit.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.audit.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.audit.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.audit.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.audit.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.audit.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.audit.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.audit.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.audit.jdbc.properties: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.audit.jdbc.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.audit.jdbc.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.audit.jdbc.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.audit.jdbc.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# SQL query that provides a template to fetch audit records. Accepts two parameters using {@code %s} for table name and audit date.
# cas.audit.jdbc.select-sql-query-template: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The database connection URL.
# cas.audit.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditJdbcProperties
# Module: cas-server-support-audit-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.audit.jdbc.user: sa

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Execute the recording of audit records in async manner. This setting must almost always be set to true.
# cas.audit.mongo.asynchronous: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Name of the database to use for authentication.
# cas.audit.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.audit.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database collection name to fetch and/or create.
# cas.audit.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database instance name.
# cas.audit.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Whether collections should be dropped on startup and re-created.
# cas.audit.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.audit.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database password for authentication.
# cas.audit.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.audit.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.audit.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.audit.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.audit.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.audit.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.audit.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database port.
# cas.audit.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.audit.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.audit.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.audit.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.audit.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.audit.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Whether connections require SSL.
# cas.audit.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database connection timeout.
# cas.audit.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# MongoDb database user for authentication.
# cas.audit.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditMongoDbProperties
# Module: cas-server-support-audit-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.audit.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Execute the recording of audit records in async manner. This setting must almost always be set to true.
# cas.audit.redis.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.audit.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.audit.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.audit.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.audit.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.audit.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.audit.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.audit.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.audit.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.audit.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.audit.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.audit.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.audit.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Connection timeout.
# cas.audit.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Database index used by the connection factory.
# cas.audit.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Whether the module is enabled or not, defaults to true.
# cas.audit.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Redis server host.
# cas.audit.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Login password of the redis server.
# cas.audit.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.audit.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.audit.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.audit.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.audit.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.audit.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.audit.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.audit.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.audit.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.audit.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.audit.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.audit.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.audit.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.audit.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.audit.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Redis server port.
# cas.audit.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.audit.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.audit.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.audit.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Command timeout.
# cas.audit.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.AuditRedisProperties
# Module: cas-server-support-audit-redis
# Whether or not to use SSL for connection factory.
# cas.audit.redis.use-ssl: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# Make storage requests asynchronously.
# cas.audit.rest.asynchronous: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.audit.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.audit.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.audit.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.audit.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditRestProperties
# Module: cas-server-support-audit-rest
# The endpoint URL to contact and retrieve attributes.
# cas.audit.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.audit.slf4j.audit-format: 
# Deprecation Level: ERROR
# Deprecation Reason: audit-format is now moved into the engine namespace.
# Deprecation Replacement: cas.audit.engine.audit-format

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditSlf4jLogProperties
# Module: cas-server-core-audit
# Decide whether Slf4j audits should be enabled.
# cas.audit.slf4j.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.audit.AuditSlf4jLogProperties
# Module: cas-server-core-audit
# Character to separate audit fields if single-line audits are used.
# cas.audit.slf4j.singleline-separator: |

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.audit.AuditSlf4jLogProperties
# Module: cas-server-core-audit
# Indicates whether audit logs should be recorded as a single-line. <p> By default, audit logs are split into multiple lines where each action and activity takes up a full line. This is a more compact version.
# cas.audit.slf4j.use-single-line: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential and as such lend themselves to be tried and tested during the authentication handler selection phase. The credential criteria may be one of the following options:<ul> <li>1) A regular expression pattern that is tested against the credential identifier.</li> <li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li> <li>3) Path to an external Groovy script that implements the same interface.</li> </ul>
# cas.authn.accept.credential-criteria: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# Indicates whether the authentication strategy is enabled. The strategy may also be disabled explicitly if the {@link #users} is left blank.
# cas.authn.accept.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# Name of the authentication handler.
# cas.authn.accept.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# Order of the authentication handler in the chain.
# cas.authn.accept.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.accept.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.accept.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.accept.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.accept.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.accept.password-encoder.type: NONE

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates whether account state handling should be enabled to process warnings or errors reported back from the authentication response, produced by the source.
# cas.authn.accept.password-policy.account-state-handling-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates if warning should be displayed, when the ldap attribute value matches the {@link #warningAttributeValue}.
# cas.authn.accept.password-policy.display-warning-on-match: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Whether password policy should be enabled.
# cas.authn.accept.password-policy.enabled: true

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPasswordPolicyProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.accept.password-policy.groovy.location: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# When dealing with FreeIPA, indicates the number of allows login failures.
# cas.authn.accept.password-policy.login-failures: 5

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.Class<? extends javax.security.auth.login.LoginException>>
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Key-value structure (Map) that indicates a list of boolean attributes as keys. If either attribute value is true, indicating an account state is flagged, the corresponding error can be thrown. Example {@code accountLocked=javax.security.auth.login.AccountLockedException}
# cas.authn.accept.password-policy.policy-attributes: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties$PasswordPolicyHandlingOptions
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Decide how authentication should handle password policy changes.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option to handle policy changes.</li><li>{@code GROOVY}: Handle account password policies via Groovy.</li><li>{@code REJECT_RESULT_CODE}: Strategy to only activate password policy
if the authentication response code is not blocked.</li></ul>
# cas.authn.accept.password-policy.strategy: 30

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Always display the password expiration warning regardless.
# cas.authn.accept.password-policy.warn-all: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings in case the entry carries this attribute.
# cas.authn.accept.password-policy.warning-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings in case the entry carries an attribute {@link #warningAttributeName} whose value matches this field.
# cas.authn.accept.password-policy.warning-attribute-value: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# This is used to calculate a warning period to see if account expiry is within the calculated window.
# cas.authn.accept.password-policy.warning-days: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.accept.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.accept.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.accept.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.accept.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.accept.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.accept.principal-transformation.suffix: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.accept.state: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties
# Module: cas-server-core-authentication
# Accepted users for authentication, in the syntax of {@code uid::password}.
# cas.authn.accept.users: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot
# Module: cas-server-core-authentication
# Include your contact information so you can be notified if a problem arise or if there are core changes.
# cas.authn.adaptive.ip-intel.black-dot.email-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot
# Module: cas-server-core-authentication
# <ul> <li>{@code DYNA_LIST}: If you get a value between 0 - 1, exclusive (like 0.99, 0.99999, 0.97), these values are generated by dynamic checks which looks for characteristics of the given IP. IPs that are either manually banned or seen on a public proxy site will return a value of 1. If you only want manually banned or public proxies, then in your code just look for the value "1". However, there are many IPs that haven't gone through manual review and IPs can change behavior very frequently (which is why dynamic checks exist in the first place). If you only look for the value of "1", then expect to have more proxy / VPN / bad IPs go through your system, however, false positives are less likely if you use the dynamic ban list option. If you wish to use only manually banned and public proxy IPs, append the parameter flags=m, the system will only return a result of 0 or 1. This option is the best to start off with that will have a noticeable impact in bot / proxy / VPN traffic, especially if you don't have any data sets to test with the system.</li> <li>{@code DYNA_CHECK}: In this scenario, you want to use dynamic checks as well but you want to skip additional checks to see if the IP is a bad ip (see What do you mean by "Bad IP"?). In this mode, some bad IPs are still detected but the system does not attempt to go through the full bad IPs check because the time for the extra checks vary wildly (between an extra 200ms to 2 seconds). In this mode, false positives are more likely than dynamic ban lists only. Scores are lower compared to the full IP check (without any flag options) because less attributes are considered. If you wish to use dynamic ban list and dynamic checks only, append the parameter flags=b. This option is the best if dynamic ban lists isn't catching enough IPs but you don't want to run the full check because it takes too long and/or you want to have a predictable execution time.</li> <li>{@code FULL}: Let the system to do a full lookup with one query.</li> </ul>
# cas.authn.adaptive.ip-intel.black-dot.mode: DYNA_LIST

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot
# Module: cas-server-core-authentication
# URL endpoint of the service to make API calls.
# cas.authn.adaptive.ip-intel.black-dot.url: http://check.getipintel.net/check.php?ip&#61;%s

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.adaptive.ip-intel.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.adaptive.ip-intel.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.adaptive.ip-intel.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.adaptive.ip-intel.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.adaptive.ip-intel.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.adaptive.ip-intel.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Comma-separated list of strings representing browser user agents to be rejected from participating in authentication transactions.
# cas.authn.adaptive.policy.reject-browsers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Comma-separated list of strings representing countries to be rejected from participating in authentication transactions.
# cas.authn.adaptive.policy.reject-countries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Comma-separated list of strings representing IP addresses to be rejected from participating in authentication transactions.
# cas.authn.adaptive.policy.reject-ip-addresses: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# A map of ({@code mfaProviderId -> adaptiveRegexPattern}) that tells CAS when to trigger an MFA authentication transaction. <p> This property binds a valid mfa provider to an adaptive regex pattern representing either IP address, user-agent or geolocation. When either of those collected pieces of adaptive data matches configured regex pattern during authentication event, an MFA authentication transaction is triggered for an MFA provider represented by the map's key. </p>
# cas.authn.adaptive.policy.require-multifactor: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# This property binds a valid mfa provider to a collection of rules that deal with triggering mfa based on that provider based on properties of date/time. One may want to force mfa during weekends, after hours, etc and the ruleset provides a modest configuration set where time can also be treated as trigger.
# cas.authn.adaptive.policy.require-timed-multifactor: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties
# Module: cas-server-core-authentication
# Trigger mfa on the following days of the week.
# cas.authn.adaptive.policy.require-timed-multifactor[].on-days: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties
# Module: cas-server-core-authentication
# Trigger mfa after this hour, specified in 24-hour format.
# cas.authn.adaptive.policy.require-timed-multifactor[].on-or-after-hour: 20

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties
# Module: cas-server-core-authentication
# Trigger mfa before this hour, specified in 24-hour format.
# cas.authn.adaptive.policy.require-timed-multifactor[].on-or-before-hour: 7

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties
# Module: cas-server-core-authentication
# The mfa provider id that should be triggered.
# cas.authn.adaptive.policy.require-timed-multifactor[].provider-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.Agent
# Module: cas-server-support-electrofence
# Enable user-agent checking and criteria to calculate risky authentication attempts.
# cas.authn.adaptive.risk.agent.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.DateTime
# Module: cas-server-support-electrofence
# Enable date/time checking and criteria to calculate risky authentication attempts.
# cas.authn.adaptive.risk.date-time.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.DateTime
# Module: cas-server-support-electrofence
# The hourly window used before and after each authentication event in calculation to establish a pattern that can then be compared against the threshold.
# cas.authn.adaptive.risk.date-time.window-in-hours: 2

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties
# Module: cas-server-support-electrofence
# Indicates how far back the search in authentication history must go in order to locate authentication events.
# cas.authn.adaptive.risk.days-in-recent-history: 30

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.GeoLocation
# Module: cas-server-support-electrofence
# Enable geolocation checking and criteria to calculate risky authentication attempts.
# cas.authn.adaptive.risk.geo-location.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.IpAddress
# Module: cas-server-support-electrofence
# Enable IP address checking and criteria to calculate risky authentication attempts.
# cas.authn.adaptive.risk.ip.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.Response
# Module: cas-server-support-electrofence
# If an authentication attempt is deemed risky, block the response and do not allow further attempts.
# cas.authn.adaptive.risk.response.block-attempt: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.adaptive.risk.response.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.adaptive.risk.response.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.adaptive.risk.response.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.adaptive.risk.response.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.adaptive.risk.response.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.adaptive.risk.response.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.adaptive.risk.response.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.adaptive.risk.response.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.adaptive.risk.response.mail.validate-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.Response
# Module: cas-server-support-electrofence
# If an authentication attempt is deemed risky, force a multi-factor authentication event noted by the provider id here.
# cas.authn.adaptive.risk.response.mfa-provider: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties.Response
# Module: cas-server-support-electrofence
# If an authentication attempt is deemed risky, communicate the nature of this attempt back to the application via a special attribute in the final CAS response indicated here.
# cas.authn.adaptive.risk.response.risky-authentication-attribute: triggeredRiskBasedAuthentication

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.adaptive.risk.response.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.authn.adaptive.risk.response.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.authn.adaptive.risk.response.sms.text: 

# Required: false
# Type: java.lang.Double
# Owner: org.apereo.cas.configuration.model.core.authentication.RiskBasedAuthenticationProperties
# Module: cas-server-support-electrofence
# The risk threshold factor beyond which the authentication event may be considered risky.
# cas.authn.adaptive.risk.threshold: 0.6

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.attribute-repository.attribute-definition-store.json.location: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple Microsoft Graph instances.
# cas.authn.attribute-repository.azure-active-directory: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Base API url used to contact microsoft graph for calls.
# cas.authn.attribute-repository.azure-active-directory[].api-base-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Comma-separated attributes and user properties to fetch from microsoft graph.
If attributes are specified here, they would be the only ones requested and fetched.
If this field is left blank, a default set of attributes are fetched and returned.
# cas.authn.attribute-repository.azure-active-directory[].attributes: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Whether attribute repository should consider the underlying
attribute names in a case-insensitive manner.
# cas.authn.attribute-repository.azure-active-directory[].case-insensitive: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Client id of the registered app in microsoft azure portal.
# cas.authn.attribute-repository.azure-active-directory[].client-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Client secret of the registered app in microsoft azure portal.
# cas.authn.attribute-repository.azure-active-directory[].client-secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Domain that is appended to usernames when doing lookups.
The {@code @} is automatically included.
# cas.authn.attribute-repository.azure-active-directory[].domain: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Grant type used to fetch access tokens; defaults to {@code client_credentials}.
# cas.authn.attribute-repository.azure-active-directory[].grant-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.azure-active-directory[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Adjust the logging level of the API calls. Defaults to {@code basic}.
Accepted values are {@code none,headers,basic,body}.
# cas.authn.attribute-repository.azure-active-directory[].logging-level: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Base login url used to fetch access tokens.
# cas.authn.attribute-repository.azure-active-directory[].login-base-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.azure-active-directory[].order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Resource to fetch access tokens for; defaults to the graph api url.
# cas.authn.attribute-repository.azure-active-directory[].resource: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# Scope used when fetching access tokens.
# cas.authn.attribute-repository.azure-active-directory[].scope: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties
# Module: cas-server-support-azuread-authentication
# The microsoft tenant id.
# cas.authn.attribute-repository.azure-active-directory[].tenant: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties$AggregationStrategyTypes
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# Indicates how the results of multiple attribute repositories should be aggregated together.
Available values are as follows:
<ul><li>{@code MERGE}: Default. Designed to query multiple repositories
in order and merge the results into a single result set.</li><li>{@code CASCADE}:  Query multiple repositories in order and merge the results into
 a single result set. As each repository is queried
 the attributes from the first query in the result set are
 used as the query for the next repository.</li></ul>
# cas.authn.attribute-repository.core.aggregation: MERGE

# Required: false
# Type: java.util.Set<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# CAS provides the ability to release a bundle of principal attributes to all services by default. This bundle is not defined on a per-service basis and is always combined with attributes produced by the specific release policy of the service, such that for instance, you can devise rules to always release {@code givenName} and {@code cn} to every application, and additionally allow other specific principal attributes for only some applications per their attribute release policy.
# cas.authn.attribute-repository.core.default-attributes-to-release: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# Indicates the global cache expiration period, once attributes are fetched from the underlying attribute repository. A zero or negative value indicates that no attribute caching should take place where attributes must always be fetched from the source.
# cas.authn.attribute-repository.core.expiration-time: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# Expiration caching time unit for attributes.
# cas.authn.attribute-repository.core.expiration-time-unit: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# Indicates the global cache size used to store attributes retrieved from the attribute repository.
# cas.authn.attribute-repository.core.maximum-cache-size: 10000

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties$MergingStrategyTypes
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# Merging strategies can be used to resolve conflicts when the same attribute are found from multiple sources.
Available values are as follows:
<ul><li>{@code REPLACE}: Replace attributes.  Overwrites existing attribute values, if any.</li><li>{@code ADD}: Add attributes.
Retains existing attribute values if any, and ignores values from subsequent sources in the resolution chain.</li><li>{@code NONE}: No merging.
Doesn't merge attributes, ignores attributes from non-authentication attribute repositories.</li><li>{@code MULTIVALUED}: Multivalued attributes.
Combines all values into a single attribute, essentially creating a multi-valued attribute.</li></ul>
# cas.authn.attribute-repository.core.merger: MERGE

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties
# Module: cas-server-core-authentication
# In the event that multiple attribute repositories are defined, setting this option to {@code true} forces all repositories to produce a person object. If any of the repositories fails to produce a person or person attributes, the resolution engine will halt to short-circuit the process, failing to resolve the person altogether.
# cas.authn.attribute-repository.core.require-all-repository-sources: false

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Node addresses.
# cas.authn.attribute-repository.couchbase.addresses: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Bucket name.
# cas.authn.attribute-repository.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Cluster password.
# cas.authn.attribute-repository.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Cluster username.
# cas.authn.attribute-repository.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of connection timeout.
# cas.authn.attribute-repository.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.couchbase.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of idle connection timeout.
# cas.authn.attribute-repository.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of KV timeout.
# cas.authn.attribute-repository.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Maximum number of connections made to the cluster.
# cas.authn.attribute-repository.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.authn.attribute-repository.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Maximum number of parallel threads made for queries.
# cas.authn.attribute-repository.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# The order of this attribute repository in the chain of repositories. Can be used to explicitly position this source in chain and affects merging strategies.
# cas.authn.attribute-repository.couchbase.order: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of query threshold.
# cas.authn.attribute-repository.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of query timeout.
# cas.authn.attribute-repository.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.authn.attribute-repository.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of scan timeout.
# cas.authn.attribute-repository.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of search timeout.
# cas.authn.attribute-repository.couchbase.search-timeout: PT30S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# Username attribute to fetch attributes by.
# cas.authn.attribute-repository.couchbase.username-attribute: username

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbasePrincipalAttributesProperties
# Module: cas-server-support-couchbase-authentication
# String representation of view timeout.
# cas.authn.attribute-repository.couchbase.view-timeout: PT30S

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple Groovy scripts.
# cas.authn.attribute-repository.groovy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether attribute repository should consider the underlying
attribute names in a case-insensitive manner.
# cas.authn.attribute-repository.groovy[].case-insensitive: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.groovy[].id: 

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.attribute-repository.groovy[].location: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.groovy[].order: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Enable the attribute repository source.
# cas.authn.attribute-repository.grouper.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.grouper.id: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories. Can be used to explicitly position this source in chain and affects merging strategies.
# cas.authn.attribute-repository.grouper.order: 0

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Custom parameters defined as a {@link Map} to pass onto the attribute repository which ultimately will be passed onto the grouper client. Key is the parameter name and value is the parameter value.
# cas.authn.attribute-repository.grouper.parameters: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Indicate how the username passed to the attribute repository should be set and treated by the grouper client to look up records. Accepted values are: {@code SUBJECT_IDENTIFIER}, {@code SUBJECT_ATTRIBUTE_NAME}, {@code SUBJECT_ID}.
# cas.authn.attribute-repository.grouper.subject-type: SUBJECT_ID

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The attribute name that would be used to look up and determine the user id from the query map. The value linked to this attribute would be used as the username or subject by the attribute repository to pass on to the ultimate source to locate the user record.
# cas.authn.attribute-repository.grouper.username-attribute: username

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple JDBC repositories.
# cas.authn.attribute-repository.jdbc: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Map of attributes to fetch from the database.
Attributes are defined using a key-value structure
where CAS allows the attribute name/key to be renamed virtually
to a different attribute. The key is the attribute fetched
from the data source and the value is the attribute name CAS should
use for virtual renames.
Attributes may be allowed to be virtually renamed and remapped. The key in the
attribute map is the original attribute,
and the value should be the virtually-renamed attribute.
# cas.authn.attribute-repository.jdbc[].attributes: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The default auto-commit behavior of connections in the pool.
Determined whether queries such as update/insert should be immediately executed
without waiting for an underlying transaction.
# cas.authn.attribute-repository.jdbc[].autocommit: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.attribute-repository.jdbc[].batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# When constructing the final person object from the attribute repository,
indicate how the username should be canonicalized.
Accepted values are:
<ul>
<li>{@code UPPER}: Transform the final person id into uppercase characters.</li>
<li>{@code LOWER}: Transform the final person id into lowercase characters.</li>
<li>{@code NONE}: Do nothing.</li>
</ul>
# cas.authn.attribute-repository.jdbc[].case-canonicalization: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Collection of attributes, used to build the SQL query, that should go through
a case canonicalization process defined as {@code key->value}.
Note that the key is not the name of
the attribute, but the query attribute that is used in generating the
final query clause (i.e. {@code username}). The value can be {@code NONE, LOWER, UPPER}.

It's also possible to define a list of attributes without a
case canonicalization override such as {@code username, attribute2}
in which case {@link #caseCanonicalization} will dictate the final outcome.
# cas.authn.attribute-repository.jdbc[].case-insensitive-query-attributes: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Used only when there is a mapping of many rows to one user.
This is done using a key-value structure where the key is the
name of the "attribute name" column  the value is the name of the "attribute value" column.
If the table structure is as such:
&lt;pre&gt;
-----------------------------
uid | attr_name  | attr_value
-----------------------------
tom | first_name | Thomas
&lt;/pre&gt;
Then a column mapping must be specified to teach CAS to use {@code attr_name}
and {@code attr_value} for attribute names and values.
# cas.authn.attribute-repository.jdbc[].column-mappings: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Attempts to do a JNDI data source look up for the data source name specified.
Will attempt to locate the data source object as is.
# cas.authn.attribute-repository.jdbc[].data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Hibernate feature to automatically validate and exports DDL to the schema.
By default, creates and drops the schema automatically when a session is starts and ends.
Setting the value to {@code validate} or {@code none} may be more desirable for production,
but any of the following options can be used:
<ul>
    <li>{@code validate}: Validate the schema, but make no changes to the database.</li>
    <li>{@code update}: Update the schema.</li>
    <li>{@code create}: Create the schema, destroying previous data.</li>
    <li>{@code create-drop}: Drop the schema at the end of the session.</li>
    <li>{@code none}: Do nothing.</li>
</ul>
<p>
Note that during a version migration where any schema has changed {@code create-drop} will result
in the loss of all data as soon as CAS is started. For transient data like tickets this is probably
not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe
for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings
are likely the only safe options for production use.
</p>
For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.attribute-repository.jdbc[].ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.attribute-repository.jdbc[].default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.attribute-repository.jdbc[].default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)
which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.attribute-repository.jdbc[].dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The JDBC driver used to connect to the database.
# cas.authn.attribute-repository.jdbc[].driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Set the pool initialization failure timeout.
<ul>
<li>Any value greater than zero will be treated as a timeout for pool initialization.
The calling thread will be blocked from continuing until a successful connection
to the database, or until the timeout is reached.  If the timeout is reached, then
a {@code PoolInitializationException} will be thrown. </li>
<li>A value of zero will <i>not</i>  prevent the pool from starting in the
case that a connection cannot be obtained. However, upon start the pool will
attempt to obtain a connection and validate that the {@code connectionTestQuery}
and {@code connectionInitSql} are valid.  If those validations fail, an exception
will be thrown.  If a connection cannot be obtained, the validation is skipped
and the the pool will start and continue to try to obtain connections in the
background. This can mean that callers to {@code DataSource#getConnection()} may
encounter exceptions. </li>
<li>A value less than zero will <i>not</i> bypass any connection attempt and
validation during startup, and therefore the pool will start immediately.  The
pool will continue to try to obtain connections in the background. This can mean
that callers to {@code DataSource#getConnection()} may encounter exceptions. </li>
</ul>
Note that if this timeout value is greater than or equal to zero (0), and therefore an
initial connection validation is performed, this timeout does not override the
{@code connectionTimeout} or {@code validationTimeout}; they will be honored before this
timeout is applied.  The default value is one millisecond.
# cas.authn.attribute-repository.jdbc[].fail-fast-timeout: 1

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Used to specify number of rows to be fetched in a select query.
# cas.authn.attribute-repository.jdbc[].fetch-size: 100

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Allow hibernate to generate query statistics.
# cas.authn.attribute-repository.jdbc[].generate-statistics: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The SQL query to be executed to test the validity of connections.
# cas.authn.attribute-repository.jdbc[].health-query: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.jdbc[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.attribute-repository.jdbc[].idle-timeout: PT10M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# This property determines whether data source isolates internal pool queries, such as the connection alive test,
in their own transaction.
<p>
Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction.
This property only applies if {@link #autocommit} is disabled.
# cas.authn.attribute-repository.jdbc[].isolate-internal-queries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Defines the isolation level for transactions.
# cas.authn.attribute-repository.jdbc[].isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Controls the amount of time that a connection can be out of the pool before a message
is logged indicating a possible connection leak.
# cas.authn.attribute-repository.jdbc[].leak-threshold: 3_000

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.jdbc[].order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The database connection password.
# cas.authn.attribute-repository.jdbc[].password: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.attribute-repository.jdbc[].physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.authn.attribute-repository.jdbc[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.attribute-repository.jdbc[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.authn.attribute-repository.jdbc[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.attribute-repository.jdbc[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.authn.attribute-repository.jdbc[].pool.timeout-millis: 1_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Defines the propagation behavior for transactions.
# cas.authn.attribute-repository.jdbc[].propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.attribute-repository.jdbc[].properties: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Define a {@code Map} of query attribute names to data-layer attribute names to use when building the query.
The key is always the name of the query attribute that is defined by CAS and passed internally,
and the value is the database column that should map.
# cas.authn.attribute-repository.jdbc[].query-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Indicates how multiple attributes in a query should be concatenated together.
Accepted values are:
* <ul>
<li>{@code AND}: Concatenate attributes in the query using an AND-clause.</li>
<li>{@code OR}: Concatenate attributes in the query using an OR-clause.</li>
</ul>
# cas.authn.attribute-repository.jdbc[].query-type: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# If the SQL should only be run if all attributes listed in the mappings exist in the query.
# cas.authn.attribute-repository.jdbc[].require-all-attributes: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Designed to work against a table where there is a mapping of one row to one user.
The fields in the table structure is assumed to match {@code username|name|lastname|address}
where there is only a single row per user.
Setting this setting to {@code false} will force CAS to work against a table where
there is a mapping of one row to one user.
The fields in the table structure is assumed to match {@code username|attr_name|attr_value}
where there is more than one row per username.
# cas.authn.attribute-repository.jdbc[].single-row: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The SQL statement to execute and fetch attributes.
The syntax of the query must be {@code SELECT * FROM table WHERE {0}}.
The {@code WHERE} clause is dynamically generated by CAS.
# cas.authn.attribute-repository.jdbc[].sql: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The database connection URL.
# cas.authn.attribute-repository.jdbc[].url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The database user.
<p>
The database user must have sufficient permissions to be able to handle
schema changes and updates, when needed.
# cas.authn.attribute-repository.jdbc[].user: sa

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Username attribute(s) to use when running the SQL query.
# cas.authn.attribute-repository.jdbc[].username: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.JsonPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple JSON file repositories.
# cas.authn.attribute-repository.json: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.JsonPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.json[].id: 

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.JsonPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.attribute-repository.json[].location: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.JsonPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.json[].order: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple LDAP servers.
# cas.authn.attribute-repository.ldap: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.authn.attribute-repository.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Set if multiple Entries are allowed.
# cas.authn.attribute-repository.ldap[].allow-multiple-entries: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Map of attributes to fetch from the source.
Attributes are defined using a key-value structure
where CAS allows the attribute name/key to be renamed virtually
to a different attribute. The key is the attribute fetched
from the data source and the value is the attribute name CAS should
use for virtual renames.

Attributes may be allowed to be virtually renamed and remapped. The key in the
attribute map is the original attribute,
and the value should be the virtually-renamed attribute.

To fetch and resolve attributes that carry tags/options,
consider tagging the mapped attribute as such: {@code affiliation=affiliation}.
# cas.authn.attribute-repository.ldap[].attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Base DN to use.
There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating
the LDAP configuration block for each individual base-dn, each entry can be specified
and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN
resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned.
Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.attribute-repository.ldap[].base-dn: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.authn.attribute-repository.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The bind credential to use when connecting to LDAP.
# cas.authn.attribute-repository.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.authn.attribute-repository.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.authn.attribute-repository.ldap[].block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Sets the maximum amount of time that connects will block.
# cas.authn.attribute-repository.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.authn.attribute-repository.ldap[].connection-strategy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether to use a pooled connection factory in components.
# cas.authn.attribute-repository.ldap[].disable-pooling: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.authn.attribute-repository.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Set if search referrals should be followed.
# cas.authn.attribute-repository.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.attribute-repository.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.ldap[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.authn.attribute-repository.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.authn.attribute-repository.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Keystore password.
# cas.authn.attribute-repository.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.attribute-repository.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.attribute-repository.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.attribute-repository.ldap[].max-pool-size: 10

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.authn.attribute-repository.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Name of the LDAP handler.
# cas.authn.attribute-repository.ldap[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.ldap[].order: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Request that the server return results in batches of a
specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often
used to work around server result size limits.
A negative/zero value disables paged requests.
# cas.authn.attribute-repository.ldap[].page-size: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.authn.attribute-repository.ldap[].pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.authn.attribute-repository.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Duration of time to wait for responses.
# cas.authn.attribute-repository.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# SASL authorization id.
# cas.authn.attribute-repository.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The SASL mechanism.
# cas.authn.attribute-repository.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# SASL mutual auth is enabled?
# cas.authn.attribute-repository.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# SASL quality of protected.
# cas.authn.attribute-repository.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The SASL realm.
# cas.authn.attribute-repository.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# SASL security strength.
# cas.authn.attribute-repository.ldap[].sasl-security-strength: 

# Required: false
# Type: java.util.List<LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Search handlers.
# cas.authn.attribute-repository.ldap[].search-entry-handlers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# User filter to use for searching.
Syntax is {@code cn={user}} or {@code cn={0}}.

You may also provide an external groovy script
in the syntax of {@code file:/path/to/GroovyScript.groovy}
to fully build the final filter template dynamically.
# cas.authn.attribute-repository.ldap[].search-filter: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether subtree searching is allowed.
# cas.authn.attribute-repository.ldap[].subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.authn.attribute-repository.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.authn.attribute-repository.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.authn.attribute-repository.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Password needed to open the truststore.
# cas.authn.attribute-repository.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.attribute-repository.ldap[].trust-store-type: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.attribute-repository.ldap[].use-start-tls: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether connections should be validated when loaned out from the pool.
# cas.authn.attribute-repository.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Period at which pool should be validated.
# cas.authn.attribute-repository.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.attribute-repository.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Period at which validation operations may time out.
# cas.authn.attribute-repository.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.attribute-repository.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.attribute-repository.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.attribute-repository.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.attribute-repository.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.attribute-repository.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.attribute-repository.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.authn.attribute-repository.ldap[].validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Okta API token.
# cas.authn.attribute-repository.okta.api-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Okta client id used in combination with the private key.
# cas.authn.attribute-repository.okta.client-id: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Connection timeout in milliseconds.
# cas.authn.attribute-repository.okta.connection-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.okta.id: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# The order of this authentication handler in the chain.
# cas.authn.attribute-repository.okta.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Okta domain.
# cas.authn.attribute-repository.okta.organization-url: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.attribute-repository.okta.private-key.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the hostname.
# cas.authn.attribute-repository.okta.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy password.
# cas.authn.attribute-repository.okta.proxy-password: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy port. Negative/zero values should deactivate the proxy configuration for the http client.
# cas.authn.attribute-repository.okta.proxy-port: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy username.
# cas.authn.attribute-repository.okta.proxy-username: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Okta allows you to interact with Okta APIs using scoped OAuth 2.0 access tokens. Each access token enables the bearer to perform specific actions on specific Okta endpoints, with that ability controlled by which scopes the access token contains. Scopes are only used when using client id and private-key.
# cas.authn.attribute-repository.okta.scopes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaPrincipalAttributesProperties
# Module: cas-server-support-okta-authentication
# Username attribute to fetch attributes by.
# cas.authn.attribute-repository.okta.username-attribute: username

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from redis repositories.
# cas.authn.attribute-repository.redis: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.attribute-repository.redis[].cluster.adaptive-topology-refresh: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the
cluster topology. When set to false, only the initial seed nodes are
used as sources for topology discovery.
# cas.authn.attribute-repository.redis[].cluster.dynamic-refresh-sources: true

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.attribute-repository.redis[].cluster.max-redirects: 

# Required: false
# Type: java.util.List<RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.attribute-repository.redis[].cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.attribute-repository.redis[].cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.attribute-repository.redis[].cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Connection timeout.
# cas.authn.attribute-repository.redis[].connect-timeout: PT10S

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Database index used by the connection factory.
# cas.authn.attribute-repository.redis[].database: 

# Required: true
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Whether the module is enabled or not, defaults to true.
# cas.authn.attribute-repository.redis[].enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Redis server host.
# cas.authn.attribute-repository.redis[].host: localhost

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.redis[].id: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.redis[].order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Login password of the redis server.
# cas.authn.attribute-repository.redis[].password: 

# Required: true
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.attribute-repository.redis[].pool.enabled: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects
fairly. True means that waiting threads are served as if waiting in a FIFO
queue.
# cas.authn.attribute-repository.redis[].pool.fairness: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect
to idle objects - always returning the most recently used object from the
pool, or as a FIFO (first in, first out) queue, where the pool always returns
the oldest object in the idle object pool.
# cas.authn.attribute-repository.redis[].pool.lifo: true

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time.
Use a negative value for no limit.
# cas.authn.attribute-repository.redis[].pool.max-active: 8

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to
indicate an unlimited number of idle connections.
# cas.authn.attribute-repository.redis[].pool.max-idle: 8

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block
before throwing an exception when the pool is exhausted. Use a negative value
to block indefinitely.
# cas.authn.attribute-repository.redis[].pool.max-wait: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it
is eligible for eviction by the idle object evictor (if any - see
setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will
be evicted from the pool due to idle time alone.
# cas.authn.attribute-repository.redis[].pool.min-evictable-idle-time-millis: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool.
This setting only has an effect if it is positive.
# cas.authn.attribute-repository.redis[].pool.min-idle: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the
idle object evictor thread. When positive, the number of tests performed for
a run will be the minimum of the configured value and the number of idle
instances in the pool. When negative, the number of tests performed will be
ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when
the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.attribute-repository.redis[].pool.num-tests-per-eviction-run: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it
is eligible for eviction by the idle object evictor (if any - see
setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at
least minIdle object instances remain in the pool. This setting is overridden
by getMinEvictableIdleTimeMillis() (that is, if
getMinEvictableIdleTimeMillis() is positive, then
getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.attribute-repository.redis[].pool.soft-min-evictable-idle-time-millis: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being
returned from the borrowObject() method. Validation is performed by the
validateObject() method of the factory associated with the pool. If the
object fails to validate, it will be removed from the pool and destroyed, and
a new attempt will be made to borrow an object from the pool.
# cas.authn.attribute-repository.redis[].pool.test-on-borrow: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being
returned from the borrowObject() method. Validation is performed by the
validateObject() method of the factory associated with the pool. If the
object fails to validate, then borrowObject() will fail.
# cas.authn.attribute-repository.redis[].pool.test-on-create: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they
are returned to the pool via the returnObject() method. Validation is
performed by the validateObject() method of the factory associated with the
pool. Returning objects that fail validation are destroyed rather then being
returned the pool.
# cas.authn.attribute-repository.redis[].pool.test-on-return: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the
idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)).
Validation is performed by the validateObject() method of the factory
associated with the pool. If the object fails to validate, it will be removed
from the pool and destroyed.
# cas.authn.attribute-repository.redis[].pool.test-while-idle: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Redis server port.
# cas.authn.attribute-repository.redis[].port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties.RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Setting that describes how Lettuce routes read operations to replica nodes.
Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency
so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.attribute-repository.redis[].read-from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.attribute-repository.redis[].sentinel.master: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.attribute-repository.redis[].sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Command timeout.
# cas.authn.attribute-repository.redis[].timeout: PT60S

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPrincipalAttributesProperties
# Module: cas-server-support-redis-authentication
# Whether or not to use SSL for connection factory.
# cas.authn.attribute-repository.redis[].use-ssl: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple REST endpoints.
# cas.authn.attribute-repository.rest: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# If REST endpoint is protected via basic authentication,
specify the password for authentication.
# cas.authn.attribute-repository.rest[].basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# If REST endpoint is protected via basic authentication,
specify the username for authentication.
# cas.authn.attribute-repository.rest[].basic-auth-username: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether attribute repository should consider the underlying
attribute names in a case-insensitive manner.
# cas.authn.attribute-repository.rest[].case-insensitive: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Headers, defined as a Map, to include in the request when making the REST call.
Will overwrite any header that CAS is pre-defined to
send and include in the request. Key in the map should be the header name
and the value in the map should be the header value.
# cas.authn.attribute-repository.rest[].headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.rest[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# HTTP method to use when contacting the rest endpoint.
Examples include {@code GET, POST}, etc.
# cas.authn.attribute-repository.rest[].method: GET

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.rest[].order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The endpoint URL to contact and retrieve attributes.
# cas.authn.attribute-repository.rest[].url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The attribute name that would be used to look up and
determine the user id from the query map. The value
linked to this attribute would be used as the username
or subject by the attribute repository to pass on
to the ultimate source to locate the user record.
# cas.authn.attribute-repository.rest[].username-attribute: username

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties
# Module: cas-server-core-authentication
# Retrieve attributes from multiple scripted repositories. @deprecated Since 6.2
# cas.authn.attribute-repository.script: 
# Deprecation Level: ERROR

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Whether attribute repository should consider the underlying
attribute names in a case-insensitive manner.
# cas.authn.attribute-repository.script[].case-insensitive: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Script engine name, e.g. groovy, js, python, etc.
Required if CAS can't determine based on extension.
The file extension of the resource will be used to determine the engineName if not specified.
Engines must be on the classpath in order for the engineName to be determined automatically.
The first engine found claiming to support the extension of the file specified will be used.
# cas.authn.attribute-repository.script[].engine-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.script[].id: 

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.attribute-repository.script[].location: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories.
Can be used to explicitly position this source in chain and affects
merging strategies.
# cas.authn.attribute-repository.script[].order: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.StubPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# Static attributes that need to be mapped to a hardcoded value belong here. The structure follows a key-value pair where key is the attribute name and value is the attribute value. The key is the attribute fetched from the source and the value is the attribute name CAS should use for virtual renames. Attributes may be allowed to be virtually renamed and remapped. The key in the attribute map is the original attribute, and the value should be the virtually-renamed attribute.
# cas.authn.attribute-repository.stub.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.StubPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# A value can be assigned to this field to uniquely identify this resolver.
# cas.authn.attribute-repository.stub.id: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.StubPrincipalAttributesProperties
# Module: cas-server-support-person-directory
# The order of this attribute repository in the chain of repositories. Can be used to explicitly position this source in chain and affects merging strategies.
# cas.authn.attribute-repository.stub.order: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationAttributeReleaseProperties
# Module: cas-server-support-validation
# Whether CAS authentication/protocol attributes should be released as part of ticket validation.
# cas.authn.authentication-attribute-release.enabled: true

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationAttributeReleaseProperties
# Module: cas-server-support-validation
# List of authentication attributes that should never be released.
# cas.authn.authentication-attribute-release.never-release: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationAttributeReleaseProperties
# Module: cas-server-support-validation
# List of authentication attributes that should be the only ones released. An empty list indicates all attributes should be released.
# cas.authn.authentication-attribute-release.only-release: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# Client id of the application.
# cas.authn.azure-active-directory.client-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential and as such lend themselves to be tried and tested during the authentication handler selection phase. The credential criteria may be one of the following options:<ul> <li>1) A regular expression pattern that is tested against the credential identifier.</li> <li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li> <li>3) Path to an external Groovy script that implements the same interface.</li> </ul>
# cas.authn.azure-active-directory.credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# Login url including the tenant id.
# cas.authn.azure-active-directory.login-url: https://login.microsoftonline.com/common/

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# The name of the authentication handler.
# cas.authn.azure-active-directory.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# The order of this authentication handler in the chain.
# cas.authn.azure-active-directory.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.azure-active-directory.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.azure-active-directory.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.azure-active-directory.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.azure-active-directory.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.azure-active-directory.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.azure-active-directory.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.azure-active-directory.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.azure-active-directory.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.azure-active-directory.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.azure-active-directory.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.azure-active-directory.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# Resource url for the graph API to fetch attributes.
# cas.authn.azure-active-directory.resource: https://graph.microsoft.com/

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAuthenticationProperties
# Module: cas-server-support-azuread-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.azure-active-directory.state: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Query option consistency level. The consistency level set through this method will be use for queries that don't explicitly have a consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.authn.cassandra.consistency-level: LOCAL_QUORUM

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# The list of contact points to use for the new cluster.
# cas.authn.cassandra.contact-points: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Keyspace address to use where the cluster would connect.
# cas.authn.cassandra.keyspace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Used by a DC-ware round-robin load balancing policy. This policy provides round-robin queries over the node of the local data center. It also includes in the query plans returned a configurable number of hosts in the remote data centers, but those are always tried after the local nodes. In other words, this policy guarantees that no host in a remote data center will be queried unless no host in the local data center can be reached.
# cas.authn.cassandra.local-dc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Name of the authentication handler.
# cas.authn.cassandra.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# The authentication handler order in the chain.
# cas.authn.cassandra.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Password to bind and establish a connection to cassandra.
# cas.authn.cassandra.password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Password attribute to fetch and compare.
# cas.authn.cassandra.password-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.cassandra.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.cassandra.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.cassandra.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.cassandra.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.cassandra.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.cassandra.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.cassandra.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.cassandra.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.cassandra.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.cassandra.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.cassandra.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# The authentication query to use when searching for users.
# cas.authn.cassandra.query: SELECT * FROM %s WHERE %s &#61; ? ALLOW FILTERING

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Query option serial consistency level. The serial consistency level set through this method will be use for queries that don't explicitly have a serial consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.authn.cassandra.serial-consistency-level: LOCAL_SERIAL

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Table name to fetch credentials.
# cas.authn.cassandra.table-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# The request timeout. This defines how long the driver will wait for a given Cassandra node to answer a query.
# cas.authn.cassandra.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Username to bind and establish a connection to cassandra.
# cas.authn.cassandra.username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.authentication.CassandraAuthenticationProperties
# Module: cas-server-support-cassandra-authentication
# Username attribute to fetch and compare.
# cas.authn.cassandra.username-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Client execution timeout.
# cas.authn.cloud-directory.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Connection timeout.
# cas.authn.cloud-directory.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Use access-key provided by AWS to authenticate.
# cas.authn.cloud-directory.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Use secret key provided by AWS to authenticate.
# cas.authn.cloud-directory.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Directory ARN.
# cas.authn.cloud-directory.directory-arn: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# AWS custom endpoint.
# cas.authn.cloud-directory.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Facet name.
# cas.authn.cloud-directory.facet-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Local address.
# cas.authn.cloud-directory.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Maximum connections setting.
# cas.authn.cloud-directory.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# The name of the authentication handler.
# cas.authn.cloud-directory.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# The order of this authentication handler in the chain.
# cas.authn.cloud-directory.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Password attribute to choose on the entry to compare.
# cas.authn.cloud-directory.password-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.cloud-directory.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.cloud-directory.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.cloud-directory.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.cloud-directory.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.cloud-directory.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.cloud-directory.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.cloud-directory.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.cloud-directory.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.cloud-directory.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.cloud-directory.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.cloud-directory.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Profile name to use.
# cas.authn.cloud-directory.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Profile path.
# cas.authn.cloud-directory.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Optionally specifies the proxy host to connect through.
# cas.authn.cloud-directory.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Optionally specifies the proxy password to connect through.
# cas.authn.cloud-directory.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Optionally specifies the proxy username to connect through.
# cas.authn.cloud-directory.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# AWS region used.
# cas.authn.cloud-directory.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.cloud-directory.retry-mode: STANDARD

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Schema ARN.
# cas.authn.cloud-directory.schema-arn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Socket timeout.
# cas.authn.cloud-directory.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Flag that indicates whether to use reaper.
# cas.authn.cloud-directory.use-reaper: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Username attribute to choose when locating accounts.
# cas.authn.cloud-directory.username-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.clouddirectory.AmazonCloudDirectoryProperties
# Module: cas-server-support-cloud-directory-authentication
# Username index path.
# cas.authn.cloud-directory.username-index-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Client execution timeout.
# cas.authn.cognito.client-execution-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# The application client id, created in Cognito without a secret key.
# cas.authn.cognito.client-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Connection timeout.
# cas.authn.cognito.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Use access-key provided by AWS to authenticate.
# cas.authn.cognito.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Use secret key provided by AWS to authenticate.
# cas.authn.cognito.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# AWS custom endpoint.
# cas.authn.cognito.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Local address.
# cas.authn.cognito.local-address: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Map of attributes to rename after fetching from the user pool. Mapped attributes are defined using a key-value structure where CAS allows the attribute name/key to be renamed virtually to a different attribute. The key is the attribute fetched from the user pool and the value is the attribute name CAS should use for virtual renames.
# cas.authn.cognito.mapped-attributes: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Maximum connections setting.
# cas.authn.cognito.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# The name of the authentication handler.
# cas.authn.cognito.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# The order of this authentication handler in the chain.
# cas.authn.cognito.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.cognito.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.cognito.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.cognito.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.cognito.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.cognito.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.cognito.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.cognito.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.cognito.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.cognito.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.cognito.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.cognito.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Profile name to use.
# cas.authn.cognito.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Profile path.
# cas.authn.cognito.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Optionally specifies the proxy host to connect through.
# cas.authn.cognito.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Optionally specifies the proxy password to connect through.
# cas.authn.cognito.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Optionally specifies the proxy username to connect through.
# cas.authn.cognito.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# AWS region used.
# cas.authn.cognito.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.cognito.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Socket timeout.
# cas.authn.cognito.socket-timeout: 5000

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.cognito.state: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# Flag that indicates whether to use reaper.
# cas.authn.cognito.use-reaper: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cognito.AmazonCognitoAuthenticationProperties
# Module: cas-server-support-aws-cognito-authentication
# The user pool identifiers where accounts may be located.
# cas.authn.cognito.user-pool-id: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationEngineProcessorProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.core.engine.groovy-post-processor.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationEngineProcessorProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.core.engine.groovy-pre-processor.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationHandlerResolutionProperties
# Module: cas-server-support-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.core.groovy-authentication-resolution.location: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationHandlerResolutionProperties
# Module: cas-server-support-authentication
# The execution order of this resolver in the chain of authentication handler resolvers.
# cas.authn.core.groovy-authentication-resolution.order: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.RegisteredServiceAuthenticationHandlerResolutionProperties
# Module: cas-server-support-authentication
# The execution order of this resolver in the chain of authentication handler resolvers.
# cas.authn.core.service-authentication-resolution.order: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Attributes to fetch from CouchDb.
# cas.authn.couch-db.attributes: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Use a local cache to reduce fetches..
# cas.authn.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Remove idle connections from pool.
# cas.authn.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# TCP connection timeout.
# cas.authn.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Create the database if it doesn't exist.
# cas.authn.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Database name.
# cas.authn.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Use TLS. Only needed if not specified by URL.
# cas.authn.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Max entries in local cache.
# cas.authn.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Maximum connections to CouchDB.
# cas.authn.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Largest allowable serialized object.
# cas.authn.couch-db.max-object-size-bytes: 8192

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# The name of the authentication handler.
# cas.authn.couch-db.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Order of authentication handler in chain.
# cas.authn.couch-db.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Password for connection.
# cas.authn.couch-db.password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Password attribute to fetch and compare against credential.
# cas.authn.couch-db.password-attribute: password

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.couch-db.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.couch-db.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.couch-db.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.couch-db.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.couch-db.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.couch-db.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.couch-db.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.couch-db.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.couch-db.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.couch-db.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.couch-db.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Proxy host.
# cas.authn.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# proxy port.
# cas.authn.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Retries for update conflicts.
# cas.authn.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Socket idle timeout.
# cas.authn.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Connection url.
# cas.authn.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Expect HTTP 100 Continue during connection.
# cas.authn.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Username for connection.
# cas.authn.couch-db.username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.authentication.CouchDbAuthenticationProperties
# Module: cas-server-support-couchdb-authentication
# Username attribute to fetch and compare against credential.
# cas.authn.couch-db.username-attribute: username

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Node addresses.
# cas.authn.couchbase.addresses: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Bucket name.
# cas.authn.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Cluster password.
# cas.authn.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Cluster username.
# cas.authn.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of connection timeout.
# cas.authn.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of idle connection timeout.
# cas.authn.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of KV timeout.
# cas.authn.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Maximum number of connections made to the cluster.
# cas.authn.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.authn.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Maximum number of parallel threads made for queries.
# cas.authn.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# The name of the authentication handler.
# cas.authn.couchbase.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Order of authentication handler in chain.
# cas.authn.couchbase.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Password attribute to fetch and compare against credential.
# cas.authn.couchbase.password-attribute: psw

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.couchbase.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.couchbase.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.couchbase.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.couchbase.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.couchbase.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.couchbase.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.couchbase.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.couchbase.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.couchbase.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.couchbase.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.couchbase.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of query threshold.
# cas.authn.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of query timeout.
# cas.authn.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.authn.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of scan timeout.
# cas.authn.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of search timeout.
# cas.authn.couchbase.search-timeout: PT30S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# Username attribute to fetch and compare against credential.
# cas.authn.couchbase.username-attribute: username

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.authentication.CouchbaseAuthenticationProperties
# Module: cas-server-support-couchbase-authentication
# String representation of view timeout.
# cas.authn.couchbase.view-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.digest.DigestProperties
# Module: cas-server-support-digest-authentication
# Authentication method used when creating digest header.
# cas.authn.digest.authentication-method: auth

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.digest.DigestProperties
# Module: cas-server-support-digest-authentication
# Name of the authentication handler.
# cas.authn.digest.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.digest.DigestProperties
# Module: cas-server-support-digest-authentication
# Order of the authentication handler in the chain.
# cas.authn.digest.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.digest.DigestProperties
# Module: cas-server-support-digest-authentication
# The digest realm to use.
# cas.authn.digest.realm: CAS

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.digest.DigestProperties
# Module: cas-server-support-digest-authentication
# Static/stub list of username and passwords to accept if no other account store is defined.
# cas.authn.digest.users: 

# Required: false
# Type: java.util.List<java.lang.Class<? extends java.lang.Exception>>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationExceptionsProperties
# Module: cas-server-core-authentication
# Define custom exceptions that can then be mapped to message bundles for custom error handling. <p> By default CAS is configured to recognize and handle a number of exceptions for during authentication. Each exception has the specific message bundle mapping so that a specific message could be presented to end users on the login form. Any un-recognized or un-mapped exceptions results in a generic message. To map custom exceptions, one would need map the exception, they can be defined here and then linked to custom messages.
# cas.authn.errors.exceptions: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationExceptionsProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.errors.groovy.location: 

# Required: false
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.generic.FileAuthenticationProperties
# Module: cas-server-support-generic
# File resource where user accounts are kept.
# cas.authn.file.filename: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.FileAuthenticationProperties
# Module: cas-server-support-generic
# Authentication handler name used to verify credentials in the file.
# cas.authn.file.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.file.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.file.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.file.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.file.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.file.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.file.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.file.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.file.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.file.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.file.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.file.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.FileAuthenticationProperties
# Module: cas-server-support-generic
# Separator character that distinguishes between usernames and passwords in the file.
# cas.authn.file.separator: ::

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.fortress.FortressAuthenticationProperties
# Module: cas-server-support-fortress
# Use this setting to set the tenant id onto function call into Fortress which allows segregation of data by customer. The context is used for multi-tenancy to isolate data sets within a particular sub-tree within DIT. Setting contextId into this object will render this class' implementer thread unsafe.
# cas.authn.fortress.rbaccontext: HOME

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.generic.GroovyAuthenticationProperties
# Module: cas-server-support-generic
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.GroovyAuthenticationProperties
# Module: cas-server-support-generic
# Authentication handler name used to verify credentials in the file.
# cas.authn.groovy.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.generic.GroovyAuthenticationProperties
# Module: cas-server-support-generic
# Order of the authentication handler in the chain.
# cas.authn.groovy.order: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.generic.GroovyAuthenticationProperties
# Module: cas-server-support-generic
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.groovy.state: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.gua.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Set if multiple Entries are allowed.
# cas.authn.gua.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.gua.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.gua.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The bind credential to use when connecting to LDAP.
# cas.authn.gua.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.gua.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.gua.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Sets the maximum amount of time that connects will block.
# cas.authn.gua.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.gua.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether to use a pooled connection factory in components.
# cas.authn.gua.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.gua.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Set if search referrals should be followed.
# cas.authn.gua.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.gua.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.gua.ldap.idle-time: PT10M

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Entry attribute that holds the user image.
# cas.authn.gua.ldap.image-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.gua.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Keystore password.
# cas.authn.gua.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.gua.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.gua.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.gua.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.gua.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Name of the LDAP handler.
# cas.authn.gua.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.gua.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.gua.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.gua.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Duration of time to wait for responses.
# cas.authn.gua.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# SASL authorization id.
# cas.authn.gua.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The SASL mechanism.
# cas.authn.gua.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# SASL mutual auth is enabled?
# cas.authn.gua.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# SASL quality of protected.
# cas.authn.gua.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The SASL realm.
# cas.authn.gua.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# SASL security strength.
# cas.authn.gua.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Search handlers.
# cas.authn.gua.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.gua.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.gua.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.gua.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.gua.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.gua.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.gua.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.gua.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.gua.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.gua.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.gua.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.gua.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.gua.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.gua.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.gua.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether subtree searching is allowed.
# cas.authn.gua.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.gua.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.gua.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.gua.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Password needed to open the truststore.
# cas.authn.gua.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.gua.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.gua.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether connections should be validated when loaned out from the pool.
# cas.authn.gua.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Period at which pool should be validated.
# cas.authn.gua.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.gua.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.gua.LdapGraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Period at which validation operations may time out.
# cas.authn.gua.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.gua.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.gua.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.gua.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.gua.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.gua.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.gua.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.gua.ldap.validator.type: search

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.gua.GraphicalUserAuthenticationProperties
# Module: cas-server-support-gua
# Locate GUA settings and images from a static image per user. This is treated as a {@link Map} where the key is the user id and the value should be the graphical resource.
# cas.authn.gua.simple: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties
# Module: cas-server-core-authentication
# Collection of settings related to JAAS authentication. These settings are required to be indexed (i.e. jaas[0].xyz).
# cas.authn.jaas: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:
<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.jaas[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Typically, the default realm and the KDC for that realm are indicated in the Kerberos {@code krb5.conf} configuration file.
However, if you like, you can instead specify the realm value by setting this following system property value.
<p>If you set the realm property, you SHOULD also configure the kerberos KDC system property.
<p>Also note that if you set these properties, then no cross-realm authentication is possible unless
a {@code krb5.conf} file is also provided from which the additional information required for cross-realm authentication
may be obtained.
<p>If you set values for these properties, then they override the default realm and KDC values specified
in {@code krb5.conf} (if such a file is found). The {@code krb5.conf} file is still consulted if values for items
other than the default realm and KDC are needed. If no {@code krb5.conf} file is found,
then the default values used for these items are implementation-specific.
# cas.authn.jaas[].kerberos-kdc-system-property: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Typically, the default realm and the KDC for that realm are indicated in the Kerberos {@code krb5.conf} configuration file.
However, if you like, you can instead specify the realm value by setting this following system property value.
<p>If you set the realm property, you SHOULD also configure the kerberos KDC system property.
<p>Also note that if you set these properties, then no cross-realm authentication is possible unless
a {@code krb5.conf} file is also provided from which the additional information required for cross-realm authentication
may be obtained.
<p>If you set values for these properties, then they override the default realm and KDC values specified
in {@code krb5.conf} (if such a file is found). The {@code krb5.conf} file is still consulted if values for items
other than the default realm and KDC are needed. If no {@code krb5.conf} file is found,
then the default values used for these items are implementation-specific.
# cas.authn.jaas[].kerberos-realm-system-property: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Typically set to {@code JavaLoginConfig} which is the default Configuration implementation
from the SUN provider. This type accepts a URI/path to a configuration file as a valid parameter type specified via {@link #loginConfigurationFile}.
If this parameter is not specified, then the configuration information is loaded from the sources described
in the ConfigFile class specification. If this parameter is specified, the configuration information is loaded solely from the specified URI.
# cas.authn.jaas[].login-config-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Path to the location of configuration file (i.e. jaas.conf) that contains the realms and login modules.
# cas.authn.jaas[].login-configuration-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Name of the authentication handler.
# cas.authn.jaas[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Order of the authentication handler in the chain.
# cas.authn.jaas[].order: MAX_VALUE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.jaas[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.jaas[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.jaas[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.jaas[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.jaas[].password-encoder.type: NONE

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates whether account state handling should be enabled to process
warnings or errors reported back from the authentication response, produced by the source.
# cas.authn.jaas[].password-policy.account-state-handling-enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates if warning should be displayed, when the ldap attribute value
matches the {@link #warningAttributeValue}.
# cas.authn.jaas[].password-policy.display-warning-on-match: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Whether password policy should be enabled.
# cas.authn.jaas[].password-policy.enabled: true

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jaas[].password-policy.groovy.location: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# When dealing with FreeIPA, indicates the number of allows login failures.
# cas.authn.jaas[].password-policy.login-failures: 5

# Required: false
# Type: java.util.Map<String,Class<? extends LoginException>>
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Key-value structure (Map) that indicates a list of boolean attributes as keys.
If either attribute value is true, indicating an account state is flagged,
the corresponding error can be thrown.
Example {@code accountLocked=javax.security.auth.login.AccountLockedException}
# cas.authn.jaas[].password-policy.policy-attributes: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties.PasswordPolicyHandlingOptions
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Decide how authentication should handle password policy changes.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option to handle policy changes.</li><li>{@code GROOVY}: Handle account password policies via Groovy.</li><li>{@code REJECT_RESULT_CODE}: Strategy to only activate password policy
if the authentication response code is not blocked.</li></ul>
# cas.authn.jaas[].password-policy.strategy: DEFAULT

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Always display the password expiration warning regardless.
# cas.authn.jaas[].password-policy.warn-all: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings
in case the entry carries this attribute.
# cas.authn.jaas[].password-policy.warning-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings
in case the entry carries an attribute {@link #warningAttributeName}
whose value matches this field.
# cas.authn.jaas[].password-policy.warning-attribute-value: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# This is used to calculate
a warning period to see if account expiry is within the calculated window.
# cas.authn.jaas[].password-policy.warning-days: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.jaas[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.jaas[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jaas[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.jaas[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.jaas[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.jaas[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers
that should be used for fetching attributes
if attribute resolution is enabled.
The list here may include identifiers separated by comma.
# cas.authn.jaas[].principal.active-attribute-repository-ids: 

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted
to fetch person attributes. Defaults to true if not set.
# cas.authn.jaas[].principal.attribute-resolution-enabled: UNDEFINED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed.
If the attribute is blank or has no values, the default principal id will be used
determined by the underlying authentication engine. The principal id attribute
usually is removed from the collection of attributes collected, though this behavior
depends on the schematics of the underlying authentication strategy.
# cas.authn.jaas[].principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves
more than one principal, (specially if such principals in the chain
have different identifiers), this setting determines strategy by which
the principal id would be chosen from the chain.
Accepted values are: {@code last}, {@code first}.
# cas.authn.jaas[].principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution
has failed and no principal can be found based on the authentication requirements.
Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.jaas[].principal.principal-resolution-failure-fatal: UNDEFINED

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.jaas[].principal.return-null: UNDEFINED

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already
been established in order to run person directory queries.
This is generally useful in situations where
authentication is delegated to an external identity provider
and a principal is first established to then query an attribute source.
# cas.authn.jaas[].principal.use-existing-principal-id: UNDEFINED

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# JAAS realm to use.
# cas.authn.jaas[].realm: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties
# Module: cas-server-core-authentication
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.jaas[].state: ACTIVE

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jdbc.authn.BindJdbcAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Settings related to bind-mode jdbc authentication. Authenticates a user by attempting to create a database connection using the username and (hashed) password.
# cas.authn.jdbc.bind: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The default auto-commit behavior of connections in the pool.
Determined whether queries such as update/insert should be immediately executed
without waiting for an underlying transaction.
# cas.authn.jdbc.bind[].autocommit: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.jdbc.bind[].batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.jdbc.bind[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Attempts to do a JNDI data source look up for the data source name specified.
Will attempt to locate the data source object as is.
# cas.authn.jdbc.bind[].data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Hibernate feature to automatically validate and exports DDL to the schema.
By default, creates and drops the schema automatically when a session is starts and ends.
Setting the value to {@code validate} or {@code none} may be more desirable for production,
but any of the following options can be used:
<ul>
    <li>{@code validate}: Validate the schema, but make no changes to the database.</li>
    <li>{@code update}: Update the schema.</li>
    <li>{@code create}: Create the schema, destroying previous data.</li>
    <li>{@code create-drop}: Drop the schema at the end of the session.</li>
    <li>{@code none}: Do nothing.</li>
</ul>
<p>
Note that during a version migration where any schema has changed {@code create-drop} will result
in the loss of all data as soon as CAS is started. For transient data like tickets this is probably
not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe
for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings
are likely the only safe options for production use.
</p>
For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.jdbc.bind[].ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.jdbc.bind[].default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.jdbc.bind[].default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)
which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.jdbc.bind[].dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The JDBC driver used to connect to the database.
# cas.authn.jdbc.bind[].driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Set the pool initialization failure timeout.
<ul>
<li>Any value greater than zero will be treated as a timeout for pool initialization.
The calling thread will be blocked from continuing until a successful connection
to the database, or until the timeout is reached.  If the timeout is reached, then
a {@code PoolInitializationException} will be thrown. </li>
<li>A value of zero will <i>not</i>  prevent the pool from starting in the
case that a connection cannot be obtained. However, upon start the pool will
attempt to obtain a connection and validate that the {@code connectionTestQuery}
and {@code connectionInitSql} are valid.  If those validations fail, an exception
will be thrown.  If a connection cannot be obtained, the validation is skipped
and the the pool will start and continue to try to obtain connections in the
background. This can mean that callers to {@code DataSource#getConnection()} may
encounter exceptions. </li>
<li>A value less than zero will <i>not</i> bypass any connection attempt and
validation during startup, and therefore the pool will start immediately.  The
pool will continue to try to obtain connections in the background. This can mean
that callers to {@code DataSource#getConnection()} may encounter exceptions. </li>
</ul>
Note that if this timeout value is greater than or equal to zero (0), and therefore an
initial connection validation is performed, this timeout does not override the
{@code connectionTimeout} or {@code validationTimeout}; they will be honored before this
timeout is applied.  The default value is one millisecond.
# cas.authn.jdbc.bind[].fail-fast-timeout: 1

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Used to specify number of rows to be fetched in a select query.
# cas.authn.jdbc.bind[].fetch-size: 100

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Allow hibernate to generate query statistics.
# cas.authn.jdbc.bind[].generate-statistics: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The SQL query to be executed to test the validity of connections.
# cas.authn.jdbc.bind[].health-query: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.jdbc.bind[].idle-timeout: PT10M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# This property determines whether data source isolates internal pool queries, such as the connection alive test,
in their own transaction.
<p>
Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction.
This property only applies if {@link #autocommit} is disabled.
# cas.authn.jdbc.bind[].isolate-internal-queries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the isolation level for transactions.
# cas.authn.jdbc.bind[].isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the amount of time that a connection can be out of the pool before a message
is logged indicating a possible connection leak.
# cas.authn.jdbc.bind[].leak-threshold: 3_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Name of the authentication handler.
# cas.authn.jdbc.bind[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Order of the authentication handler in the chain.
# cas.authn.jdbc.bind[].order: MAX_VALUE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection password.
# cas.authn.jdbc.bind[].password: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.jdbc.bind[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.jdbc.bind[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.jdbc.bind[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.jdbc.bind[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.jdbc.bind[].password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.jdbc.bind[].physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.authn.jdbc.bind[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.jdbc.bind[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.authn.jdbc.bind[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.jdbc.bind[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.authn.jdbc.bind[].pool.timeout-millis: 1_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.jdbc.bind[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.jdbc.bind[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jdbc.bind[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.jdbc.bind[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.jdbc.bind[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.jdbc.bind[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the propagation behavior for transactions.
# cas.authn.jdbc.bind[].propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.jdbc.bind[].properties: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.jdbc.bind[].state: ACTIVE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection URL.
# cas.authn.jdbc.bind[].url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.BaseJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database user.
<p>
The database user must have sufficient permissions to be able to handle
schema changes and updates, when needed.
# cas.authn.jdbc.bind[].user: sa

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Settings related to query-encode-mode jdbc authentication. A JDBC querying handler that will pull back the password and the private salt value for a user and validate the encoded password using the public salt value. Assumes everything is inside the same database table. Supports settings for number of iterations as well as private salt. This password encoding method combines the private Salt and the public salt which it prepends to the password before hashing. If multiple iterations are used, the byte code hash of the first iteration is rehashed without the salt values. The final hash is converted to hex before comparing it to the database value.
# cas.authn.jdbc.encode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Algorithm used for hashing.
# cas.authn.jdbc.encode[].algorithm-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The default auto-commit behavior of connections in the pool.
Determined whether queries such as update/insert should be immediately executed
without waiting for an underlying transaction.
# cas.authn.jdbc.encode[].autocommit: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.jdbc.encode[].batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.jdbc.encode[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Attempts to do a JNDI data source look up for the data source name specified.
Will attempt to locate the data source object as is.
# cas.authn.jdbc.encode[].data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Hibernate feature to automatically validate and exports DDL to the schema.
By default, creates and drops the schema automatically when a session is starts and ends.
Setting the value to {@code validate} or {@code none} may be more desirable for production,
but any of the following options can be used:
<ul>
    <li>{@code validate}: Validate the schema, but make no changes to the database.</li>
    <li>{@code update}: Update the schema.</li>
    <li>{@code create}: Create the schema, destroying previous data.</li>
    <li>{@code create-drop}: Drop the schema at the end of the session.</li>
    <li>{@code none}: Do nothing.</li>
</ul>
<p>
Note that during a version migration where any schema has changed {@code create-drop} will result
in the loss of all data as soon as CAS is started. For transient data like tickets this is probably
not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe
for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings
are likely the only safe options for production use.
</p>
For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.jdbc.encode[].ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.jdbc.encode[].default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.jdbc.encode[].default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)
which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.jdbc.encode[].dialect: org.hibernate.dialect.HSQLDialect

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Column name that indicates whether account is disabled.
# cas.authn.jdbc.encode[].disabled-field-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The JDBC driver used to connect to the database.
# cas.authn.jdbc.encode[].driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Column name that indicates whether account is expired.
# cas.authn.jdbc.encode[].expired-field-name: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Set the pool initialization failure timeout.
<ul>
<li>Any value greater than zero will be treated as a timeout for pool initialization.
The calling thread will be blocked from continuing until a successful connection
to the database, or until the timeout is reached.  If the timeout is reached, then
a {@code PoolInitializationException} will be thrown. </li>
<li>A value of zero will <i>not</i>  prevent the pool from starting in the
case that a connection cannot be obtained. However, upon start the pool will
attempt to obtain a connection and validate that the {@code connectionTestQuery}
and {@code connectionInitSql} are valid.  If those validations fail, an exception
will be thrown.  If a connection cannot be obtained, the validation is skipped
and the the pool will start and continue to try to obtain connections in the
background. This can mean that callers to {@code DataSource#getConnection()} may
encounter exceptions. </li>
<li>A value less than zero will <i>not</i> bypass any connection attempt and
validation during startup, and therefore the pool will start immediately.  The
pool will continue to try to obtain connections in the background. This can mean
that callers to {@code DataSource#getConnection()} may encounter exceptions. </li>
</ul>
Note that if this timeout value is greater than or equal to zero (0), and therefore an
initial connection validation is performed, this timeout does not override the
{@code connectionTimeout} or {@code validationTimeout}; they will be honored before this
timeout is applied.  The default value is one millisecond.
# cas.authn.jdbc.encode[].fail-fast-timeout: 1

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Used to specify number of rows to be fetched in a select query.
# cas.authn.jdbc.encode[].fetch-size: 100

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Allow hibernate to generate query statistics.
# cas.authn.jdbc.encode[].generate-statistics: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The SQL query to be executed to test the validity of connections.
# cas.authn.jdbc.encode[].health-query: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.jdbc.encode[].idle-timeout: PT10M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# This property determines whether data source isolates internal pool queries, such as the connection alive test,
in their own transaction.
<p>
Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction.
This property only applies if {@link #autocommit} is disabled.
# cas.authn.jdbc.encode[].isolate-internal-queries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the isolation level for transactions.
# cas.authn.jdbc.encode[].isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the amount of time that a connection can be out of the pool before a message
is logged indicating a possible connection leak.
# cas.authn.jdbc.encode[].leak-threshold: 3_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Name of the authentication handler.
# cas.authn.jdbc.encode[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Default number of iterations for hashing.
# cas.authn.jdbc.encode[].number-of-iterations: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Field/column name that indicates the number of iterations used for password hashing.
# cas.authn.jdbc.encode[].number-of-iterations-field-name: numIterations

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Order of the authentication handler in the chain.
# cas.authn.jdbc.encode[].order: MAX_VALUE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection password.
# cas.authn.jdbc.encode[].password: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.jdbc.encode[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.jdbc.encode[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.jdbc.encode[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.jdbc.encode[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.jdbc.encode[].password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Password column name.
# cas.authn.jdbc.encode[].password-field-name: password

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.jdbc.encode[].physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.authn.jdbc.encode[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.jdbc.encode[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.authn.jdbc.encode[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.jdbc.encode[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.authn.jdbc.encode[].pool.timeout-millis: 1_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.jdbc.encode[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.jdbc.encode[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jdbc.encode[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.jdbc.encode[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.jdbc.encode[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.jdbc.encode[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the propagation behavior for transactions.
# cas.authn.jdbc.encode[].propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.jdbc.encode[].properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Field/column name that indicates the salt used for password hashing.
# cas.authn.jdbc.encode[].salt-field-name: salt

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# SQL query to execute and look up accounts.
Example: {@code SELECT * FROM table WHERE username=?}.
# cas.authn.jdbc.encode[].sql: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.jdbc.encode[].state: ACTIVE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Static salt to be used for hashing.
# cas.authn.jdbc.encode[].static-salt: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection URL.
# cas.authn.jdbc.encode[].url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryEncodeJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database user.
<p>
The database user must have sufficient permissions to be able to handle
schema changes and updates, when needed.
# cas.authn.jdbc.encode[].user: sa

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Settings related to query-mode jdbc authentication. Authenticates a user by comparing the user password (which can be encoded with a password encoder) against the password on record determined by a configurable database query.
# cas.authn.jdbc.query: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The default auto-commit behavior of connections in the pool.
Determined whether queries such as update/insert should be immediately executed
without waiting for an underlying transaction.
# cas.authn.jdbc.query[].autocommit: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.jdbc.query[].batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.jdbc.query[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Attempts to do a JNDI data source look up for the data source name specified.
Will attempt to locate the data source object as is.
# cas.authn.jdbc.query[].data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Hibernate feature to automatically validate and exports DDL to the schema.
By default, creates and drops the schema automatically when a session is starts and ends.
Setting the value to {@code validate} or {@code none} may be more desirable for production,
but any of the following options can be used:
<ul>
    <li>{@code validate}: Validate the schema, but make no changes to the database.</li>
    <li>{@code update}: Update the schema.</li>
    <li>{@code create}: Create the schema, destroying previous data.</li>
    <li>{@code create-drop}: Drop the schema at the end of the session.</li>
    <li>{@code none}: Do nothing.</li>
</ul>
<p>
Note that during a version migration where any schema has changed {@code create-drop} will result
in the loss of all data as soon as CAS is started. For transient data like tickets this is probably
not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe
for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings
are likely the only safe options for production use.
</p>
For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.jdbc.query[].ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.jdbc.query[].default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.jdbc.query[].default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)
which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.jdbc.query[].dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The JDBC driver used to connect to the database.
# cas.authn.jdbc.query[].driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Set the pool initialization failure timeout.
<ul>
<li>Any value greater than zero will be treated as a timeout for pool initialization.
The calling thread will be blocked from continuing until a successful connection
to the database, or until the timeout is reached.  If the timeout is reached, then
a {@code PoolInitializationException} will be thrown. </li>
<li>A value of zero will <i>not</i>  prevent the pool from starting in the
case that a connection cannot be obtained. However, upon start the pool will
attempt to obtain a connection and validate that the {@code connectionTestQuery}
and {@code connectionInitSql} are valid.  If those validations fail, an exception
will be thrown.  If a connection cannot be obtained, the validation is skipped
and the the pool will start and continue to try to obtain connections in the
background. This can mean that callers to {@code DataSource#getConnection()} may
encounter exceptions. </li>
<li>A value less than zero will <i>not</i> bypass any connection attempt and
validation during startup, and therefore the pool will start immediately.  The
pool will continue to try to obtain connections in the background. This can mean
that callers to {@code DataSource#getConnection()} may encounter exceptions. </li>
</ul>
Note that if this timeout value is greater than or equal to zero (0), and therefore an
initial connection validation is performed, this timeout does not override the
{@code connectionTimeout} or {@code validationTimeout}; they will be honored before this
timeout is applied.  The default value is one millisecond.
# cas.authn.jdbc.query[].fail-fast-timeout: 1

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Used to specify number of rows to be fetched in a select query.
# cas.authn.jdbc.query[].fetch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Boolean field that should indicate whether the account is disabled.
# cas.authn.jdbc.query[].field-disabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Boolean field that should indicate whether the account is expired.
# cas.authn.jdbc.query[].field-expired: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Password field/column name to retrieve.
# cas.authn.jdbc.query[].field-password: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Allow hibernate to generate query statistics.
# cas.authn.jdbc.query[].generate-statistics: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The SQL query to be executed to test the validity of connections.
# cas.authn.jdbc.query[].health-query: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.jdbc.query[].idle-timeout: PT10M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# This property determines whether data source isolates internal pool queries, such as the connection alive test,
in their own transaction.
<p>
Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction.
This property only applies if {@link #autocommit} is disabled.
# cas.authn.jdbc.query[].isolate-internal-queries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the isolation level for transactions.
# cas.authn.jdbc.query[].isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the amount of time that a connection can be out of the pool before a message
is logged indicating a possible connection leak.
# cas.authn.jdbc.query[].leak-threshold: 3_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Name of the authentication handler.
# cas.authn.jdbc.query[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Order of the authentication handler in the chain.
# cas.authn.jdbc.query[].order: MAX_VALUE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection password.
# cas.authn.jdbc.query[].password: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.jdbc.query[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.jdbc.query[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.jdbc.query[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.jdbc.query[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.jdbc.query[].password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.jdbc.query[].physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.authn.jdbc.query[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.jdbc.query[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.authn.jdbc.query[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.jdbc.query[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.authn.jdbc.query[].pool.timeout-millis: 1_000

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# List of column names to fetch as user attributes.
# cas.authn.jdbc.query[].principal-attribute-list: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.jdbc.query[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.jdbc.query[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jdbc.query[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.jdbc.query[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.jdbc.query[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.jdbc.query[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the propagation behavior for transactions.
# cas.authn.jdbc.query[].propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.jdbc.query[].properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# SQL query to execute. Example: {@code SELECT * FROM table WHERE name=?}.
# cas.authn.jdbc.query[].sql: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.jdbc.query[].state: ACTIVE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection URL.
# cas.authn.jdbc.query[].url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database user.
<p>
The database user must have sufficient permissions to be able to handle
schema changes and updates, when needed.
# cas.authn.jdbc.query[].user: sa

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Settings related to search-mode jdbc authentication. Searches for a user record by querying against a username and password; the user is authenticated if at least one result is found.
# cas.authn.jdbc.search: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The default auto-commit behavior of connections in the pool.
Determined whether queries such as update/insert should be immediately executed
without waiting for an underlying transaction.
# cas.authn.jdbc.search[].autocommit: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.jdbc.search[].batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.jdbc.search[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Attempts to do a JNDI data source look up for the data source name specified.
Will attempt to locate the data source object as is.
# cas.authn.jdbc.search[].data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Hibernate feature to automatically validate and exports DDL to the schema.
By default, creates and drops the schema automatically when a session is starts and ends.
Setting the value to {@code validate} or {@code none} may be more desirable for production,
but any of the following options can be used:
<ul>
    <li>{@code validate}: Validate the schema, but make no changes to the database.</li>
    <li>{@code update}: Update the schema.</li>
    <li>{@code create}: Create the schema, destroying previous data.</li>
    <li>{@code create-drop}: Drop the schema at the end of the session.</li>
    <li>{@code none}: Do nothing.</li>
</ul>
<p>
Note that during a version migration where any schema has changed {@code create-drop} will result
in the loss of all data as soon as CAS is started. For transient data like tickets this is probably
not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe
for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings
are likely the only safe options for production use.
</p>
For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.jdbc.search[].ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.jdbc.search[].default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.jdbc.search[].default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)
which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.jdbc.search[].dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The JDBC driver used to connect to the database.
# cas.authn.jdbc.search[].driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Set the pool initialization failure timeout.
<ul>
<li>Any value greater than zero will be treated as a timeout for pool initialization.
The calling thread will be blocked from continuing until a successful connection
to the database, or until the timeout is reached.  If the timeout is reached, then
a {@code PoolInitializationException} will be thrown. </li>
<li>A value of zero will <i>not</i>  prevent the pool from starting in the
case that a connection cannot be obtained. However, upon start the pool will
attempt to obtain a connection and validate that the {@code connectionTestQuery}
and {@code connectionInitSql} are valid.  If those validations fail, an exception
will be thrown.  If a connection cannot be obtained, the validation is skipped
and the the pool will start and continue to try to obtain connections in the
background. This can mean that callers to {@code DataSource#getConnection()} may
encounter exceptions. </li>
<li>A value less than zero will <i>not</i> bypass any connection attempt and
validation during startup, and therefore the pool will start immediately.  The
pool will continue to try to obtain connections in the background. This can mean
that callers to {@code DataSource#getConnection()} may encounter exceptions. </li>
</ul>
Note that if this timeout value is greater than or equal to zero (0), and therefore an
initial connection validation is performed, this timeout does not override the
{@code connectionTimeout} or {@code validationTimeout}; they will be honored before this
timeout is applied.  The default value is one millisecond.
# cas.authn.jdbc.search[].fail-fast-timeout: 1

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Used to specify number of rows to be fetched in a select query.
# cas.authn.jdbc.search[].fetch-size: 100

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Password column name.
# cas.authn.jdbc.search[].field-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Username column name.
# cas.authn.jdbc.search[].field-user: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Allow hibernate to generate query statistics.
# cas.authn.jdbc.search[].generate-statistics: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The SQL query to be executed to test the validity of connections.
# cas.authn.jdbc.search[].health-query: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.jdbc.search[].idle-timeout: PT10M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# This property determines whether data source isolates internal pool queries, such as the connection alive test,
in their own transaction.
<p>
Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction.
This property only applies if {@link #autocommit} is disabled.
# cas.authn.jdbc.search[].isolate-internal-queries: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the isolation level for transactions.
# cas.authn.jdbc.search[].isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Controls the amount of time that a connection can be out of the pool before a message
is logged indicating a possible connection leak.
# cas.authn.jdbc.search[].leak-threshold: 3_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Name of the authentication handler.
# cas.authn.jdbc.search[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Order of the authentication handler in the chain.
# cas.authn.jdbc.search[].order: MAX_VALUE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection password.
# cas.authn.jdbc.search[].password: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.jdbc.search[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.jdbc.search[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.jdbc.search[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.jdbc.search[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.jdbc.search[].password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.jdbc.search[].physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.authn.jdbc.search[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.jdbc.search[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.authn.jdbc.search[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.jdbc.search[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.authn.jdbc.search[].pool.timeout-millis: 1_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.jdbc.search[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.jdbc.search[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.jdbc.search[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.jdbc.search[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.jdbc.search[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.jdbc.search[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Defines the propagation behavior for transactions.
# cas.authn.jdbc.search[].propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.jdbc.search[].properties: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.jdbc.search[].state: ACTIVE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# Table name where accounts are held.
# cas.authn.jdbc.search[].table-users: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database connection URL.
# cas.authn.jdbc.search[].url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jdbc.authn.SearchJdbcAuthenticationProperties
# Module: cas-server-support-jdbc-authentication
# The database user.
<p>
The database user must have sufficient permissions to be able to handle
schema changes and updates, when needed.
# cas.authn.jdbc.search[].user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.generic.JsonResourceAuthenticationProperties
# Module: cas-server-support-generic
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.json.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.JsonResourceAuthenticationProperties
# Module: cas-server-support-generic
# Authentication handler name used to verify credentials in the file.
# cas.authn.json.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.json.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.json.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.json.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.json.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.json.password-encoder.type: NONE

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates whether account state handling should be enabled to process warnings or errors reported back from the authentication response, produced by the source.
# cas.authn.json.password-policy.account-state-handling-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Indicates if warning should be displayed, when the ldap attribute value matches the {@link #warningAttributeValue}.
# cas.authn.json.password-policy.display-warning-on-match: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Whether password policy should be enabled.
# cas.authn.json.password-policy.enabled: true

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPasswordPolicyProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.json.password-policy.groovy.location: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# When dealing with FreeIPA, indicates the number of allows login failures.
# cas.authn.json.password-policy.login-failures: 5

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.Class<? extends javax.security.auth.login.LoginException>>
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Key-value structure (Map) that indicates a list of boolean attributes as keys. If either attribute value is true, indicating an account state is flagged, the corresponding error can be thrown. Example {@code accountLocked=javax.security.auth.login.AccountLockedException}
# cas.authn.json.password-policy.policy-attributes: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties$PasswordPolicyHandlingOptions
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Decide how authentication should handle password policy changes.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option to handle policy changes.</li><li>{@code GROOVY}: Handle account password policies via Groovy.</li><li>{@code REJECT_RESULT_CODE}: Strategy to only activate password policy
if the authentication response code is not blocked.</li></ul>
# cas.authn.json.password-policy.strategy: 30

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Always display the password expiration warning regardless.
# cas.authn.json.password-policy.warn-all: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings in case the entry carries this attribute.
# cas.authn.json.password-policy.warning-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# Used by an account state handling policy that only calculates account warnings in case the entry carries an attribute {@link #warningAttributeName} whose value matches this field.
# cas.authn.json.password-policy.warning-attribute-value: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties
# Module: cas-server-core-authentication
# This is used to calculate a warning period to see if account expiry is within the calculated window.
# cas.authn.json.password-policy.warning-days: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.json.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.json.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.json.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.json.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.json.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.json.principal-transformation.suffix: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.generic.JsonResourceAuthenticationProperties
# Module: cas-server-support-generic
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.json.state: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties
# Module: cas-server-core-authentication
# Collection of settings related to LDAP authentication. These settings are required to be indexed (i.e. ldap[0].xyz).
# cas.authn.ldap: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# List of additional attributes to retrieve, if any.
# cas.authn.ldap[].additional-attributes: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Flag to indicate whether CAS should block authentication
if a specific/configured principal id attribute is not found.
# cas.authn.ldap[].allow-missing-principal-attribute-value: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.authn.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Set if multiple Entries are allowed.
# cas.authn.ldap[].allow-multiple-entries: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Sets a flag that determines whether multiple values are allowed for the {@link #principalAttributeId}.
This flag only has an effect if {@link #principalAttributeId} is configured. If multiple values are detected
when the flag is false, the first value is used and a warning is logged. If multiple values are detected
when the flag is true, an exception is raised.
# cas.authn.ldap[].allow-multiple-principal-attribute-values: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Base DN to use.
There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating
the LDAP configuration block for each individual base-dn, each entry can be specified
and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN
resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned.
Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.ldap[].base-dn: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.authn.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.authn.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.authn.ldap[].block-wait-time: PT3S

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# When entry DN should be called as an attribute and stored into the principal.
# cas.authn.ldap[].collect-dn-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.authn.ldap[].connection-strategy: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential
and as such lend themselves to be tried and tested during the authentication handler selection phase.
The credential criteria may be one of the following options:<ul>
<li>1) A regular expression pattern that is tested against the credential identifier.</li>
<li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li>
<li>3) Path to an external Groovy script that implements the same interface.</li>
</ul>
# cas.authn.ldap[].credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Define how aliases are de-referenced.
Accepted values are:
<ul>
<li>{@code NEVER}</li>
<li>{@code SEARCHING}: dereference when searching the entries beneath the starting point but not when searching for the starting entry.</li>
<li>{@code FINDING}: dereference when searching for the starting entry but not when searching the entries beneath the starting point.</li>
<li>{@code ALWAYS}: dereference when searching for the starting entry and when searching the entries beneath the starting point.</li>
</ul>
# cas.authn.ldap[].deref-aliases: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.ldap[].disable-pooling: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Specify the dn format accepted by the AD authenticator, etc.
Example format might be {@code uid=%s,ou=people,dc=example,dc=org}.
# cas.authn.ldap[].dn-format: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether specific search entry resolvers need to be set
on the authenticator, or the default should be used.
# cas.authn.ldap[].enhance-with-entry-resolver: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.authn.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Set if search referrals should be followed.
# cas.authn.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.authn.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.authn.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Keystore password.
# cas.authn.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.ldap[].max-pool-size: 10

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.authn.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Name of the LDAP handler.
# cas.authn.ldap[].name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Order of the authentication handler in the chain.
# cas.authn.ldap[].order: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Request that the server return results in batches of a
specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often
used to work around server result size limits.
A negative/zero value disables paged requests.
# cas.authn.ldap[].page-size: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'.
Relevant when the type used is {@code DEFAULT}.
# cas.authn.ldap[].password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}.
Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.ldap[].password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders.
Secret usually is an optional setting.
# cas.authn.ldap[].password-encoder.secret: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing.
Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders.
Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.ldap[].password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use.
Type may be specified as blank or {@code NONE} to disable password encoding.
It may also refer to a fully-qualified class name that implements
the Spring Security's {@code PasswordEncoder} interface
if you wish you define your own encoder.

The following types may be used:
<ul>
    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>
    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest
    algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>
    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>
    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>
    <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>
    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values
    are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>
    <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the
    {@code encoding-algorithm}, strength provided and an optional secret.</li>
    <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>
    <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li>
</ul>
# cas.authn.ldap[].password-encoder.type: NONE

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Indicates whether account state handling should be enabled to process
warnings or errors reported back from the authentication response, produced by the source.
# cas.authn.ldap[].password-policy.account-state-handling-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# An implementation of a policy class that knows how to handle LDAP responses.
The class must be an implementation of {@code org.ldaptive.auth.AuthenticationResponseHandler}.
# cas.authn.ldap[].password-policy.custom-policy-class: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Indicates if warning should be displayed, when the ldap attribute value
matches the {@link #warningAttributeValue}.
# cas.authn.ldap[].password-policy.display-warning-on-match: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Whether password policy should be enabled.
# cas.authn.ldap[].password-policy.enabled: true

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.ldap[].password-policy.groovy.location: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# When dealing with FreeIPA, indicates the number of allows login failures.
# cas.authn.ldap[].password-policy.login-failures: 5

# Required: false
# Type: java.util.Map<String,Class<? extends LoginException>>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Key-value structure (Map) that indicates a list of boolean attributes as keys.
If either attribute value is true, indicating an account state is flagged,
the corresponding error can be thrown.
Example {@code accountLocked=javax.security.auth.login.AccountLockedException}
# cas.authn.ldap[].password-policy.policy-attributes: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties.PasswordPolicyHandlingOptions
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Decide how authentication should handle password policy changes.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option to handle policy changes.</li><li>{@code GROOVY}: Handle account password policies via Groovy.</li><li>{@code REJECT_RESULT_CODE}: Strategy to only activate password policy
if the authentication response code is not blocked.</li></ul>
# cas.authn.ldap[].password-policy.strategy: DEFAULT

# Required: false
# Type: AbstractLdapProperties.LdapType
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# LDAP type.
# cas.authn.ldap[].password-policy.type: GENERIC

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Always display the password expiration warning regardless.
# cas.authn.ldap[].password-policy.warn-all: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Used by an account state handling policy that only calculates account warnings
in case the entry carries this attribute.
# cas.authn.ldap[].password-policy.warning-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# Used by an account state handling policy that only calculates account warnings
in case the entry carries an attribute {@link #warningAttributeName}
whose value matches this field.
# cas.authn.ldap[].password-policy.warning-attribute-value: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapPasswordPolicyProperties
# Module: cas-server-support-ldap
# This is used to calculate
a warning period to see if account expiry is within the calculated window.
# cas.authn.ldap[].password-policy.warning-days: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.authn.ldap[].pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.ldap[].principal-attribute-id: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# List of attributes to retrieve from LDAP.
Attributes can be virtually remapped to multiple names.
Example {@code cn:commonName,givenName,eduPersonTargettedId:SOME_IDENTIFIER}.

To fetch and resolve attributes that carry tags/options,
consider tagging the mapped attribute as such: {@code homePostalAddress:homePostalAddress;}.
# cas.authn.ldap[].principal-attribute-list: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# If principalAttributePassword is empty then a user simple bind is done to validate credentials
otherwise the given attribute is compared with the given principalAttributePassword
using the SHA encrypted value of it.
<p>
For the anonymous authentication type,
if principalAttributePassword is empty then a user simple bind is done to validate credentials
otherwise the given attribute is compared with the given principalAttributePassword
using the SHA encrypted value of it.
</p>
# cas.authn.ldap[].principal-attribute-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Name of attribute to be used for principal's DN.
# cas.authn.ldap[].principal-dn-attribute-name: principalLdapDn

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username
to match for blocking/forbidden values.
If a match is found, an exception will be thrown
and principal transformation will fail.
# cas.authn.ldap[].principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties.CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed
into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.ldap[].principal-transformation.case-conversion: NONE

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.ldap[].principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username
for username extractions. On a successful match, the first matched group
in the pattern will be used as the extracted username.
# cas.authn.ldap[].principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.ldap[].principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.ldap[].principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.authn.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Duration of time to wait for responses.
# cas.authn.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# SASL authorization id.
# cas.authn.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The SASL mechanism.
# cas.authn.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# SASL mutual auth is enabled?
# cas.authn.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# SASL quality of protected.
# cas.authn.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The SASL realm.
# cas.authn.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# SASL security strength.
# cas.authn.ldap[].sasl-security-strength: 

# Required: false
# Type: java.util.List<LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Search handlers.
# cas.authn.ldap[].search-entry-handlers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# User filter to use for searching.
Syntax is {@code cn={user}} or {@code cn={0}}.

You may also provide an external groovy script
in the syntax of {@code file:/path/to/GroovyScript.groovy}
to fully build the final filter template dynamically.
# cas.authn.ldap[].search-filter: 

# Required: false
# Type: AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Define the scope and state of this authentication handler
and the lifecycle in which it can be invoked or activated.
# cas.authn.ldap[].state: ACTIVE

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether subtree searching is allowed.
# cas.authn.ldap[].subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.authn.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.authn.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.authn.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Password needed to open the truststore.
# cas.authn.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.ldap[].trust-store-type: 

# Required: true
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties.AuthenticationTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# The authentication type.
<ul>
<li>{@code AD} - Users authenticate with {@code sAMAccountName}. </li>

<li>{@code AUTHENTICATED} - Manager bind/search type of authentication.
If {@code} principalAttributePassword}
is empty then a user simple bind is done to validate credentials. Otherwise the given
attribute is compared with the given {@code principalAttributePassword} using
the {@code SHA} encrypted value of it.</li>

<li>{@code ANONYMOUS}: Similar semantics as {@code AUTHENTICATED} except no {@code bindDn}
and {@code bindCredential} may be specified to initialize the connection.
If {@code principalAttributePassword} is empty then a user simple bind is done
to validate credentials. Otherwise the given attribute is compared with
the given {@code principalAttributePassword} using the {@code SHA} encrypted value of it.</li>

<li>DIRECT: Direct Bind - Compute user DN from format string and perform simple bind.
This is relevant when no search is required to compute the DN needed for a bind operation.
Use cases for this type are:
1) All users are under a single branch in the directory, {@code e.g. ou=Users,dc=example,dc=org.}
2) The username provided on the CAS login form is part of the DN, e.g.
{@code uid=%s,ou=Users,dc=example,dc=org}.</li>

</ul>
Available values are as follows:
<ul><li>{@code AD}: Active Directory.</li><li>{@code AUTHENTICATED}: Authenticated Search.</li><li>{@code DIRECT}: Direct Bind.</li><li>{@code ANONYMOUS}: Anonymous Search.</li></ul>
# cas.authn.ldap[].type: AUTHENTICATED

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.ldap[].use-start-tls: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Period at which pool should be validated.
# cas.authn.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties
# Module: cas-server-support-ldap
# Period at which validation operations may time out.
# cas.authn.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.authn.ldap[].validator.type: search

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Base URL for API calls to authenticate, fetch channels or verify responses.
# cas.authn.mfa.acceptto.api-url: https://mfa.acceptto.com/api/v9/

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Identifier of the application. When an organization creates an application in eGuardian dashboard this id gets generated.
# cas.authn.mfa.acceptto.application-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# URL of the Acceptto instance for authn discovery. This page allows the user to choose their second-factor authentication method. Based on the policies defined by relying party user has the option of using Push Notification, Text Message, Voice Call, TOTP for replying to the authentication request. As soon as users select Accept or Decline with the push, or verifies with a one-time passcode, they will get redirected back to callback url that was passed by the relying party.
# cas.authn.mfa.acceptto.authn-selection-url: https://mfa.acceptto.com/mfa/index

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.acceptto.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.acceptto.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.acceptto.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.acceptto.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.acceptto.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.acceptto.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.acceptto.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.acceptto.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.acceptto.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.acceptto.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.acceptto.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.acceptto.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.acceptto.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.acceptto.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.acceptto.bypass.rest.url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# The user attribute that collects the user's email address which the relying party wants to authenticate.
# cas.authn.mfa.acceptto.email-attribute: mail

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.acceptto.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# List of active directory group GUIDs that user is a member of. This is used for Group based policies. If undefined, will ignore passing the groups to Acceptto.
# cas.authn.mfa.acceptto.group-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.acceptto.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Message to deliver to the user. This message gets delivered to the user device via push notification. e.g "Would you like to sign in?".
# cas.authn.mfa.acceptto.message: Would you like to sign into CAS?

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.acceptto.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# The order of the authentication handler in the chain.
# cas.authn.mfa.acceptto.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Organization identifier.
# cas.authn.mfa.acceptto.organization-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Organization secret.
# cas.authn.mfa.acceptto.organization-secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Whether QR Code login should be enabled.
# cas.authn.mfa.acceptto.qr-login-enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.acceptto.rank: 0

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.acceptto.registration-api-public-key.location: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# URL to the enrollment/registration API.
# cas.authn.mfa.acceptto.registration-api-url: https://mfa.acceptto.com/api/integration/v1/mfa/authenticate

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Secret of the application. When an organization creates an application in eGuardian dashboard this secret gets generated.
# cas.authn.mfa.acceptto.secret: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.AccepttoMultifactorAuthenticationProperties
# Module: cas-server-support-acceptto-mfa
# Timeout value for the authentication request is in seconds. If the user does not respond in the specified time period, an authentication request expires. The max value is 600 seconds. Setting the value any higher will cause it to revert back to 600 seconds.
# cas.authn.mfa.acceptto.timeout: 120

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Authy API key.
# cas.authn.mfa.authy.api-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Authy API url.
# cas.authn.mfa.authy.api-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.authy.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.authy.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.authy.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.authy.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.authy.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.authy.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.authy.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.authy.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.authy.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.authy.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.authy.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.authy.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.authy.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.authy.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.authy.bypass.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Phone number country code used to look up and/or create the Authy user account.
# cas.authn.mfa.authy.country-code: 1

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.authy.failure-mode: CLOSED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Flag authentication requests to authy to force verification of credentials.
# cas.authn.mfa.authy.force-verification: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.authy.id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Principal attribute used to look up an email address for credential verification. The attribute value is then used to look up the user record in Authy, or create the user.
# cas.authn.mfa.authy.mail-attribute: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.authy.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# The order of the authentication handler in the chain.
# cas.authn.mfa.authy.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Principal attribute used to look up a phone number for credential verification. The attribute value is then used to look up the user record in Authy, or create the user.
# cas.authn.mfa.authy.phone-attribute: phone

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.authy.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthyMultifactorAuthenticationProperties
# Module: cas-server-support-authy
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.authy.trusted-device-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationCoreProperties
# Module: cas-server-core-authentication
# Attribute returned in the final CAS validation payload that indicates the authentication context class satisfied in the event of a multifactor authentication attempt.
# cas.authn.mfa.core.authentication-context-attribute: authnContextClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationCoreProperties
# Module: cas-server-core-authentication
# Content-type that is expected to be specified by non-web clients such as curl, etc in the event that the provider supports variations of non-browser based MFA. The value is treated as a regular expression.
# cas.authn.mfa.core.content-type: application/cas

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationCoreProperties
# Module: cas-server-core-authentication
# Defines the global failure mode for the entire deployment. This is meant to be used a shortcut to define the policy globally rather than per application. Applications registered with CAS can still define a failure mode and override the global.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.core.global-failure-mode: CLOSED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationCoreProperties
# Module: cas-server-core-authentication
# In the event that multiple multifactor authentication providers are determined for a multifactor authentication transaction, this setting will allow one to interactively choose a provider out of the list of available providers. A trigger may be designed to support more than one provider, and rather than letting CAS auto-determine the selected provider via scripts or ranking strategies, this method puts the choice back onto the user to decide which provider makes the most sense at any given time.
# cas.authn.mfa.core.provider-selection-enabled: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.core.provider-selector-groovy-script.location: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# Activate and configure a multifactor authentication provider via Duo Security.
# cas.authn.mfa.duo: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# When set to {@code true}, CAS will contact Duo Security
to check for user's account status and to evaluate whether
user qualifies for multifactor authentication from Duo's perspective.
When disabled, user account status is set to authenticate with Duo
and the API call will never be made.
# cas.authn.mfa.duo[].account-status-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.duo[].bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.duo[].bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution.
Specifically, skip multifactor if the a particular authentication handler noted by its name
successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.duo[].bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution.
Specifically, skip multifactor if the authentication method attribute collected as part of
authentication metadata matches a certain value.
# cas.authn.mfa.duo[].bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials.
Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.duo[].bypass.credential-class-type: 

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.mfa.duo[].bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names.
Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.duo[].bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host
matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.duo[].bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.duo[].bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.duo[].bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.RestEndpointProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication,
specify the password for authentication.
# cas.authn.mfa.duo[].bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.RestEndpointProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication,
specify the username for authentication.
# cas.authn.mfa.duo[].bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.RestEndpointProperties
# Module: cas-server-core-util
# Headers, defined as a Map, to include in the request when making the REST call.
Will overwrite any header that CAS is pre-defined to
send and include in the request. Key in the map should be the header name
and the value in the map should be the header value.
# cas.authn.mfa.duo[].bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.RestEndpointProperties
# Module: cas-server-core-util
# HTTP method to use when contacting the rest endpoint.
Examples include {@code GET, POST}, etc.
# cas.authn.mfa.duo[].bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.RestEndpointProperties
# Module: cas-server-core-util
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.duo[].bypass.rest.url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# Duo API host and url.
# cas.authn.mfa.duo[].duo-api-host: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# The application key is a string, at least 40 characters long,
that you generate and keep secret from Duo.
This is a required setting for the WebSDK integration types.
Leaving this setting as blank will activate the Universal Prompt option.

You can generate a random string in Python with:
&lt;pre&gt;
import os, hashlib
print hashlib.sha1(os.urandom(32)).hexdigest()
&lt;/pre&gt;
# cas.authn.mfa.duo[].duo-application-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# Duo integration key.
# cas.authn.mfa.duo[].duo-integration-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# Duo secret key.
# cas.authn.mfa.duo[].duo-secret-key: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties.MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# The failure mode policy for this MFA provider. The authentication policy by default
supports fail-closed mode, which means that if you attempt to
exercise a particular provider available to CAS and the provider cannot be reached, authentication
will be stopped and an error will be displayed. You can of course change this behavior so that authentication
proceeds without exercising the provider functionality, if that provider cannot respond.
Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location
will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.duo[].failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# The identifier for the multifactor provider.
In most cases, this need not be configured explicitly, unless
multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.duo[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.duo[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# The order of the authentication handler in the chain.
# cas.authn.mfa.duo[].order: MAX_VALUE

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# At times, CAS needs to determine the correct provider when step-up authentication is required.
Consider for a moment that CAS already has established an SSO session with/without a provider and has
reached a level of authentication. Another incoming request attempts to exercise that SSO
session with a different and often competing authentication requirement that may differ from the
authentication level CAS has already established. Concretely, examples may be:
<ul>
<li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li>
<li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity,
but a separate request now requires step-up authentication with YubiKey. </li>
</ul>
In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other.
If CAS already has achieved a level that is higher than what the incoming request requires,
no step-up authentication will be performed. If the opposite is true, CAS will route the authentication
flow to the required authentication level and upon success, will adjust the SSO session with the
new higher authentication level now satisfied.
Ranking of authentication methods is done per provider via specific properties for each.
Note that the higher the rank value is, the higher on the security scale it remains.
A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.duo[].rank: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# Link to a registration app, typically developed in-house
in order to allow new users to sign-up for duo functionality.
If the user account status requires enrollment and this link
is specified, CAS will redirect the authentication flow
to this registration app. Otherwise, the default duo mechanism
for new-user registrations shall take over.
# cas.authn.mfa.duo[].registration-url: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties
# Module: cas-server-support-duo
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.duo[].trusted-device-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.gauth.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.gauth.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.gauth.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.gauth.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.gauth.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.gauth.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.gauth.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.gauth.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.gauth.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.gauth.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.gauth.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.gauth.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.gauth.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.gauth.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.gauth.bypass.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.mfa.gauth.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.mfa.gauth.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.mfa.gauth.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.mfa.gauth.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.code-digits: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.mfa.gauth.core.code-digits

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Length of the generated code.
# cas.authn.mfa.gauth.core.code-digits: 6

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Issuer used in the barcode when dealing with device registration events. Used in the registration URL to identify CAS.
# cas.authn.mfa.gauth.core.issuer: CASIssuer

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Label used in the barcode when dealing with device registration events. Used in the registration URL to identify CAS.
# cas.authn.mfa.gauth.core.label: CASLabel

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# When enabled, allows the user/system to accept multiple accounts and device registrations per user, allowing one to switch between or register new devices/accounts automatically.
# cas.authn.mfa.gauth.core.multiple-device-registration-enabled: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The expiration time of the generated code in seconds.
# cas.authn.mfa.gauth.core.time-step-size: 30

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.gauth.core.trusted-device-enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CoreGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Since TOTP passwords are time-based, it is essential that the clock of both the server and the client are synchronised within the tolerance defined here as the window size.
# cas.authn.mfa.gauth.core.window-size: 3

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Use a local cache to reduce fetches..
# cas.authn.mfa.gauth.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Remove idle connections from pool.
# cas.authn.mfa.gauth.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# TCP connection timeout.
# cas.authn.mfa.gauth.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Create the database if it doesn't exist.
# cas.authn.mfa.gauth.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Database name.
# cas.authn.mfa.gauth.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.mfa.gauth.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Max entries in local cache.
# cas.authn.mfa.gauth.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Maximum connections to CouchDB.
# cas.authn.mfa.gauth.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Largest allowable serialized object.
# cas.authn.mfa.gauth.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Password for connection.
# cas.authn.mfa.gauth.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Proxy host.
# cas.authn.mfa.gauth.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# proxy port.
# cas.authn.mfa.gauth.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.mfa.gauth.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Retries for update conflicts.
# cas.authn.mfa.gauth.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Socket idle timeout.
# cas.authn.mfa.gauth.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Connection url.
# cas.authn.mfa.gauth.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.mfa.gauth.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.CouchDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-couchdb
# Username for connection.
# cas.authn.mfa.gauth.couch-db.username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.gauth.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.gauth.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.gauth.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.gauth.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.gauth.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.gauth.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.gauth.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.gauth.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.gauth.id: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.issuer: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.mfa.gauth.core.issuer

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.mfa.gauth.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.mfa.gauth.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.mfa.gauth.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.mfa.gauth.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.mfa.gauth.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.mfa.gauth.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.mfa.gauth.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The JDBC driver used to connect to the database.
# cas.authn.mfa.gauth.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.mfa.gauth.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.mfa.gauth.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Allow hibernate to generate query statistics.
# cas.authn.mfa.gauth.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.mfa.gauth.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.mfa.gauth.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.mfa.gauth.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.gauth.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.mfa.gauth.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The database connection password.
# cas.authn.mfa.gauth.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.mfa.gauth.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.mfa.gauth.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.mfa.gauth.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.mfa.gauth.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.mfa.gauth.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.mfa.gauth.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.gauth.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.mfa.gauth.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The database connection URL.
# cas.authn.mfa.gauth.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JpaGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.mfa.gauth.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.JsonGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.gauth.json.location: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.label: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.mfa.gauth.core.label

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Name of LDAP attribute that holds GAuth account/credential as JSON.
# cas.authn.mfa.gauth.ldap.account-attribute-name: casGAuthRecord

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.mfa.gauth.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Set if multiple Entries are allowed.
# cas.authn.mfa.gauth.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.mfa.gauth.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.mfa.gauth.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.mfa.gauth.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.mfa.gauth.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.mfa.gauth.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.mfa.gauth.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.mfa.gauth.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.mfa.gauth.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.mfa.gauth.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Set if search referrals should be followed.
# cas.authn.mfa.gauth.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.mfa.gauth.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.mfa.gauth.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.mfa.gauth.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Keystore password.
# cas.authn.mfa.gauth.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.mfa.gauth.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.mfa.gauth.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.mfa.gauth.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.mfa.gauth.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Name of the LDAP handler.
# cas.authn.mfa.gauth.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.mfa.gauth.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.mfa.gauth.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.mfa.gauth.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Duration of time to wait for responses.
# cas.authn.mfa.gauth.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# SASL authorization id.
# cas.authn.mfa.gauth.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The SASL mechanism.
# cas.authn.mfa.gauth.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# SASL mutual auth is enabled?
# cas.authn.mfa.gauth.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# SASL quality of protected.
# cas.authn.mfa.gauth.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The SASL realm.
# cas.authn.mfa.gauth.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# SASL security strength.
# cas.authn.mfa.gauth.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Search handlers.
# cas.authn.mfa.gauth.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.mfa.gauth.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.mfa.gauth.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether subtree searching is allowed.
# cas.authn.mfa.gauth.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.mfa.gauth.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.mfa.gauth.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.mfa.gauth.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Password needed to open the truststore.
# cas.authn.mfa.gauth.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.mfa.gauth.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.mfa.gauth.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.mfa.gauth.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Period at which pool should be validated.
# cas.authn.mfa.gauth.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.mfa.gauth.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-ldap
# Period at which validation operations may time out.
# cas.authn.mfa.gauth.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.mfa.gauth.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.mfa.gauth.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.mfa.gauth.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.mfa.gauth.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.mfa.gauth.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.mfa.gauth.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.mfa.gauth.ldap.validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Name of the database to use for authentication.
# cas.authn.mfa.gauth.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mfa.gauth.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mfa.gauth.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database instance name.
# cas.authn.mfa.gauth.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mfa.gauth.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mfa.gauth.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database password for authentication.
# cas.authn.mfa.gauth.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.gauth.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.gauth.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mfa.gauth.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mfa.gauth.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mfa.gauth.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mfa.gauth.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database port.
# cas.authn.mfa.gauth.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mfa.gauth.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mfa.gauth.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mfa.gauth.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mfa.gauth.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mfa.gauth.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Whether connections require SSL.
# cas.authn.mfa.gauth.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database connection timeout.
# cas.authn.mfa.gauth.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Collection name where tokens are kept to prevent replay attacks.
# cas.authn.mfa.gauth.mongo.token-collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# MongoDb database user for authentication.
# cas.authn.mfa.gauth.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.MongoDbGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mfa.gauth.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.gauth.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The order of the authentication handler in the chain.
# cas.authn.mfa.gauth.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.gauth.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.mfa.gauth.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.mfa.gauth.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.mfa.gauth.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.mfa.gauth.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.mfa.gauth.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.mfa.gauth.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.mfa.gauth.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.mfa.gauth.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.mfa.gauth.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.mfa.gauth.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.mfa.gauth.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.mfa.gauth.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Connection timeout.
# cas.authn.mfa.gauth.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Database index used by the connection factory.
# cas.authn.mfa.gauth.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.mfa.gauth.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Redis server host.
# cas.authn.mfa.gauth.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Login password of the redis server.
# cas.authn.mfa.gauth.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.mfa.gauth.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.mfa.gauth.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.mfa.gauth.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.mfa.gauth.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.mfa.gauth.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.mfa.gauth.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.mfa.gauth.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.mfa.gauth.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.mfa.gauth.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.mfa.gauth.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.mfa.gauth.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.mfa.gauth.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.mfa.gauth.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.mfa.gauth.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Redis server port.
# cas.authn.mfa.gauth.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.mfa.gauth.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.mfa.gauth.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.mfa.gauth.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Command timeout.
# cas.authn.mfa.gauth.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RedisGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth-redis
# Whether or not to use SSL for connection factory.
# cas.authn.mfa.gauth.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RestfulGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.gauth.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RestfulGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.gauth.rest.basic-auth-username: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.rest.endpoint-url: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed to be consistent with other RESt-based configuration.
# Deprecation Replacement: cas.authn.mfa.gauth.rest.url

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RestfulGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.gauth.rest.headers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RestfulGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# Endpoint url of the REST resource used for tokens that are kept to prevent replay attacks.
# cas.authn.mfa.gauth.rest.token-url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.gauth.RestfulGoogleAuthenticatorMultifactorProperties
# Module: cas-server-support-gauth
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.gauth.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.time-step-size: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.mfa.gauth.core.time-step-size

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.gauth.trusted-device-enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.mfa.gauth.core.trusted-device-enabled

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.global-authentication-attribute-name-triggers: 
# Deprecation Level: ERROR
# Deprecation Reason: global-authentication-attribute-name-triggers setting is now moved into the cas.authn.mfa.triggers.authentication namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.authentication.global-authentication-attribute-name-triggers

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.global-authentication-attribute-value-regex: 
# Deprecation Level: ERROR
# Deprecation Reason: global-authentication-attribute-value-regex setting is now moved into the cas.authn.mfa.triggers.authentication namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.authentication.global-authentication-attribute-value-regex

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.global-principal-attribute-name-triggers: 
# Deprecation Level: ERROR
# Deprecation Reason: global-principal-attribute-name-triggers setting is now moved into the cas.authn.mfa.triggers.principal namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.principal.global-principal-attribute-name-triggers

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.global-principal-attribute-value-regex: 
# Deprecation Level: ERROR
# Deprecation Reason: global-principal-attribute-value-regex setting is now moved into the cas.authn.mfa.triggers.principal namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.principal.global-principal-attribute-value-regex

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.global-provider-id: 
# Deprecation Level: ERROR
# Deprecation Reason: global-provider-id setting is now moved into the cas.authn.mfa.triggers.global namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.global.global-provider-id

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.groovy-script.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.inwebo.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.inwebo.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.inwebo.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.inwebo.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.inwebo.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.inwebo.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.inwebo.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.inwebo.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.inwebo.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.inwebo.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.inwebo.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.inwebo.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.inwebo.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.inwebo.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.inwebo.bypass.rest.url: 

# Required: true
# Type: org.apereo.cas.configuration.model.core.util.ClientCertificateProperties
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The client certificate.
# cas.authn.mfa.inwebo.client-certificate: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# Console admin API url.
# cas.authn.mfa.inwebo.console-admin-url: https://api.myinwebo.com/v2/services/ConsoleAdmin

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.inwebo.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.inwebo.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.inwebo.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The order of the authentication handler in the chain.
# cas.authn.mfa.inwebo.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.inwebo.rank: 0

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The service API url.
# cas.authn.mfa.inwebo.service-api-url: https://api.myinwebo.com/FS?

# Required: true
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The Inwebo service id.
# cas.authn.mfa.inwebo.service-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The alias of the secured site.
# cas.authn.mfa.inwebo.site-alias: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# The description of the secured site.
# cas.authn.mfa.inwebo.site-description: my secured site

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.InweboMultifactorAuthenticationProperties
# Module: cas-server-support-inwebo-mfa
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.inwebo.trusted-device-enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.mfa.provider-selection-enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: provider-selection-enabled setting is now moved into the cas.authn.mfa.core namespace.
# Deprecation Replacement: cas.authn.mfa.core.provider-selection-enabled

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# Total number of allowed authentication attempts with the radius mfa server before the authentication event is considered cancelled. A negative/zero value indicates that no limit is enforced.
# cas.authn.mfa.radius.allowed-authentication-attempts: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.radius.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.radius.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.radius.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.radius.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.radius.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.radius.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.radius.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.radius.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.radius.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.radius.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.radius.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.radius.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.radius.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.radius.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.radius.bypass.rest.url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# The accounting port.
# cas.authn.mfa.radius.client.accounting-port: 1813

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# The authentication port.
# cas.authn.mfa.radius.client.authentication-port: 1812

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Server address to connect and establish a session.
# cas.authn.mfa.radius.client.inet-address: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Secret/password to use for the initial bind.
# cas.authn.mfa.radius.client.shared-secret: N0Sh@ar3d$ecReT

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Socket connection timeout in milliseconds.
# cas.authn.mfa.radius.client.socket-timeout: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# In the event that radius authentication fails, fail over to the next server in the list.
# cas.authn.mfa.radius.failover-on-authentication-failure: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# In the event that radius authentication fails due to a catastrophic event, fail over to the next server in the list.
# cas.authn.mfa.radius.failover-on-exception: false

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.radius.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.radius.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.radius.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# The order of the authentication handler in the chain.
# cas.authn.mfa.radius.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.radius.rank: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS identifier.
# cas.authn.mfa.radius.server.nas-identifier: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS IP address.
# cas.authn.mfa.radius.server.nas-ip-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS IPv6 address.
# cas.authn.mfa.radius.server.nas-ipv6-address: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port.
# cas.authn.mfa.radius.server.nas-port: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port id.
# cas.authn.mfa.radius.server.nas-port-id: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port type.
# cas.authn.mfa.radius.server.nas-port-type: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS real port.
# cas.authn.mfa.radius.server.nas-real-port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# Radius protocol to use when communicating with the server.
# cas.authn.mfa.radius.server.protocol: EAP_MSCHAPv2

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# Number of re-try attempts when dealing with connection and authentication failures.
# cas.authn.mfa.radius.server.retries: 3

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.RadiusMultifactorAuthenticationProperties
# Module: cas-server-support-radius-mfa
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.radius.trusted-device-enabled: false

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.mfa.rest.url: 
# Deprecation Level: ERROR
# Deprecation Reason: url setting is now moved into the cas.authn.mfa.triggers.rest namespace.
# Deprecation Replacement: cas.authn.mfa.triggers.rest.url

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.simple.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.simple.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.simple.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.simple.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.simple.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.simple.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.simple.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.simple.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.simple.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.simple.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.simple.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.simple.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.simple.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.simple.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.simple.bypass.rest.url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.simple.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.simple.id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.mfa.simple.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.mfa.simple.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.mfa.simple.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.mfa.simple.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.mfa.simple.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.mfa.simple.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.mfa.simple.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.mfa.simple.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.mfa.simple.mail.validate-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.simple.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# The order of the authentication handler in the chain.
# cas.authn.mfa.simple.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.simple.rank: 0

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.mfa.simple.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.authn.mfa.simple.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.authn.mfa.simple.sms.text: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# Time in seconds that CAS tokens should be considered live in CAS server.
# cas.authn.mfa.simple.time-to-kill-in-seconds: 30

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# The length of the generated token.
# cas.authn.mfa.simple.token-length: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties
# Module: cas-server-support-simple-mfa
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.simple.trusted-device-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.swivel.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.swivel.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.swivel.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.swivel.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.swivel.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.swivel.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.swivel.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.swivel.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.swivel.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.swivel.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.swivel.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.swivel.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.swivel.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.swivel.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.swivel.bypass.rest.url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.swivel.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.swivel.id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# Control whether SSL errors should be ignored by the swivel server.
# cas.authn.mfa.swivel.ignore-ssl-errors: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.swivel.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# The order of the authentication handler in the chain.
# cas.authn.mfa.swivel.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.swivel.rank: 0

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# Shared secret to authenticate against the swivel server.
# cas.authn.mfa.swivel.shared-secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# URL endpoint response to generate a turing image.
# cas.authn.mfa.swivel.swivel-turing-image-url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# Swivel endpoint url for verification of credentials.
# cas.authn.mfa.swivel.swivel-url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.SwivelMultifactorAuthenticationProperties
# Module: cas-server-support-swivel
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.swivel.trusted-device-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthenticationAttributeMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# MFA can be triggered for all users/subjects whose authentication event/metadata has resolved a specific attribute that matches one of the below conditions: <ul> <li>Trigger MFA based on a authentication attribute(s) whose value(s) matches a regex pattern. Note that this behavior is only applicable if there is only a single MFA provider configured, since that would allow CAS to know what provider to next activate. </li> <li>Trigger MFA based on a authentication attribute(s) whose value(s) EXACTLY matches an MFA provider. This option is more relevant if you have more than one provider configured or if you have the flexibility of assigning provider ids to attributes as values. </li> </ul> Needless to say, the attributes need to have been resolved for the authentication event prior to this step. This trigger is generally useful when the underlying authentication engine signals CAS to perform additional validation of credentials. This signal may be captured by CAS as an attribute that is part of the authentication event metadata which can then trigger additional multifactor authentication events.
# cas.authn.mfa.triggers.authentication.global-authentication-attribute-name-triggers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.AuthenticationAttributeMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# The regular expression that is cross matches against the authentication attribute to determine if the account is qualified for multifactor authentication.
# cas.authn.mfa.triggers.authentication.global-authentication-attribute-value-regex: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.GlobalMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# MFA can be triggered for all applications and users regardless of individual settings. This setting holds the value of an MFA provider that shall be activated for all requests, regardless.
# cas.authn.mfa.triggers.global.global-provider-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.GrouperMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# MFA can be triggered by Grouper groups to which the authenticated principal is assigned. Groups are collected by CAS and then cross-checked against all available/configured MFA providers. The groupâ€™s comparing factor MUST be defined in CAS to activate this behavior and it can be based on the groupâ€™s name, display name, etc where a successful match against a provider id shall activate the chosen MFA provider.
# cas.authn.mfa.triggers.grouper.grouper-group-field: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationHttpTriggerProperties
# Module: cas-server-core-authentication
# MFA can be triggered for a specific authentication request, provided the initial request to the CAS /login endpoint contains a request header that indicates the required MFA authentication flow. The header name is configurable, but its value must match the authentication provider id of an available MFA provider.
# cas.authn.mfa.triggers.http.request-header: authn_method

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationHttpTriggerProperties
# Module: cas-server-core-authentication
# MFA can be triggered for a specific authentication request, provided the initial request to the CAS /login endpoint contains a parameter that indicates the required MFA authentication flow. The parameter name is configurable, but its value must match the authentication provider id of an available MFA provider.
# cas.authn.mfa.triggers.http.request-parameter: authn_method

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationHttpTriggerProperties
# Module: cas-server-core-authentication
# MFA can be triggered for a specific authentication request, provided the  request  contains a session/request attribute that indicates the required MFA authentication flow. The attribute name is configurable, but its value must match the authentication provider id of an available MFA provider.
# cas.authn.mfa.triggers.http.session-attribute: authn_method

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.PrincipalAttributeMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# Force CAS to deny and block the authentication attempt altogether if attribute name/value configuration cannot produce a successful match to trigger multifactor authentication.
# cas.authn.mfa.triggers.principal.deny-if-unmatched: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.PrincipalAttributeMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# MFA can be triggered for all users/subjects carrying a specific attribute that matches one of the conditions below. <ul> <li>Trigger MFA based on a principal attribute(s) whose value(s) matches a regex pattern. Note that this behavior is only applicable if there is only a single MFA provider configured, since that would allow CAS to know what provider to next activate.</li> <li>Trigger MFA based on a principal attribute(s) whose value(s) EXACTLY matches an MFA provider. This option is more relevant if you have more than one provider configured or if you have the flexibility of assigning provider ids to attributes as values.</li> </ul> Needless to say, the attributes need to have been resolved for the principal prior to this step.
# cas.authn.mfa.triggers.principal.global-principal-attribute-name-triggers: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.triggers.principal.global-principal-attribute-predicate.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.PrincipalAttributeMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# The regular expression that is cross matches against the principal attribute to determine if the account is qualified for multifactor authentication.
# cas.authn.mfa.triggers.principal.global-principal-attribute-value-regex: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.triggers.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.triggers.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.triggers.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.triggers.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.triggers.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.mfa.trusted.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.mfa.trusted.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.mfa.trusted.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.mfa.trusted.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.TrustedDevicesMultifactorCoreProperties
# Module: cas-server-support-trusted-mfa
# If an MFA request is bypassed due to a trusted authentication decision, applications will receive a special attribute as part of the validation payload that indicates this behavior. Applications must further account for the scenario where they ask for an MFA mode and yet donâ€™t receive confirmation of it in the response given the authentication session was trusted and MFA bypassed.
# cas.authn.mfa.trusted.core.authentication-context-attribute: isFromTrustedMultifactorAuthentication

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.TrustedDevicesMultifactorCoreProperties
# Module: cas-server-support-trusted-mfa
# When device registration is enabled, indicate whether a device name should be automatically selected and assigned by CAS.
# cas.authn.mfa.trusted.core.auto-assign-device-name: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.TrustedDevicesMultifactorCoreProperties
# Module: cas-server-support-trusted-mfa
# Indicates whether CAS should ask for device registration consent or execute it automatically.
# cas.authn.mfa.trusted.core.device-registration-enabled: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.trusteddevice.TrustedDevicesMultifactorCoreProperties$TrustedDevicesKeyGeneratorTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.TrustedDevicesMultifactorCoreProperties
# Module: cas-server-support-trusted-mfa
# Indicates how record keys for trusted devices would be generated so they can be signed/verified on fetch operations.
Available values are as follows:
<ul><li>{@code DEFAULT}: Uses a combination of the username, device name and device fingerprint to generate the device key.</li><li>{@code LEGACY}: Deprecated. Uses a combination of the username, record date and device fingerprint to generate the device key.</li></ul>
# cas.authn.mfa.trusted.core.key-generator-type: DEFAULT

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Use a local cache to reduce fetches..
# cas.authn.mfa.trusted.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Remove idle connections from pool.
# cas.authn.mfa.trusted.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# TCP connection timeout.
# cas.authn.mfa.trusted.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Create the database if it doesn't exist.
# cas.authn.mfa.trusted.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Database name.
# cas.authn.mfa.trusted.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.mfa.trusted.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Max entries in local cache.
# cas.authn.mfa.trusted.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Maximum connections to CouchDB.
# cas.authn.mfa.trusted.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Largest allowable serialized object.
# cas.authn.mfa.trusted.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Password for connection.
# cas.authn.mfa.trusted.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Proxy host.
# cas.authn.mfa.trusted.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# proxy port.
# cas.authn.mfa.trusted.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.mfa.trusted.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Retries for update conflicts.
# cas.authn.mfa.trusted.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Socket idle timeout.
# cas.authn.mfa.trusted.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Connection url.
# cas.authn.mfa.trusted.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.mfa.trusted.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.CouchDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-couchdb
# Username for connection.
# cas.authn.mfa.trusted.couch-db.username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.trusted.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.trusted.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.trusted.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.trusted.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.trusted.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.trusted.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.trusted.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.ClientIp
# Module: cas-server-support-trusted-mfa
# Is this component enabled or not.
# cas.authn.mfa.trusted.device-fingerprint.client-ip.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.ClientIp
# Module: cas-server-support-trusted-mfa
# Indicates the order of components when generating a device fingerprint.
# cas.authn.mfa.trusted.device-fingerprint.client-ip.order: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties
# Module: cas-server-support-trusted-mfa
# Component Separator for device fingerprints.
# cas.authn.mfa.trusted.device-fingerprint.component-separator: @

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# A regular expression pattern that indicates the set of allowed IP addresses, when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc), the cookie can still be considered valid if the new IP address matches the pattern specified here.
# cas.authn.mfa.trusted.device-fingerprint.cookie.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.authn.mfa.trusted.device-fingerprint.cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.trusted.device-fingerprint.cookie.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.authn.mfa.trusted.device-fingerprint.cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# Is this component enabled or not.
# cas.authn.mfa.trusted.device-fingerprint.cookie.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.authn.mfa.trusted.device-fingerprint.cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.authn.mfa.trusted.device-fingerprint.cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.authn.mfa.trusted.device-fingerprint.cookie.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# Indicates the order of components when generating a device fingerprint.
# cas.authn.mfa.trusted.device-fingerprint.cookie.order: 1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.authn.mfa.trusted.device-fingerprint.cookie.path: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# When generating cookie values, determine whether the value should be compounded and signed with the properties of the current session, such as IP address, user-agent, etc.
# cas.authn.mfa.trusted.device-fingerprint.cookie.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.authn.mfa.trusted.device-fingerprint.cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.Cookie
# Module: cas-server-support-trusted-mfa
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.authn.mfa.trusted.device-fingerprint.cookie.secure: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.GeoLocation
# Module: cas-server-support-trusted-mfa
# Is this component enabled or not.
# cas.authn.mfa.trusted.device-fingerprint.geolocation.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.GeoLocation
# Module: cas-server-support-trusted-mfa
# Indicates the order of components when generating a device fingerprint.
# cas.authn.mfa.trusted.device-fingerprint.geolocation.order: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.UserAgent
# Module: cas-server-support-trusted-mfa
# Is this component enabled or not.
# cas.authn.mfa.trusted.device-fingerprint.user-agent.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.DeviceFingerprintProperties.UserAgent
# Module: cas-server-support-trusted-mfa
# Indicates the order of components when generating a device fingerprint.
# cas.authn.mfa.trusted.device-fingerprint.user-agent.order: 0

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.authn.mfa.trusted.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Client execution timeout.
# cas.authn.mfa.trusted.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Connection timeout.
# cas.authn.mfa.trusted.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Use access-key provided by AWS to authenticate.
# cas.authn.mfa.trusted.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Use secret key provided by AWS to authenticate.
# cas.authn.mfa.trusted.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to drop tables on start up.
# cas.authn.mfa.trusted.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# AWS custom endpoint.
# cas.authn.mfa.trusted.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Local address.
# cas.authn.mfa.trusted.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.authn.mfa.trusted.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Maximum connections setting.
# cas.authn.mfa.trusted.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to prevent CAS from creating tables.
# cas.authn.mfa.trusted.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Profile name to use.
# cas.authn.mfa.trusted.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Profile path.
# cas.authn.mfa.trusted.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy host to connect through.
# cas.authn.mfa.trusted.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy password to connect through.
# cas.authn.mfa.trusted.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy username to connect through.
# cas.authn.mfa.trusted.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Read capacity.
# cas.authn.mfa.trusted.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# AWS region used.
# cas.authn.mfa.trusted.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.mfa.trusted.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Socket timeout.
# cas.authn.mfa.trusted.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# The table name used and created by CAS to hold mfa trust definitions in DynamoDb.
# cas.authn.mfa.trusted.dynamo-db.table-name: DynamoDbCasMfaTrustRecords

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Time offset.
# cas.authn.mfa.trusted.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to use reaper.
# cas.authn.mfa.trusted.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-dynamodb-service-registry
# Write capacity.
# cas.authn.mfa.trusted.dynamo-db.write-capacity: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.mfa.trusted.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.mfa.trusted.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.mfa.trusted.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.mfa.trusted.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.mfa.trusted.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.mfa.trusted.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.mfa.trusted.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The JDBC driver used to connect to the database.
# cas.authn.mfa.trusted.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.mfa.trusted.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.authn.mfa.trusted.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Allow hibernate to generate query statistics.
# cas.authn.mfa.trusted.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.authn.mfa.trusted.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.mfa.trusted.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.mfa.trusted.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.trusted.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.mfa.trusted.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The database connection password.
# cas.authn.mfa.trusted.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.mfa.trusted.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.mfa.trusted.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.mfa.trusted.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.mfa.trusted.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.mfa.trusted.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.mfa.trusted.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.trusted.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.mfa.trusted.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The database connection URL.
# cas.authn.mfa.trusted.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JpaTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.mfa.trusted.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.JsonTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.trusted.json.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Name of the database to use for authentication.
# cas.authn.mfa.trusted.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mfa.trusted.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mfa.trusted.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database instance name.
# cas.authn.mfa.trusted.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mfa.trusted.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mfa.trusted.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database password for authentication.
# cas.authn.mfa.trusted.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.trusted.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.trusted.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mfa.trusted.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mfa.trusted.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mfa.trusted.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mfa.trusted.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database port.
# cas.authn.mfa.trusted.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mfa.trusted.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mfa.trusted.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mfa.trusted.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mfa.trusted.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mfa.trusted.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Whether connections require SSL.
# cas.authn.mfa.trusted.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database connection timeout.
# cas.authn.mfa.trusted.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# MongoDb database user for authentication.
# cas.authn.mfa.trusted.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.MongoDbTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mfa.trusted.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.mfa.trusted.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.mfa.trusted.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.mfa.trusted.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.mfa.trusted.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.mfa.trusted.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.mfa.trusted.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.mfa.trusted.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.mfa.trusted.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.mfa.trusted.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.mfa.trusted.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.mfa.trusted.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.mfa.trusted.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Connection timeout.
# cas.authn.mfa.trusted.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Database index used by the connection factory.
# cas.authn.mfa.trusted.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.mfa.trusted.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Redis server host.
# cas.authn.mfa.trusted.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Login password of the redis server.
# cas.authn.mfa.trusted.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.mfa.trusted.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.mfa.trusted.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.mfa.trusted.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.mfa.trusted.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.mfa.trusted.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.mfa.trusted.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.mfa.trusted.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.mfa.trusted.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.mfa.trusted.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.mfa.trusted.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.mfa.trusted.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.mfa.trusted.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.mfa.trusted.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.mfa.trusted.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Redis server port.
# cas.authn.mfa.trusted.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.mfa.trusted.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.mfa.trusted.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.mfa.trusted.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Command timeout.
# cas.authn.mfa.trusted.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RedisTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-redis
# Whether or not to use SSL for connection factory.
# cas.authn.mfa.trusted.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RestfulTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.trusted.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RestfulTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.trusted.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RestfulTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.trusted.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RestfulTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.trusted.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.trusteddevice.RestfulTrustedDevicesMultifactorProperties
# Module: cas-server-support-trusted-mfa-rest
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.trusted.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.u2f.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.u2f.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.u2f.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.u2f.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.u2f.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.u2f.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.u2f.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.u2f.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.u2f.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.u2f.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.u2f.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.u2f.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.u2f.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.u2f.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.u2f.bypass.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.mfa.u2f.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.mfa.u2f.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.mfa.u2f.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.mfa.u2f.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.u2f.core.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.u2f.core.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.u2f.core.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.u2f.core.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.u2f.core.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.u2f.core.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.u2f.core.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.u2f.core.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.u2f.core.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.u2f.core.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.u2f.core.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.u2f.core.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.u2f.core.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.u2f.core.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.u2f.core.bypass.rest.url: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Expire and forget device registration records after this period.
# cas.authn.mfa.u2f.core.expire-devices: 30

# Required: false
# Type: java.util.concurrent.TimeUnit
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Device registration record expiration time unit.
# cas.authn.mfa.u2f.core.expire-devices-time-unit: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Expire and forget device registration requests after this period.
# cas.authn.mfa.u2f.core.expire-registrations: 30

# Required: false
# Type: java.util.concurrent.TimeUnit
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Device registration requests expiration time unit.
# cas.authn.mfa.u2f.core.expire-registrations-time-unit: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.u2f.core.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.u2f.core.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.u2f.core.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The order of the authentication handler in the chain.
# cas.authn.mfa.u2f.core.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.u2f.core.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCoreMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.u2f.core.trusted-device-enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Make DB updates asynchronously.
# cas.authn.mfa.u2f.couch-db.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Use a local cache to reduce fetches..
# cas.authn.mfa.u2f.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Remove idle connections from pool.
# cas.authn.mfa.u2f.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# TCP connection timeout.
# cas.authn.mfa.u2f.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Create the database if it doesn't exist.
# cas.authn.mfa.u2f.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Database name.
# cas.authn.mfa.u2f.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.mfa.u2f.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Max entries in local cache.
# cas.authn.mfa.u2f.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Maximum connections to CouchDB.
# cas.authn.mfa.u2f.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Largest allowable serialized object.
# cas.authn.mfa.u2f.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Password for connection.
# cas.authn.mfa.u2f.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Proxy host.
# cas.authn.mfa.u2f.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# proxy port.
# cas.authn.mfa.u2f.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.mfa.u2f.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Retries for update conflicts.
# cas.authn.mfa.u2f.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Socket idle timeout.
# cas.authn.mfa.u2f.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Connection url.
# cas.authn.mfa.u2f.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.mfa.u2f.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FCouchDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-couchdb
# Username for connection.
# cas.authn.mfa.u2f.couch-db.username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.u2f.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.u2f.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.u2f.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.u2f.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.u2f.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.u2f.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.u2f.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.authn.mfa.u2f.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Client execution timeout.
# cas.authn.mfa.u2f.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Connection timeout.
# cas.authn.mfa.u2f.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.authn.mfa.u2f.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.authn.mfa.u2f.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.authn.mfa.u2f.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# AWS custom endpoint.
# cas.authn.mfa.u2f.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Local address.
# cas.authn.mfa.u2f.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.authn.mfa.u2f.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Maximum connections setting.
# cas.authn.mfa.u2f.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.authn.mfa.u2f.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Profile name to use.
# cas.authn.mfa.u2f.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Profile path.
# cas.authn.mfa.u2f.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.authn.mfa.u2f.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.authn.mfa.u2f.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.authn.mfa.u2f.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Read capacity.
# cas.authn.mfa.u2f.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# AWS region used.
# cas.authn.mfa.u2f.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.mfa.u2f.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Socket timeout.
# cas.authn.mfa.u2f.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# The table name used and created by CAS to hold devices in DynamoDb.
# cas.authn.mfa.u2f.dynamo-db.table-name: DynamoDbU2FDevices

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Time offset.
# cas.authn.mfa.u2f.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Flag that indicates whether to use reaper.
# cas.authn.mfa.u2f.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FDynamoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-dynamodb
# Write capacity.
# cas.authn.mfa.u2f.dynamo-db.write-capacity: 10

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.u2f.failure-mode: CLOSED

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FGroovyMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.u2f.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.u2f.id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.mfa.u2f.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.mfa.u2f.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.mfa.u2f.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.mfa.u2f.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.mfa.u2f.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.mfa.u2f.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.mfa.u2f.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The JDBC driver used to connect to the database.
# cas.authn.mfa.u2f.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.mfa.u2f.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.mfa.u2f.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Allow hibernate to generate query statistics.
# cas.authn.mfa.u2f.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.mfa.u2f.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.mfa.u2f.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.mfa.u2f.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.u2f.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.mfa.u2f.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The database connection password.
# cas.authn.mfa.u2f.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.mfa.u2f.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.mfa.u2f.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.mfa.u2f.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.mfa.u2f.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.mfa.u2f.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.mfa.u2f.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.u2f.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.mfa.u2f.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The database connection URL.
# cas.authn.mfa.u2f.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJpaMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.mfa.u2f.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FJsonMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.u2f.json.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Name of the database to use for authentication.
# cas.authn.mfa.u2f.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mfa.u2f.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mfa.u2f.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database instance name.
# cas.authn.mfa.u2f.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mfa.u2f.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mfa.u2f.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database password for authentication.
# cas.authn.mfa.u2f.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.u2f.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.u2f.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mfa.u2f.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mfa.u2f.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mfa.u2f.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mfa.u2f.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database port.
# cas.authn.mfa.u2f.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mfa.u2f.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mfa.u2f.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mfa.u2f.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mfa.u2f.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mfa.u2f.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Whether connections require SSL.
# cas.authn.mfa.u2f.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database connection timeout.
# cas.authn.mfa.u2f.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# MongoDb database user for authentication.
# cas.authn.mfa.u2f.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMongoDbMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mfa.u2f.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.u2f.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The order of the authentication handler in the chain.
# cas.authn.mfa.u2f.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.u2f.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.mfa.u2f.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.mfa.u2f.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.mfa.u2f.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.mfa.u2f.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.mfa.u2f.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.mfa.u2f.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.mfa.u2f.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.mfa.u2f.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.mfa.u2f.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.mfa.u2f.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.mfa.u2f.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.mfa.u2f.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Connection timeout.
# cas.authn.mfa.u2f.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Database index used by the connection factory.
# cas.authn.mfa.u2f.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.mfa.u2f.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Redis server host.
# cas.authn.mfa.u2f.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Login password of the redis server.
# cas.authn.mfa.u2f.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.mfa.u2f.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.mfa.u2f.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.mfa.u2f.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.mfa.u2f.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.mfa.u2f.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.mfa.u2f.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.mfa.u2f.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.mfa.u2f.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.mfa.u2f.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.mfa.u2f.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.mfa.u2f.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.mfa.u2f.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.mfa.u2f.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.mfa.u2f.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Redis server port.
# cas.authn.mfa.u2f.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.mfa.u2f.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.mfa.u2f.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.mfa.u2f.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Command timeout.
# cas.authn.mfa.u2f.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRedisMultifactorAuthenticationProperties
# Module: cas-server-support-u2f-redis
# Whether or not to use SSL for connection factory.
# cas.authn.mfa.u2f.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRestfulMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.u2f.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRestfulMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.u2f.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRestfulMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.u2f.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRestfulMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.u2f.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.u2f.U2FRestfulMultifactorAuthenticationProperties
# Module: cas-server-support-u2f
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.u2f.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.web-authn.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.web-authn.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.web-authn.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.web-authn.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.web-authn.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.web-authn.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.web-authn.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.web-authn.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.web-authn.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.web-authn.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.web-authn.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.web-authn.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.web-authn.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.web-authn.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.web-authn.bypass.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.mfa.web-authn.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.mfa.web-authn.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.mfa.web-authn.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.mfa.web-authn.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Configure the authentication flow to allow web-authn to be used as the first primary factor for authentication. Registered accounts with a valid webauthn registration record can choose to login using their device as the first step.
# cas.authn.mfa.web-authn.core.allow-primary-authentication: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# If {@code true} finish registration op and finish assertion will accept responses containing extension outputs for which there was no extension input.
# cas.authn.mfa.web-authn.core.allow-unrequested-extensions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# If false finish registration op will only allow registrations where the attestation signature can be linked to a trusted attestation root. This excludes self attestation and none attestation. Regardless of the value of this option, invalid attestation statements of supported formats will always be rejected. For example, a "packed" attestation statement with an invalid signature will be rejected even if this option is set to true.
# cas.authn.mfa.web-authn.core.allow-untrusted-attestation: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# The allowed origins that returned authenticator responses will be compared against. The default is set to the server name. A successful registration or authentication operation requires origins to exactly equal one of these values.
# cas.authn.mfa.web-authn.core.allowed-origins: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# The extension input to set for the {@code appid} extension when initiating authentication operations. If this member is set, starting an assertion op will automatically set the {@code appid} extension input, and finish assertion op will adjust its verification logic to also accept this AppID as an alternative to the RP ID. By default, this is not set.
# cas.authn.mfa.web-authn.core.application-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Accepted values are: {@code DIRECT}, {@code INDIRECT}, {@code NONE}. The argument for the attestation parameter in registration operations. Unless your application has a concrete policy for authenticator attestation, it is recommended to leave this parameter undefined.
# cas.authn.mfa.web-authn.core.attestation-conveyance-preference: DIRECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Name of the principal attribute that indicates the principal's display name, primarily used for device registration.
# cas.authn.mfa.web-authn.core.display-name-attribute: displayName

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Whether WebAuthn functionality should be activated and enabled.
# cas.authn.mfa.web-authn.core.enabled: true

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Expire and forget device registration records after this period.
# cas.authn.mfa.web-authn.core.expire-devices: 30

# Required: false
# Type: java.util.concurrent.TimeUnit
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Device registration record expiration time unit.
# cas.authn.mfa.web-authn.core.expire-devices-time-unit: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# The id that will be set as the rp parameter when initiating registration operations, and which id hash will be compared against. This is a required parameter. A successful registration or authentication operation requires rp id hash to exactly equal the SHA-256 hash of this id member. Alternatively, it may instead equal the SHA-256 hash of application id if the latter is present.
# cas.authn.mfa.web-authn.core.relying-party-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# The human-palatable name of the Relaying Party.
# cas.authn.mfa.web-authn.core.relying-party-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.web-authn.core.trusted-device-enabled: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.web-authn.core.trusted-device-metadata.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationCoreProperties
# Module: cas-server-support-webauthn
# If true, finish assertion op will fail if the  signature counter value in the response is not strictly greater than the stored signature counter value.
# cas.authn.mfa.web-authn.core.validate-signature-counter: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.web-authn.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.web-authn.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.web-authn.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.web-authn.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.web-authn.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.web-authn.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.web-authn.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.authn.mfa.web-authn.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Client execution timeout.
# cas.authn.mfa.web-authn.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Connection timeout.
# cas.authn.mfa.web-authn.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.authn.mfa.web-authn.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.authn.mfa.web-authn.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.authn.mfa.web-authn.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# AWS custom endpoint.
# cas.authn.mfa.web-authn.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Local address.
# cas.authn.mfa.web-authn.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.authn.mfa.web-authn.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Maximum connections setting.
# cas.authn.mfa.web-authn.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.authn.mfa.web-authn.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Profile name to use.
# cas.authn.mfa.web-authn.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Profile path.
# cas.authn.mfa.web-authn.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.authn.mfa.web-authn.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.authn.mfa.web-authn.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.authn.mfa.web-authn.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Read capacity.
# cas.authn.mfa.web-authn.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# AWS region used.
# cas.authn.mfa.web-authn.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.mfa.web-authn.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Socket timeout.
# cas.authn.mfa.web-authn.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# The table name used and created by CAS to hold records in DynamoDb.
# cas.authn.mfa.web-authn.dynamo-db.table-name: DynamoDbCasWebAuthnRecords

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Time offset.
# cas.authn.mfa.web-authn.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Flag that indicates whether to use reaper.
# cas.authn.mfa.web-authn.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnDynamoDbMultifactorProperties
# Module: cas-server-support-webauthn-dynamodb
# Write capacity.
# cas.authn.mfa.web-authn.dynamo-db.write-capacity: 10

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationProperties
# Module: cas-server-support-webauthn
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.web-authn.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationProperties
# Module: cas-server-support-webauthn
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.web-authn.id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.mfa.web-authn.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.mfa.web-authn.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.mfa.web-authn.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.mfa.web-authn.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.mfa.web-authn.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.mfa.web-authn.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.mfa.web-authn.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The JDBC driver used to connect to the database.
# cas.authn.mfa.web-authn.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.mfa.web-authn.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.mfa.web-authn.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Allow hibernate to generate query statistics.
# cas.authn.mfa.web-authn.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.mfa.web-authn.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.mfa.web-authn.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.mfa.web-authn.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.web-authn.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.mfa.web-authn.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The database connection password.
# cas.authn.mfa.web-authn.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.mfa.web-authn.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.mfa.web-authn.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.mfa.web-authn.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.mfa.web-authn.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.mfa.web-authn.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.mfa.web-authn.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.web-authn.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.mfa.web-authn.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The database connection URL.
# cas.authn.mfa.web-authn.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJpaMultifactorProperties
# Module: cas-server-support-webauthn-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.mfa.web-authn.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnJsonMultifactorProperties
# Module: cas-server-support-webauthn
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.web-authn.json.location: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Name of LDAP attribute that holds WebAuthn account/credential as JSON.
# cas.authn.mfa.web-authn.ldap.account-attribute-name: casWebAuthnRecord

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.mfa.web-authn.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Set if multiple Entries are allowed.
# cas.authn.mfa.web-authn.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.mfa.web-authn.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.mfa.web-authn.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.mfa.web-authn.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.mfa.web-authn.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.mfa.web-authn.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.mfa.web-authn.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.mfa.web-authn.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.mfa.web-authn.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.mfa.web-authn.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Set if search referrals should be followed.
# cas.authn.mfa.web-authn.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.mfa.web-authn.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.mfa.web-authn.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.mfa.web-authn.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Keystore password.
# cas.authn.mfa.web-authn.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.mfa.web-authn.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.mfa.web-authn.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.mfa.web-authn.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.mfa.web-authn.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Name of the LDAP handler.
# cas.authn.mfa.web-authn.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.mfa.web-authn.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.mfa.web-authn.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.mfa.web-authn.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Duration of time to wait for responses.
# cas.authn.mfa.web-authn.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# SASL authorization id.
# cas.authn.mfa.web-authn.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The SASL mechanism.
# cas.authn.mfa.web-authn.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# SASL mutual auth is enabled?
# cas.authn.mfa.web-authn.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# SASL quality of protected.
# cas.authn.mfa.web-authn.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The SASL realm.
# cas.authn.mfa.web-authn.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# SASL security strength.
# cas.authn.mfa.web-authn.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Search handlers.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.mfa.web-authn.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.mfa.web-authn.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether subtree searching is allowed.
# cas.authn.mfa.web-authn.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.mfa.web-authn.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.mfa.web-authn.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.mfa.web-authn.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Password needed to open the truststore.
# cas.authn.mfa.web-authn.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.mfa.web-authn.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.mfa.web-authn.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.mfa.web-authn.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Period at which pool should be validated.
# cas.authn.mfa.web-authn.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.mfa.web-authn.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnLdapMultifactorProperties
# Module: cas-server-support-webauthn-ldap
# Period at which validation operations may time out.
# cas.authn.mfa.web-authn.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.mfa.web-authn.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.mfa.web-authn.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.mfa.web-authn.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.mfa.web-authn.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.mfa.web-authn.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.mfa.web-authn.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.mfa.web-authn.ldap.validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Name of the database to use for authentication.
# cas.authn.mfa.web-authn.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mfa.web-authn.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mfa.web-authn.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database instance name.
# cas.authn.mfa.web-authn.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mfa.web-authn.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mfa.web-authn.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database password for authentication.
# cas.authn.mfa.web-authn.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.web-authn.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.web-authn.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mfa.web-authn.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mfa.web-authn.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mfa.web-authn.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mfa.web-authn.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database port.
# cas.authn.mfa.web-authn.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mfa.web-authn.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mfa.web-authn.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mfa.web-authn.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mfa.web-authn.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mfa.web-authn.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Whether connections require SSL.
# cas.authn.mfa.web-authn.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database connection timeout.
# cas.authn.mfa.web-authn.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# MongoDb database user for authentication.
# cas.authn.mfa.web-authn.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMongoDbMultifactorProperties
# Module: cas-server-support-webauthn-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mfa.web-authn.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationProperties
# Module: cas-server-support-webauthn
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.web-authn.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationProperties
# Module: cas-server-support-webauthn
# The order of the authentication handler in the chain.
# cas.authn.mfa.web-authn.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnMultifactorAuthenticationProperties
# Module: cas-server-support-webauthn
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.web-authn.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.mfa.web-authn.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.mfa.web-authn.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.mfa.web-authn.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.mfa.web-authn.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.mfa.web-authn.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.mfa.web-authn.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.mfa.web-authn.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Connection timeout.
# cas.authn.mfa.web-authn.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Database index used by the connection factory.
# cas.authn.mfa.web-authn.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.mfa.web-authn.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Redis server host.
# cas.authn.mfa.web-authn.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Login password of the redis server.
# cas.authn.mfa.web-authn.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.mfa.web-authn.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.mfa.web-authn.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.mfa.web-authn.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.mfa.web-authn.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.mfa.web-authn.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.mfa.web-authn.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.mfa.web-authn.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.mfa.web-authn.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.mfa.web-authn.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.mfa.web-authn.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.mfa.web-authn.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.mfa.web-authn.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.mfa.web-authn.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.mfa.web-authn.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Redis server port.
# cas.authn.mfa.web-authn.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.mfa.web-authn.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.mfa.web-authn.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.mfa.web-authn.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Command timeout.
# cas.authn.mfa.web-authn.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRedisMultifactorProperties
# Module: cas-server-support-webauthn-redis
# Whether or not to use SSL for connection factory.
# cas.authn.mfa.web-authn.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRestfulMultifactorProperties
# Module: cas-server-support-webauthn-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.web-authn.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRestfulMultifactorProperties
# Module: cas-server-support-webauthn-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.web-authn.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRestfulMultifactorProperties
# Module: cas-server-support-webauthn-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.web-authn.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRestfulMultifactorProperties
# Module: cas-server-support-webauthn-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.web-authn.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.webauthn.WebAuthnRestfulMultifactorProperties
# Module: cas-server-support-webauthn-rest
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.web-authn.rest.url: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# Collection of allowed devices allowed per user. This is done using a key-value structure where the key is the user the value is the allowed collection of yubikey device ids.
# cas.authn.mfa.yubikey.allowed-devices: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# YubiKey API urls to contact for verification of credentials.
# cas.authn.mfa.yubikey.api-urls: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated authentication attribute names.
# cas.authn.mfa.yubikey.bypass.authentication-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated authentication attribute values.
# cas.authn.mfa.yubikey.bypass.authentication-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary authentication execution. Specifically, skip multifactor if the a particular authentication handler noted by its name successfully is able to authenticate credentials in the primary factor.
# cas.authn.mfa.yubikey.bypass.authentication-handler-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on method/form of primary authentication execution. Specifically, skip multifactor if the authentication method attribute collected as part of authentication metadata matches a certain value.
# cas.authn.mfa.yubikey.bypass.authentication-method-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication depending on form of primary credentials. Value must equal the fully qualified class name of the credential type.
# cas.authn.mfa.yubikey.bypass.credential-class-type: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mfa.yubikey.bypass.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request contains the defined header names. Header names may be comma-separated and can be regular expressions; values are ignored.
# cas.authn.mfa.yubikey.bypass.http-request-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication if the http request's remote address or host matches the value defined here. The value may be specified as a regular expression.
# cas.authn.mfa.yubikey.bypass.http-request-remote-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Skip multifactor authentication based on designated principal attribute names.
# cas.authn.mfa.yubikey.bypass.principal-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Optionally, skip multifactor authentication based on designated principal attribute values.
# cas.authn.mfa.yubikey.bypass.principal-attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.yubikey.bypass.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.yubikey.bypass.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.yubikey.bypass.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.yubikey.bypass.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties
# Module: cas-server-core-authentication
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.yubikey.bypass.rest.url: 

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# Yubikey client id.
# cas.authn.mfa.yubikey.client-id: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Use a local cache to reduce fetches..
# cas.authn.mfa.yubikey.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Remove idle connections from pool.
# cas.authn.mfa.yubikey.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# TCP connection timeout.
# cas.authn.mfa.yubikey.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Create the database if it doesn't exist.
# cas.authn.mfa.yubikey.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Database name.
# cas.authn.mfa.yubikey.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.mfa.yubikey.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Max entries in local cache.
# cas.authn.mfa.yubikey.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Maximum connections to CouchDB.
# cas.authn.mfa.yubikey.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Largest allowable serialized object.
# cas.authn.mfa.yubikey.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Password for connection.
# cas.authn.mfa.yubikey.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Proxy host.
# cas.authn.mfa.yubikey.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# proxy port.
# cas.authn.mfa.yubikey.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.mfa.yubikey.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Retries for update conflicts.
# cas.authn.mfa.yubikey.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Socket idle timeout.
# cas.authn.mfa.yubikey.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Connection url.
# cas.authn.mfa.yubikey.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.mfa.yubikey.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyCouchDbMultifactorProperties
# Module: cas-server-support-yubikey-couchdb
# Username for connection.
# cas.authn.mfa.yubikey.couch-db.username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.mfa.yubikey.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.mfa.yubikey.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.mfa.yubikey.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.mfa.yubikey.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.mfa.yubikey.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.mfa.yubikey.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.mfa.yubikey.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.authn.mfa.yubikey.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Client execution timeout.
# cas.authn.mfa.yubikey.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Connection timeout.
# cas.authn.mfa.yubikey.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.authn.mfa.yubikey.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.authn.mfa.yubikey.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.authn.mfa.yubikey.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# AWS custom endpoint.
# cas.authn.mfa.yubikey.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Local address.
# cas.authn.mfa.yubikey.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.authn.mfa.yubikey.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Maximum connections setting.
# cas.authn.mfa.yubikey.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.authn.mfa.yubikey.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Profile name to use.
# cas.authn.mfa.yubikey.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Profile path.
# cas.authn.mfa.yubikey.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.authn.mfa.yubikey.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.authn.mfa.yubikey.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.authn.mfa.yubikey.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Read capacity.
# cas.authn.mfa.yubikey.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# AWS region used.
# cas.authn.mfa.yubikey.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.mfa.yubikey.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Socket timeout.
# cas.authn.mfa.yubikey.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# The table name used and created by CAS to hold devices in DynamoDb.
# cas.authn.mfa.yubikey.dynamo-db.table-name: DynamoDbYubiKeyDevices

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Time offset.
# cas.authn.mfa.yubikey.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Flag that indicates whether to use reaper.
# cas.authn.mfa.yubikey.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyDynamoDbMultifactorProperties
# Module: cas-server-support-yubikey-dynamodb
# Write capacity.
# cas.authn.mfa.yubikey.dynamo-db.write-capacity: 10

# Required: false
# Type: org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# The failure mode policy for this MFA provider. The authentication policy by default supports fail-closed mode, which means that if you attempt to exercise a particular provider available to CAS and the provider cannot be reached, authentication will be stopped and an error will be displayed. You can of course change this behavior so that authentication proceeds without exercising the provider functionality, if that provider cannot respond. Each defined multifactor authentication provider can set its own failure mode policy. Failure modes set at this location will override the global failure mode, but defer to any failure mode set by the registered service.
Available values are as follows:
<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure mode is set at all.</li></ul>
# cas.authn.mfa.yubikey.failure-mode: CLOSED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# The identifier for the multifactor provider. In most cases, this need not be configured explicitly, unless multiple instances of the same provider type are configured in CAS.
# cas.authn.mfa.yubikey.id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.mfa.yubikey.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.mfa.yubikey.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.mfa.yubikey.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.mfa.yubikey.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.mfa.yubikey.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.mfa.yubikey.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.mfa.yubikey.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The JDBC driver used to connect to the database.
# cas.authn.mfa.yubikey.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.mfa.yubikey.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.mfa.yubikey.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Allow hibernate to generate query statistics.
# cas.authn.mfa.yubikey.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.mfa.yubikey.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.mfa.yubikey.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.mfa.yubikey.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.yubikey.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.mfa.yubikey.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The database connection password.
# cas.authn.mfa.yubikey.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.mfa.yubikey.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.mfa.yubikey.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.mfa.yubikey.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.mfa.yubikey.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.mfa.yubikey.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.mfa.yubikey.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.mfa.yubikey.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.mfa.yubikey.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The database connection URL.
# cas.authn.mfa.yubikey.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyJpaMultifactorProperties
# Module: cas-server-support-yubikey-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.mfa.yubikey.jpa.user: sa

# Required: false
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# Keep device registration records inside a static JSON resource.
# cas.authn.mfa.yubikey.json-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Name of the database to use for authentication.
# cas.authn.mfa.yubikey.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mfa.yubikey.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mfa.yubikey.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database instance name.
# cas.authn.mfa.yubikey.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mfa.yubikey.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mfa.yubikey.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database password for authentication.
# cas.authn.mfa.yubikey.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.yubikey.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mfa.yubikey.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mfa.yubikey.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mfa.yubikey.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mfa.yubikey.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mfa.yubikey.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database port.
# cas.authn.mfa.yubikey.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mfa.yubikey.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mfa.yubikey.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mfa.yubikey.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mfa.yubikey.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mfa.yubikey.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Whether connections require SSL.
# cas.authn.mfa.yubikey.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database connection timeout.
# cas.authn.mfa.yubikey.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# MongoDb database user for authentication.
# cas.authn.mfa.yubikey.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMongoDbMultifactorProperties
# Module: cas-server-support-yubikey-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mfa.yubikey.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# When enabled, allows the user/system to accept multiple accounts and device registrations per user, allowing one to switch between or register new devices/accounts automatically.
# cas.authn.mfa.yubikey.multiple-device-registration-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# The name of the authentication handler used to verify credentials in MFA.
# cas.authn.mfa.yubikey.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# The order of the authentication handler in the chain.
# cas.authn.mfa.yubikey.order: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# At times, CAS needs to determine the correct provider when step-up authentication is required. Consider for a moment that CAS already has established an SSO session with/without a provider and has reached a level of authentication. Another incoming request attempts to exercise that SSO session with a different and often competing authentication requirement that may differ from the authentication level CAS has already established. Concretely, examples may be: <ul> <li>CAS has achieved an SSO session, but a separate request now requires step-up authentication with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication level satisfied by DuoSecurity, but a separate request now requires step-up authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt to rank authentication levels and compare them with each other. If CAS already has achieved a level that is higher than what the incoming request requires, no step-up authentication will be performed. If the opposite is true, CAS will route the authentication flow to the required authentication level and upon success, will adjust the SSO session with the new higher authentication level now satisfied. Ranking of authentication methods is done per provider via specific properties for each. Note that the higher the rank value is, the higher on the security scale it remains. A provider that ranks higher with a larger weight value trumps and override others with a lower value.
# cas.authn.mfa.yubikey.rank: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.mfa.yubikey.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.mfa.yubikey.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.mfa.yubikey.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.mfa.yubikey.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.mfa.yubikey.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.mfa.yubikey.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.mfa.yubikey.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Connection timeout.
# cas.authn.mfa.yubikey.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Database index used by the connection factory.
# cas.authn.mfa.yubikey.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.mfa.yubikey.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Redis server host.
# cas.authn.mfa.yubikey.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Login password of the redis server.
# cas.authn.mfa.yubikey.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.mfa.yubikey.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.mfa.yubikey.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.mfa.yubikey.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.mfa.yubikey.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.mfa.yubikey.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.mfa.yubikey.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.mfa.yubikey.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.mfa.yubikey.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.mfa.yubikey.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.mfa.yubikey.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.mfa.yubikey.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.mfa.yubikey.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.mfa.yubikey.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.mfa.yubikey.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Redis server port.
# cas.authn.mfa.yubikey.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.mfa.yubikey.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.mfa.yubikey.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.mfa.yubikey.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Command timeout.
# cas.authn.mfa.yubikey.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRedisMultifactorProperties
# Module: cas-server-support-yubikey-redis
# Whether or not to use SSL for connection factory.
# cas.authn.mfa.yubikey.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRestfulMultifactorProperties
# Module: cas-server-support-yubikey
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.mfa.yubikey.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRestfulMultifactorProperties
# Module: cas-server-support-yubikey
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.mfa.yubikey.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRestfulMultifactorProperties
# Module: cas-server-support-yubikey
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.mfa.yubikey.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRestfulMultifactorProperties
# Module: cas-server-support-yubikey
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.mfa.yubikey.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyRestfulMultifactorProperties
# Module: cas-server-support-yubikey
# The endpoint URL to contact and retrieve attributes.
# cas.authn.mfa.yubikey.rest.url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# Yubikey secret key.
# cas.authn.mfa.yubikey.secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mfa.yubikey.YubiKeyMultifactorAuthenticationProperties
# Module: cas-server-support-yubikey
# Indicates whether this provider should support trusted devices.
# cas.authn.mfa.yubikey.trusted-device-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Attributes to fetch from Mongo (blank by default to force the pac4j legacy behavior).
# cas.authn.mongo.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Name of the database to use for authentication.
# cas.authn.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database instance name.
# cas.authn.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.mongo.host: localhost

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Name of the authentication handler.
# cas.authn.mongo.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Order of authentication handler in chain.
# cas.authn.mongo.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database password for authentication.
# cas.authn.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Attribute that holds the password.
# cas.authn.mongo.password-attribute: password

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.mongo.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.mongo.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.mongo.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.mongo.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.mongo.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database port.
# cas.authn.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Attribute that would be used to establish the authenticated profile.
# cas.authn.mongo.principal-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.mongo.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.mongo.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.mongo.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.mongo.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.mongo.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.mongo.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Whether connections require SSL.
# cas.authn.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database connection timeout.
# cas.authn.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# MongoDb database user for authentication.
# cas.authn.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Attributes that holds the username.
# cas.authn.mongo.username-attribute: username

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbAuthenticationProperties
# Module: cas-server-support-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# The domain controller to retrieve if load balanced. Otherwise retrieve the domain controller as a possible NT or workgroup.
# cas.authn.ntlm.domain-controller: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# Whether NTLM authentication should be enabled and registered with CAS as well.
# cas.authn.ntlm.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# If specified, gets all domain controllers in the specified {@link #domainController} and then filters hosts that match the pattern.
# cas.authn.ntlm.include-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# Indicates how the domain controller should be retrieved, whether matched and filtered by a pattern or retrieved as possible NT or workgroup.
# cas.authn.ntlm.load-balance: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# The name of the authentication handler.
# cas.authn.ntlm.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ntlm.NtlmProperties
# Module: cas-server-support-spnego
# The order of the authentication handler in the chain.
# cas.authn.ntlm.order: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthAccessTokenProperties
# Module: cas-server-support-oauth
# Create access token as JWTs.
# cas.authn.oauth.access-token.create-as-jwt: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.oauth.access-token.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.oauth.access-token.crypto.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto encryption operations are enabled.
# cas.authn.oauth.access-token.crypto.encryption-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.oauth.access-token.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.oauth.access-token.crypto.encryption.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto signing operations are enabled.
# cas.authn.oauth.access-token.crypto.signing-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.oauth.access-token.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.oauth.access-token.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.oauth.access-token.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthAccessTokenProperties
# Module: cas-server-support-oauth
# Hard timeout to kill the access token and expire it.
# cas.authn.oauth.access-token.max-time-to-live-in-seconds: PT28800S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthAccessTokenProperties
# Module: cas-server-support-oauth
# Sliding window for the access token expiration policy. Essentially, this is an idle time out.
# cas.authn.oauth.access-token.time-to-kill-in-seconds: PT7200S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthCodeProperties
# Module: cas-server-support-oauth
# Number of times this code is valid and can be used.
# cas.authn.oauth.code.number-of-uses: 1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthCodeProperties
# Module: cas-server-support-oauth
# Duration in seconds where the code is valid.
# cas.authn.oauth.code.time-to-kill-in-seconds: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.oauth.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.oauth.crypto.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto encryption operations are enabled.
# cas.authn.oauth.crypto.encryption-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.oauth.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.oauth.crypto.encryption.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto signing operations are enabled.
# cas.authn.oauth.crypto.signing-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.oauth.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.oauth.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.oauth.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.authn.oauth.csrf-cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.authn.oauth.csrf-cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.authn.oauth.csrf-cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.authn.oauth.csrf-cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.authn.oauth.csrf-cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.authn.oauth.csrf-cookie.path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.authn.oauth.csrf-cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oauth.CsrfCookieProperties
# Module: cas-server-core-cookie
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.authn.oauth.csrf-cookie.secure: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthDeviceTokenProperties
# Module: cas-server-support-oauth
# Hard timeout to kill the access token and expire it.
# cas.authn.oauth.device-token.max-time-to-live-in-seconds: PT5M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthDeviceTokenProperties
# Module: cas-server-support-oauth
# The device refresh interval. The client should attempt to acquire an access token every few seconds (at a rate specified by interval) by POSTing to the access token endpoint on the server.
# cas.authn.oauth.device-token.refresh-interval: PT15S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthDeviceUserCodeProperties
# Module: cas-server-support-oauth
# Hard timeout to kill the access token and expire it.
# cas.authn.oauth.device-user-code.max-time-to-live-in-seconds: PT1M

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthDeviceUserCodeProperties
# Module: cas-server-support-oauth
# Length of the generated user code.
# cas.authn.oauth.device-user-code.user-code-length: 8

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthGrantsProperties.ResourceOwner
# Module: cas-server-support-oauth
# Whether using the resource-owner grant should enforce authorization rules and per-service policies based on a service parameter is provided as a header outside the normal semantics of the grant and protocol.
# cas.authn.oauth.grants.resource-owner.require-service-header: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthRefreshTokenProperties
# Module: cas-server-support-oauth
# Hard timeout beyond which the refresh token is considered expired.
# cas.authn.oauth.refresh-token.time-to-kill-in-seconds: P14D

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthProperties
# Module: cas-server-support-oauth
# Indicates whether profiles and other session data, collected as part of OAuth flows and requests that are kept by the container session, should be replicated across the cluster using CAS and its own ticket registry. Without this option, OAuth profile data and other related pieces of information should be manually replicated via means and libraries outside of CAS.
# cas.authn.oauth.replicate-sessions: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaCoreProperties
# Module: cas-server-support-oauth-uma
# UMA issuer.
# cas.authn.oauth.uma.core.issuer: http://localhost:8080/cas

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaPermissionTicketProperties
# Module: cas-server-support-oauth-uma
# Hard timeout to kill the access token and expire it.
# cas.authn.oauth.uma.permission-ticket.max-time-to-live-in-seconds: PT3M

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.oauth.uma.requesting-party-token.jwks-file.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaRequestingPartyTokenProperties
# Module: cas-server-support-oauth-uma
# Hard timeout to kill the access token and expire it.
# cas.authn.oauth.uma.requesting-party-token.max-time-to-live-in-seconds: PT3M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.oauth.uma.resource-set.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.oauth.uma.resource-set.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.oauth.uma.resource-set.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.oauth.uma.resource-set.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.oauth.uma.resource-set.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.oauth.uma.resource-set.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.oauth.uma.resource-set.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The JDBC driver used to connect to the database.
# cas.authn.oauth.uma.resource-set.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.oauth.uma.resource-set.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Used to specify number of rows to be fetched in a select query.
# cas.authn.oauth.uma.resource-set.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Allow hibernate to generate query statistics.
# cas.authn.oauth.uma.resource-set.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The SQL query to be executed to test the validity of connections.
# cas.authn.oauth.uma.resource-set.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.oauth.uma.resource-set.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.oauth.uma.resource-set.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.oauth.uma.resource-set.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.oauth.uma.resource-set.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The database connection password.
# cas.authn.oauth.uma.resource-set.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.oauth.uma.resource-set.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.oauth.uma.resource-set.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.oauth.uma.resource-set.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.oauth.uma.resource-set.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.oauth.uma.resource-set.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.oauth.uma.resource-set.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.oauth.uma.resource-set.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.oauth.uma.resource-set.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The database connection URL.
# cas.authn.oauth.uma.resource-set.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.uma.UmaResourceSetJpaProperties
# Module: cas-server-support-oauth-uma
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.oauth.uma.resource-set.jpa.user: sa

# Required: false
# Type: org.apereo.cas.configuration.model.support.oauth.OAuthProperties$UserProfileViewTypes
# Owner: org.apereo.cas.configuration.model.support.oauth.OAuthProperties
# Module: cas-server-support-oauth
# User profile view type determines how the final user profile should be rendered once an access token is "validated".
Available values are as follows:
<ul><li>{@code NESTED}: Return and render the user profile view in nested mode.
This is the default option, most usually.</li><li>{@code FLAT}: Return and render the user profile view in flattened mode
where all attributes are flattened down to one level only.</li></ul>
# cas.authn.oauth.user-profile-view-type: NESTED

# Required: false
# Type: java.util.List
# Owner: 
# Module: 
# 
# cas.authn.oidc.claim-types-supported: 
# Deprecation Level: ERROR
# Deprecation Reason: claim-types-supported setting is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.claim-types-supported

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.claims: 
# Deprecation Level: ERROR
# Deprecation Reason: claims setting is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.claims

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.claims-map: 
# Deprecation Level: ERROR
# Deprecation Reason: claims-map is now moved into the core namespace.
# Deprecation Replacement: cas.authn.oidc.core.claims-map

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcCoreProperties
# Module: cas-server-support-oidc
# Map fixed claims to CAS attributes. Key is the existing claim name for a scope and value is the new attribute that should take its place and value.
# cas.authn.oidc.core.claims-map: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcCoreProperties
# Module: cas-server-support-oidc
# Whether dynamic registration operates in {@code OPEN} or {@code PROTECTED} mode.
# cas.authn.oidc.core.dynamic-client-registration-mode: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcCoreProperties
# Module: cas-server-support-oidc
# OIDC issuer.
# cas.authn.oidc.core.issuer: http://localhost:8080/cas/oidc

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcCoreProperties
# Module: cas-server-support-oidc
# Skew value used to massage the authentication issue instance.
# cas.authn.oidc.core.skew: PT5M

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcCoreProperties
# Module: cas-server-support-oidc
# Mapping of user-defined scopes. Key is the new scope name and value is a comma-separated list of claims mapped to the scope.
# cas.authn.oidc.core.user-defined-scopes: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported claim types.
# cas.authn.oidc.discovery.claim-types-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# List of supported claims.
# cas.authn.oidc.discovery.claims: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# List of PKCE code challenge methods supported.
# cas.authn.oidc.discovery.code-challenge-methods-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported grant types.
# cas.authn.oidc.discovery.grant-types-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported algorithms for id token encryption.
# cas.authn.oidc.discovery.id-token-encryption-alg-values-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported encoding strategies for id token encryption.
# cas.authn.oidc.discovery.id-token-encryption-encoding-values-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported algorithms for id token signing.
# cas.authn.oidc.discovery.id-token-signing-alg-values-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported authentication methods for introspection.
# cas.authn.oidc.discovery.introspection-supported-authentication-methods: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported response types.
# cas.authn.oidc.discovery.response-types-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# List of supported scopes.
# cas.authn.oidc.discovery.scopes: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# List of supported subject types.
# cas.authn.oidc.discovery.subject-types: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# List of client authentication methods supported by token endpoint.
# cas.authn.oidc.discovery.token-endpoint-auth-methods-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported algorithms for user-info encryption.
# cas.authn.oidc.discovery.user-info-encryption-alg-values-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported encoding strategies for user-info encryption.
# cas.authn.oidc.discovery.user-info-encryption-encoding-values-supported: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcDiscoveryProperties
# Module: cas-server-support-oidc
# Supported algorithms for user-info signing.
# cas.authn.oidc.discovery.user-info-signing-alg-values-supported: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.dynamic-client-registration-mode: 
# Deprecation Level: ERROR
# Deprecation Reason: dynamic-client-registration-mode is now moved into the core namespace.
# Deprecation Replacement: cas.authn.oidc.core.dynamic-client-registration-mode

# Required: false
# Type: java.util.List
# Owner: 
# Module: 
# 
# cas.authn.oidc.grant-types-supported: 
# Deprecation Level: ERROR
# Deprecation Reason: grant-types-supported setting is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.grant-types-supported

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.issuer: 
# Deprecation Level: ERROR
# Deprecation Reason: issuer is now moved into the core namespace.
# Deprecation Replacement: cas.authn.oidc.core.issuer

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# Timeout that indicates how long should the JWKS file be kept in cache.
# cas.authn.oidc.jwks.jwks-cache-in-minutes: 60

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# Path to the JWKS file resource used to handle signing/encryption of authentication tokens.
# cas.authn.oidc.jwks.jwks-file: file:/etc/cas/config/keystore.jwks

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# The key size for the generated jwks. This is an algorithm-specific metric, such as modulus length, specified in number of bits. <p> If the keystore type is {@code EC}, the key size defined here should switch to one of {@code 256}, {@code 384} or {@code 521}. If using  {@code EC}, then the size should match the number of bits required.
# cas.authn.oidc.jwks.jwks-key-size: 2048

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# The type of the JWKS used to handle signing/encryption of authentication tokens. Accepted values are {@code RSA} or {@code EC}.
# cas.authn.oidc.jwks.jwks-type: RSA

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.RestfulOidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.oidc.jwks.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.RestfulOidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.oidc.jwks.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.RestfulOidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.oidc.jwks.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.RestfulOidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.oidc.jwks.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.RestfulOidcJsonWebKeystoreProperties
# Module: cas-server-support-oidc
# The endpoint URL to contact and retrieve attributes.
# cas.authn.oidc.jwks.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcLogoutProperties
# Module: cas-server-support-oidc
# Whether the back-channel logout is supported.
# cas.authn.oidc.logout.backchannel-logout-supported: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcLogoutProperties
# Module: cas-server-support-oidc
# Whether the front-channel logout is supported.
# cas.authn.oidc.logout.frontchannel-logout-supported: true

# Required: false
# Type: java.util.List
# Owner: 
# Module: 
# 
# cas.authn.oidc.response-types-supported: 
# Deprecation Level: ERROR
# Deprecation Reason: response-types-supported setting is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.response-types-supported

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.scopes: 
# Deprecation Level: ERROR
# Deprecation Reason: scopes settings is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.scopes

# Required: false
# Type: java.util.List
# Owner: 
# Module: 
# 
# cas.authn.oidc.subject-types: 
# Deprecation Level: ERROR
# Deprecation Reason: subject-types setting is now moved into the discovery namespace.
# Deprecation Replacement: cas.authn.oidc.discovery.subject-types

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.oidc.user-defined-scopes: 
# Deprecation Level: ERROR
# Deprecation Reason: user-defined-scopes is now moved into the core namespace.
# Deprecation Replacement: cas.authn.oidc.core.user-defined-scopes

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Groovy
# Module: cas-server-support-oidc
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.oidc.webfinger.user-info.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Rest
# Module: cas-server-support-oidc
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.oidc.webfinger.user-info.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Rest
# Module: cas-server-support-oidc
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.oidc.webfinger.user-info.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Rest
# Module: cas-server-support-oidc
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.oidc.webfinger.user-info.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Rest
# Module: cas-server-support-oidc
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.oidc.webfinger.user-info.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.oidc.OidcWebFingerProperties.Rest
# Module: cas-server-support-oidc
# The endpoint URL to contact and retrieve attributes.
# cas.authn.oidc.webfinger.user-info.rest.url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Connection timeout in milliseconds.
# cas.authn.okta.connection-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential and as such lend themselves to be tried and tested during the authentication handler selection phase. The credential criteria may be one of the following options:<ul> <li>1) A regular expression pattern that is tested against the credential identifier.</li> <li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li> <li>3) Path to an external Groovy script that implements the same interface.</li> </ul>
# cas.authn.okta.credential-criteria: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# The name of the authentication handler.
# cas.authn.okta.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# The order of this authentication handler in the chain.
# cas.authn.okta.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Okta domain.
# cas.authn.okta.organization-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.okta.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.okta.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.okta.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.okta.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.okta.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.okta.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.okta.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.okta.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.okta.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.okta.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.okta.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the hostname.
# cas.authn.okta.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy password.
# cas.authn.okta.proxy-password: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy port. Negative/zero values should deactivate the proxy configuration for the http client.
# cas.authn.okta.proxy-port: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Send requests via a proxy; define the proxy username.
# cas.authn.okta.proxy-username: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.okta.OktaAuthenticationProperties
# Module: cas-server-support-okta-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.okta.state: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.openid.OpenIdProperties
# Module: cas-server-support-openid-webflow
# Whether relying party identifies should be enforced. This is used during the realm verification process. @deprecated Since 6.2
# cas.authn.openid.enforce-rp-id: false
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.openid.OpenIdProperties
# Module: cas-server-support-openid-webflow
# Name of the underlying authentication handler. @deprecated Since 6.2
# cas.authn.openid.name: 
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.openid.OpenIdProperties
# Module: cas-server-support-openid-webflow
# Order of the authentication handler in the chain. @deprecated Since 6.2
# cas.authn.openid.order: 
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.authn.openid.principal.active-attribute-repository-ids: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.authn.openid.principal.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.authn.openid.principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.authn.openid.principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.openid.principal.principal-resolution-failure-fatal: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.openid.principal.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.authn.openid.principal.use-existing-principal-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.bitbucket.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.bitbucket.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.bitbucket.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.bitbucket.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.bitbucket.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.bitbucket.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.bitbucket.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.bitbucket.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.bitbucket.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationBitBucketProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.bitbucket.secret: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties
# Module: cas-server-support-pac4j-webflow
# Settings that deal with having CAS Servers as an external delegated-to authentication provider.
# cas.authn.pac4j.cas: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.cas[].auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.cas[].callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.cas[].callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.cas[].client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.cas[].css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.cas[].display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.cas[].enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# The CAS server login url.
# cas.authn.pac4j.cas[].login-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.cas[].principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.cas.Pac4jCasClientProperties
# Module: cas-server-support-pac4j-webflow
# CAS protocol to use.
Acceptable values are {@code CAS10, CAS20, CAS20_PROXY, CAS30, CAS30_PROXY, SAML}.
# cas.authn.pac4j.cas[].protocol: CAS20

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# Decide if cookie paths should be automatically configured based on the application context path, when the cookie path is not configured.
# cas.authn.pac4j.cookie.auto-configure-cookie-path: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.authn.pac4j.cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.authn.pac4j.cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# Determine whether cookie settings should be enabled to track delgated authentication choices and identity providers.
# cas.authn.pac4j.cookie.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.authn.pac4j.cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.authn.pac4j.cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.authn.pac4j.cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.authn.pac4j.cookie.path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.authn.pac4j.cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCookieProperties
# Module: cas-server-support-pac4j-webflow
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.authn.pac4j.cookie.secure: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# Whether initialization of delegated identity providers should be done eagerly typically during startup.
# cas.authn.pac4j.core.lazy-init: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# The name of the authentication handler in CAS used for delegation.
# cas.authn.pac4j.core.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# Order of the authentication handler in the chain.
# cas.authn.pac4j.core.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.core.principal-attribute-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# Indicates whether profiles and other session data, collected as part of pac4j flows and requests that are kept by the container session, should be replicated across the cluster using CAS and its own ticket registry. Without this option, profile data and other related pieces of information should be manually replicated via means and libraries outside of CAS.
# cas.authn.pac4j.core.replicate-sessions: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationCoreProperties
# Module: cas-server-support-pac4j-webflow
# When constructing the final user profile from the delegated provider, determines if the provider id should be combined with the principal id.
# cas.authn.pac4j.core.typed-id-used: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.dropbox.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.dropbox.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.dropbox.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.dropbox.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.dropbox.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.dropbox.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.dropbox.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.dropbox.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.dropbox.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationDropboxProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.dropbox.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.facebook.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.facebook.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.facebook.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.facebook.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.facebook.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.facebook.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.facebook.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# Custom fields to include in the request.
# cas.authn.pac4j.facebook.fields: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.facebook.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.facebook.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# The requested scope.
# cas.authn.pac4j.facebook.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFacebookProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.facebook.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.foursquare.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.foursquare.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.foursquare.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.foursquare.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.foursquare.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.foursquare.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.foursquare.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.foursquare.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.foursquare.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationFoursquareProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.foursquare.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.github.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.github.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.github.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.github.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.github.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.github.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.github.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.github.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.github.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# The requested scope from the provider.  The default scope is {@code user}, i.e. {@code read/write} access to the GitHub user account.  For a full list of possible scopes, <a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/">see this</a>).
# cas.authn.pac4j.github.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGitHubProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.github.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.google.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.google.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.google.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.google.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.google.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.google.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.google.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.google.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.google.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# The requested scope.
# cas.authn.pac4j.google.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGoogleProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.google.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.hi-org-server.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.hi-org-server.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.hi-org-server.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.hi-org-server.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.hi-org-server.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.hi-org-server.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.hi-org-server.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.hi-org-server.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.hi-org-server.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# The requested scope.
# cas.authn.pac4j.hi-org-server.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationHiOrgServerProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.hi-org-server.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.linked-in.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.linked-in.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.linked-in.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.linked-in.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.linked-in.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.linked-in.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.linked-in.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.linked-in.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.linked-in.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# The requested scope.
# cas.authn.pac4j.linked-in.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationLinkedInProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.linked-in.secret: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties
# Module: cas-server-support-pac4j-webflow
# Settings that deal with having OAuth2-capable providers as an external delegated-to authentication provider.
# cas.authn.pac4j.oauth2: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Authorization endpoint of the provider.
# cas.authn.pac4j.oauth2[].auth-url: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oauth2[].auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oauth2[].callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oauth2[].callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oauth2[].client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oauth2[].css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters in form of key-value pairs sent along in authZ requests, etc.
# cas.authn.pac4j.oauth2[].custom-params: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oauth2[].display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oauth2[].enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oauth2[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oauth2[].principal-attribute-id: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Profile attributes to request and collect in form of key-value pairs.
# cas.authn.pac4j.oauth2[].profile-attrs: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Profile path portion of the profile endpoint of the provider.
# cas.authn.pac4j.oauth2[].profile-path: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Profile endpoint of the provider.
# cas.authn.pac4j.oauth2[].profile-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Http method to use when asking for profile.
# cas.authn.pac4j.oauth2[].profile-verb: POST

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Response type determines the authentication flow on the Authentication Server.
# cas.authn.pac4j.oauth2[].response-type: code

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# The scope requested from the identity provider.
# cas.authn.pac4j.oauth2[].scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oauth2[].secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties
# Module: cas-server-support-pac4j-webflow
# Token endpoint of the provider.
# cas.authn.pac4j.oauth2[].token-url: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties
# Module: cas-server-support-pac4j-webflow
# Settings that deal with having OpenID Connect Providers as an external delegated-to authentication provider.
# cas.authn.pac4j.oidc: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oidc[].apple.auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oidc[].apple.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oidc[].apple.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oidc[].apple.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Read timeout of the OIDC client.
# cas.authn.pac4j.oidc[].apple.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oidc[].apple.css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters to send along in authZ requests, etc.
# cas.authn.pac4j.oidc[].apple.custom-params: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Disable PKCE support for the provider.
# cas.authn.pac4j.oidc[].apple.disable-pkce: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The discovery endpoint to locate the provide metadata.
# cas.authn.pac4j.oidc[].apple.discovery-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oidc[].apple.display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oidc[].apple.enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Checks if sessions expire with token expiration.
# cas.authn.pac4j.oidc[].apple.expire-session-with-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oidc[].apple.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Logout url used for this provider.
# cas.authn.pac4j.oidc[].apple.logout-url: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# List arbitrary mappings of claims when fetching user profiles.
Uses a "directed list" where the allowed
syntax would be {@code claim->attribute}.
# cas.authn.pac4j.oidc[].apple.mapped-claims: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Clock skew in order to account for drift, when validating id tokens.
# cas.authn.pac4j.oidc[].apple.max-clock-skew: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The JWS algorithm to use forcefully when validating ID tokens.
If none is defined, the first algorithm from metadata will be used.
# cas.authn.pac4j.oidc[].apple.preferred-jws-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oidc[].apple.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Private key obtained from Apple.
Must point to a resource that resolved to an elliptic curve (EC) private key.
# cas.authn.pac4j.oidc[].apple.private-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The identifier for the private key.
Usually the 10 character Key ID of the private key you create
in Apple.
# cas.authn.pac4j.oidc[].apple.private-key-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Connect timeout of the OIDC client.
# cas.authn.pac4j.oidc[].apple.read-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response mode specifies how the result of the authorization request is formatted.
For backward compatibility the default value is empty, which means the default pac4j (empty) response mode is used.
Possible values includes "query", "fragment", "form_post", or "web_message"
# cas.authn.pac4j.oidc[].apple.response-mode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response type tells the authorization server which grant to execute.
For backward compatibility the default value is empty, which means the default pac4j ("code") response type is used.
Possibles values includes "code", "token" or "id_token".
# cas.authn.pac4j.oidc[].apple.response-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested scope(s).
# cas.authn.pac4j.oidc[].apple.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oidc[].apple.secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Apple team identifier.
Usually, 10 character string given to you by Apple.
# cas.authn.pac4j.oidc[].apple.team-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Client secret expiration timeout.
# cas.authn.pac4j.oidc[].apple.timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Default time period advance (in seconds) for considering an access token expired.
# cas.authn.pac4j.oidc[].apple.token-expiration-advance: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAppleOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether an initial nonce should be to used
initially for replay attack mitigation.
# cas.authn.pac4j.oidc[].apple.use-nonce: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oidc[].azure.auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oidc[].azure.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oidc[].azure.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oidc[].azure.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Read timeout of the OIDC client.
# cas.authn.pac4j.oidc[].azure.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oidc[].azure.css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters to send along in authZ requests, etc.
# cas.authn.pac4j.oidc[].azure.custom-params: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Disable PKCE support for the provider.
# cas.authn.pac4j.oidc[].azure.disable-pkce: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The discovery endpoint to locate the provide metadata.
# cas.authn.pac4j.oidc[].azure.discovery-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oidc[].azure.display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oidc[].azure.enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Checks if sessions expire with token expiration.
# cas.authn.pac4j.oidc[].azure.expire-session-with-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oidc[].azure.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Logout url used for this provider.
# cas.authn.pac4j.oidc[].azure.logout-url: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# List arbitrary mappings of claims when fetching user profiles.
Uses a "directed list" where the allowed
syntax would be {@code claim->attribute}.
# cas.authn.pac4j.oidc[].azure.mapped-claims: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Clock skew in order to account for drift, when validating id tokens.
# cas.authn.pac4j.oidc[].azure.max-clock-skew: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The JWS algorithm to use forcefully when validating ID tokens.
If none is defined, the first algorithm from metadata will be used.
# cas.authn.pac4j.oidc[].azure.preferred-jws-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oidc[].azure.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Connect timeout of the OIDC client.
# cas.authn.pac4j.oidc[].azure.read-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response mode specifies how the result of the authorization request is formatted.
For backward compatibility the default value is empty, which means the default pac4j (empty) response mode is used.
Possible values includes "query", "fragment", "form_post", or "web_message"
# cas.authn.pac4j.oidc[].azure.response-mode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response type tells the authorization server which grant to execute.
For backward compatibility the default value is empty, which means the default pac4j ("code") response type is used.
Possibles values includes "code", "token" or "id_token".
# cas.authn.pac4j.oidc[].azure.response-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested scope(s).
# cas.authn.pac4j.oidc[].azure.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oidc[].azure.secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Azure AD tenant name.
After tenant is configured, {@link #getDiscoveryUri()} property will be overridden.
<p>
Azure AD tenant name can take 4 different values:
<ul>
<li>{@code common}: Users with both a personal Microsoft account and a work or
school account from Azure AD can sign in. </li>
<li>{@code organizations}: Only users with work or school accounts from Azure
AD can sign in.</li>
<li>{@code consumers}: Only users with a personal Microsoft account can sign
in.</li>
<li>Specific tenant domain name or ID: Only user with account under that the
specified tenant can login</li>
</ul>
# cas.authn.pac4j.oidc[].azure.tenant: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Default time period advance (in seconds) for considering an access token expired.
# cas.authn.pac4j.oidc[].azure.token-expiration-advance: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether an initial nonce should be to used
initially for replay attack mitigation.
# cas.authn.pac4j.oidc[].azure.use-nonce: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oidc[].generic.auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oidc[].generic.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oidc[].generic.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oidc[].generic.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Read timeout of the OIDC client.
# cas.authn.pac4j.oidc[].generic.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oidc[].generic.css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters to send along in authZ requests, etc.
# cas.authn.pac4j.oidc[].generic.custom-params: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Disable PKCE support for the provider.
# cas.authn.pac4j.oidc[].generic.disable-pkce: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The discovery endpoint to locate the provide metadata.
# cas.authn.pac4j.oidc[].generic.discovery-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oidc[].generic.display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oidc[].generic.enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Checks if sessions expire with token expiration.
# cas.authn.pac4j.oidc[].generic.expire-session-with-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oidc[].generic.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Logout url used for this provider.
# cas.authn.pac4j.oidc[].generic.logout-url: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# List arbitrary mappings of claims when fetching user profiles.
Uses a "directed list" where the allowed
syntax would be {@code claim->attribute}.
# cas.authn.pac4j.oidc[].generic.mapped-claims: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Clock skew in order to account for drift, when validating id tokens.
# cas.authn.pac4j.oidc[].generic.max-clock-skew: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The JWS algorithm to use forcefully when validating ID tokens.
If none is defined, the first algorithm from metadata will be used.
# cas.authn.pac4j.oidc[].generic.preferred-jws-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oidc[].generic.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Connect timeout of the OIDC client.
# cas.authn.pac4j.oidc[].generic.read-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response mode specifies how the result of the authorization request is formatted.
For backward compatibility the default value is empty, which means the default pac4j (empty) response mode is used.
Possible values includes "query", "fragment", "form_post", or "web_message"
# cas.authn.pac4j.oidc[].generic.response-mode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response type tells the authorization server which grant to execute.
For backward compatibility the default value is empty, which means the default pac4j ("code") response type is used.
Possibles values includes "code", "token" or "id_token".
# cas.authn.pac4j.oidc[].generic.response-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested scope(s).
# cas.authn.pac4j.oidc[].generic.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oidc[].generic.secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Default time period advance (in seconds) for considering an access token expired.
# cas.authn.pac4j.oidc[].generic.token-expiration-advance: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether an initial nonce should be to used
initially for replay attack mitigation.
# cas.authn.pac4j.oidc[].generic.use-nonce: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oidc[].google.auto-redirect: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oidc[].google.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oidc[].google.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oidc[].google.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Read timeout of the OIDC client.
# cas.authn.pac4j.oidc[].google.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oidc[].google.css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters to send along in authZ requests, etc.
# cas.authn.pac4j.oidc[].google.custom-params: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Disable PKCE support for the provider.
# cas.authn.pac4j.oidc[].google.disable-pkce: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The discovery endpoint to locate the provide metadata.
# cas.authn.pac4j.oidc[].google.discovery-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oidc[].google.display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oidc[].google.enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Checks if sessions expire with token expiration.
# cas.authn.pac4j.oidc[].google.expire-session-with-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oidc[].google.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Logout url used for this provider.
# cas.authn.pac4j.oidc[].google.logout-url: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# List arbitrary mappings of claims when fetching user profiles.
Uses a "directed list" where the allowed
syntax would be {@code claim->attribute}.
# cas.authn.pac4j.oidc[].google.mapped-claims: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Clock skew in order to account for drift, when validating id tokens.
# cas.authn.pac4j.oidc[].google.max-clock-skew: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The JWS algorithm to use forcefully when validating ID tokens.
If none is defined, the first algorithm from metadata will be used.
# cas.authn.pac4j.oidc[].google.preferred-jws-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oidc[].google.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Connect timeout of the OIDC client.
# cas.authn.pac4j.oidc[].google.read-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response mode specifies how the result of the authorization request is formatted.
For backward compatibility the default value is empty, which means the default pac4j (empty) response mode is used.
Possible values includes "query", "fragment", "form_post", or "web_message"
# cas.authn.pac4j.oidc[].google.response-mode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response type tells the authorization server which grant to execute.
For backward compatibility the default value is empty, which means the default pac4j ("code") response type is used.
Possibles values includes "code", "token" or "id_token".
# cas.authn.pac4j.oidc[].google.response-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested scope(s).
# cas.authn.pac4j.oidc[].google.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oidc[].google.secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Default time period advance (in seconds) for considering an access token expired.
# cas.authn.pac4j.oidc[].google.token-expiration-advance: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.BasePac4jOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether an initial nonce should be to used
initially for replay attack mitigation.
# cas.authn.pac4j.oidc[].google.use-nonce: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.oidc[].keycloak.auto-redirect: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Keycloak base URL used to construct metadata discovery URI.
# cas.authn.pac4j.oidc[].keycloak.base-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.oidc[].keycloak.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.oidc[].keycloak.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.oidc[].keycloak.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Read timeout of the OIDC client.
# cas.authn.pac4j.oidc[].keycloak.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.oidc[].keycloak.css-class: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Custom parameters to send along in authZ requests, etc.
# cas.authn.pac4j.oidc[].keycloak.custom-params: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Disable PKCE support for the provider.
# cas.authn.pac4j.oidc[].keycloak.disable-pkce: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The discovery endpoint to locate the provide metadata.
# cas.authn.pac4j.oidc[].keycloak.discovery-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.oidc[].keycloak.display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.oidc[].keycloak.enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Checks if sessions expire with token expiration.
# cas.authn.pac4j.oidc[].keycloak.expire-session-with-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.oidc[].keycloak.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Logout url used for this provider.
# cas.authn.pac4j.oidc[].keycloak.logout-url: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# List arbitrary mappings of claims when fetching user profiles.
Uses a "directed list" where the allowed
syntax would be {@code claim->attribute}.
# cas.authn.pac4j.oidc[].keycloak.mapped-claims: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Clock skew in order to account for drift, when validating id tokens.
# cas.authn.pac4j.oidc[].keycloak.max-clock-skew: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The JWS algorithm to use forcefully when validating ID tokens.
If none is defined, the first algorithm from metadata will be used.
# cas.authn.pac4j.oidc[].keycloak.preferred-jws-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.oidc[].keycloak.principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Connect timeout of the OIDC client.
# cas.authn.pac4j.oidc[].keycloak.read-timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Keycloak realm used to construct metadata discovery URI.
# cas.authn.pac4j.oidc[].keycloak.realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response mode specifies how the result of the authorization request is formatted.
For backward compatibility the default value is empty, which means the default pac4j (empty) response mode is used.
Possible values includes "query", "fragment", "form_post", or "web_message"
# cas.authn.pac4j.oidc[].keycloak.response-mode: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The response type tells the authorization server which grant to execute.
For backward compatibility the default value is empty, which means the default pac4j ("code") response type is used.
Possibles values includes "code", "token" or "id_token".
# cas.authn.pac4j.oidc[].keycloak.response-type: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested scope(s).
# cas.authn.pac4j.oidc[].keycloak.scope: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.oidc[].keycloak.secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Default time period advance (in seconds) for considering an access token expired.
# cas.authn.pac4j.oidc[].keycloak.token-expiration-advance: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jKeyCloakOidcClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether an initial nonce should be to used
initially for replay attack mitigation.
# cas.authn.pac4j.oidc[].keycloak.use-nonce: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.paypal.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.paypal.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.paypal.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.paypal.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.paypal.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.paypal.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.paypal.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.paypal.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.paypal.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationPayPalProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.paypal.secret: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationGroovyProvisioningProperties
# Module: cas-server-support-pac4j
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.pac4j.provisioning.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProvisioningProperties
# Module: cas-server-support-pac4j
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.pac4j.provisioning.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProvisioningProperties
# Module: cas-server-support-pac4j
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.pac4j.provisioning.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProvisioningProperties
# Module: cas-server-support-pac4j
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.pac4j.provisioning.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProvisioningProperties
# Module: cas-server-support-pac4j
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.pac4j.provisioning.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProvisioningProperties
# Module: cas-server-support-pac4j
# The endpoint URL to contact and retrieve attributes.
# cas.authn.pac4j.provisioning.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.pac4j.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.pac4j.rest.basic-auth-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# Control the expiration policy of the cache that holds on the results from the rest api.
# cas.authn.pac4j.rest.cache-duration: PT8H

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.pac4j.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.pac4j.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationRestfulProperties
# Module: cas-server-support-pac4j-webflow
# The endpoint URL to contact and retrieve attributes.
# cas.authn.pac4j.rest.url: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties>
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties
# Module: cas-server-support-pac4j-webflow
# Settings that deal with having SAML2 IdPs as an external delegated-to authentication provider.
# cas.authn.pac4j.saml: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.pac4j.saml[0].single-logout-requests: 
# Deprecation Level: ERROR
# Deprecation Reason: It is a duplication of cas.authn.pac4j.saml[0].sign-service-provider-logout-request.
# Deprecation Replacement: cas.authn.pac4j.saml[0].sign-service-provider-logout-request

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Maximum skew in seconds between SP and IDP clocks.
This skew is added onto the {@code NotOnOrAfter} field in seconds
for the SAML response validation.
# cas.authn.pac4j.saml[].accepted-skew: PT300S

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the signature validation should be disabled.
Never set this property to {@code true} in production.
# cas.authn.pac4j.saml[].all-signature-validation-disabled: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Allows the SAML client to select a specific ACS url from the metadata, if defined.
A negative value de-activates the selection process and is the default.
# cas.authn.pac4j.saml[].assertion-consumer-service-index: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# AttributeConsumingServiceIndex attribute of AuthnRequest element.
The given index points out a specific AttributeConsumingService structure, declared into the
Service Provider (SP)'s metadata, to be used to specify all the attributes that the Service Provider
is asking to be released within the authentication assertion returned by the Identity Provider (IdP).
This attribute won't be sent with the request unless a positive value (including 0) is defined.
# cas.authn.pac4j.saml[].attribute-consuming-service-index: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Requested authentication context class in authn requests.
# cas.authn.pac4j.saml[].authn-context-class-ref: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Specifies the comparison rule that should be used to evaluate the specified authentication methods.
For example, if exact is specified, the authentication method used must match one of the authentication
methods specified by the AuthnContextClassRef elements.
AuthContextClassRef element require comparison rule to be used to evaluate the specified
authentication methods. If not explicitly specified "exact" rule will be used by default.
Other acceptable values are minimum, maximum, better.
# cas.authn.pac4j.saml[].authn-context-comparison-type: exact

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.saml[].auto-redirect: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Collection of signing signature blocked algorithms, if any, to override the global defaults.
# cas.authn.pac4j.saml[].blocked-signature-signing-algorithms: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow
back to the CAS server one the identity
provider is successfully done. This may be
used at the discretion of the client and its type
to build service parameters, redirect URIs, etc.
If none is specified, the CAS server's login endpoint
will be used as the basis of the final callback url.
# cas.authn.pac4j.saml[].callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties.CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved.
Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.saml[].callback-url-type: QUERY_PARAMETER

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Define the validity period for the certificate
in number of days. The end-date of the certificate
is controlled by this setting, when defined as a value
greater than zero.
# cas.authn.pac4j.saml[].certificate-expiration-days: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# A name to append to signing certificates generated.
The named part appended can be useful to identify for which clientName it was generated
If no name is provided the default certificate name will be used.
# cas.authn.pac4j.saml[].certificate-name-to-append: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Certificate signature algorithm to use
when generating the certificate.
# cas.authn.pac4j.saml[].certificate-signature-alg: SHA1WithRSA

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness.
This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-")
is added to the "class" attribute of the redirect link on the login page, to allow for
custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.saml[].client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.saml[].css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The destination binding to use
when creating authentication requests.
# cas.authn.pac4j.saml[].destination-binding: urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client
for decoration and client presentation purposes.
If left blank, the client original name would be used by default.
# cas.authn.pac4j.saml[].display-name: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered
active and enabled for integration purposes.
# cas.authn.pac4j.saml[].enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether authentication requests should be tagged as forced auth.
# cas.authn.pac4j.saml[].force-auth: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Force generation of the keystore.
# cas.authn.pac4j.saml[].force-keystore-generation: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Attribute friendly name.
# cas.authn.pac4j.saml[].friendly-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The metadata location of the identity provider that is to handle authentications.
# cas.authn.pac4j.saml[].identity-provider-metadata-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The key alias used in the keystore.
# cas.authn.pac4j.saml[].keystore-alias: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The password to use when generating the SP/CAS keystore.
# cas.authn.pac4j.saml[].keystore-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Location of the keystore to use and generate the SP/CAS keystore.
# cas.authn.pac4j.saml[].keystore-path: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Describes the map of attributes that are to be fetched from the credential (map keys)
and then transformed/renamed using map values before they are put into a profile.
An example might be to fetch {@code givenName} from credential and rename it to {@code urn:oid:2.5.4.42} or vice versa.
Note that this setting only applies to attribute names, and not friendly-names.
List arbitrary mappings of claims. Uses a "directed list" where the allowed
syntax would be {@code givenName->urn:oid:2.5.4.42}.
# cas.authn.pac4j.saml[].mapped-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Once you have an authenticated session on the identity provider, usually it won't prompt you again to enter your
credentials and it will automatically generate a new assertion for you. By default, the SAML client
will accept assertions based on a previous authentication for one hour.
You can adjust this behavior by modifying this setting. The unit of time here is seconds.
# cas.authn.pac4j.saml[].maximum-authentication-lifetime: PT3600S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Factory implementing this interface provides services for storing and retrieval of SAML messages for
e.g. verification of retrieved responses. The default factory is an always empty store.
You may choose {@code org.pac4j.saml.store.HttpSessionStore} instead which allows SAML messages to be stored in a distributed session store
specially required for high availability deployments and validation operations.
# cas.authn.pac4j.saml[].message-store-factory: org.pac4j.saml.store.EmptyStoreFactory

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Attribute name.
# cas.authn.pac4j.saml[].name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Attribute name format.
# cas.authn.pac4j.saml[].name-format: urn:oasis:names:tc:SAML:2.0:attrname-format:uri

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Flag to indicate whether the allow-create flags
for nameid policies should be set to true, false or ignored/defined.
# cas.authn.pac4j.saml[].name-id-policy-allow-create: TRUE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# NameID policy to request in the authentication requests.
# cas.authn.pac4j.saml[].name-id-policy-format: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether authentication requests should be tagged as passive.
# cas.authn.pac4j.saml[].passive: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.saml[].principal-attribute-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The attribute found in the saml response
that may be used to establish the authenticated
user and build a profile for CAS.
# cas.authn.pac4j.saml[].principal-id-attribute: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The password to use when generating the private key for the SP/CAS keystore.
# cas.authn.pac4j.saml[].private-key-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Provider name set for the saml authentication request.
Sets the human-readable name of the requester for use by
the presenter's user agent or the identity provider.
# cas.authn.pac4j.saml[].provider-name: 

# Required: false
# Type: java.util.List<ServiceProviderRequestedAttribute>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# List of attributes requested by the service provider
that would be put into the service provider metadata.
# cas.authn.pac4j.saml[].requested-attributes: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether this attribute is required and should
be marked so in the metadata.
# cas.authn.pac4j.saml[].required: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The entity id of the SP/CAS that is used in the SP metadata generation process.
# cas.authn.pac4j.saml[].service-provider-entity-id: https://apereo.org/cas/samlsp

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Location of the SP metadata to use and generate.
# cas.authn.pac4j.saml[].service-provider-metadata-path: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether or not the authnRequest should be signed.
# cas.authn.pac4j.saml[].sign-authn-request: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether or not the Logout Request sent from the SP should be signed.
# cas.authn.pac4j.saml[].sign-service-provider-logout-request: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether or not SAML SP metadata should be signed when generated.
# cas.authn.pac4j.saml[].sign-service-provider-metadata: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Collection of signing signature algorithms, if any, to override the global defaults.
# cas.authn.pac4j.saml[].signature-algorithms: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# The signing signature canonicalization algorithm, if any, to override the global defaults.
# cas.authn.pac4j.saml[].signature-canonicalization-algorithm: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Collection of signing signature reference digest methods, if any, to override the global defaults.
# cas.authn.pac4j.saml[].signature-reference-digest-methods: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether name qualifiers should be produced
in the final saml response.
# cas.authn.pac4j.saml[].use-name-qualifier: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether metadata should be marked to request sign assertions.
# cas.authn.pac4j.saml[].wants-assertions-signed: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties
# Module: cas-server-support-pac4j-webflow
# Whether a response has to be mandatory signed.
# cas.authn.pac4j.saml[].wants-responses-signed: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.twitter.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.twitter.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.twitter.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.twitter.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.twitter.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.twitter.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.twitter.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.twitter.id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# Set to true to request the user's email address from the Twitter API. For this to have an effect it must first be enabled in the Twitter developer console.
# cas.authn.pac4j.twitter.include-email: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.twitter.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationTwitterProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.twitter.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.windows-live.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.windows-live.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.windows-live.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.windows-live.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.windows-live.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.windows-live.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.windows-live.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.windows-live.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.windows-live.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWindowsLiveProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.windows-live.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.wordpress.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.wordpress.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.wordpress.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.wordpress.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.wordpress.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.wordpress.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.wordpress.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.wordpress.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.wordpress.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationWordpressProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.wordpress.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Auto-redirect to this client.
# cas.authn.pac4j.yahoo.auto-redirect: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Callback URL to use to return the flow back to the CAS server one the identity provider is successfully done. This may be used at the discretion of the client and its type to build service parameters, redirect URIs, etc. If none is specified, the CAS server's login endpoint will be used as the basis of the final callback url.
# cas.authn.pac4j.yahoo.callback-url: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.pac4j.Pac4jBaseClientProperties$CallbackUrlTypes
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Determine how the callback url should be resolved. Default is {@link CallbackUrlTypes#QUERY_PARAMETER}.
Available values are as follows:
<ul><li>{@code PATH_PARAMETER}: Path parameter callback url.
The client name is added to the path of the callback URL.</li><li>{@code QUERY_PARAMETER}: Query parameter callback url.
The client name is added to the path of a query parameter.</li><li>{@code NONE}: No callback url.
No name is added to the callback URL to be able to distinguish the client.</li></ul>
# cas.authn.pac4j.yahoo.callback-url-type: QUERY_PARAMETER

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Name of the client mostly for UI purposes and uniqueness. This name, with 'non-word' characters converted to '-' (e.g. "This Org (New)" becomes "This-Org--New-") is added to the "class" attribute of the redirect link on the login page, to allow for custom styling of individual IdPs (e.g. for an organization logo).
# cas.authn.pac4j.yahoo.client-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# CSS class that should be assigned to this client.
# cas.authn.pac4j.yahoo.css-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Indicate the title or display name of the client for decoration and client presentation purposes. If left blank, the client original name would be used by default.
# cas.authn.pac4j.yahoo.display-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# Whether the client/external identity provider should be considered active and enabled for integration purposes.
# cas.authn.pac4j.yahoo.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# The client id.
# cas.authn.pac4j.yahoo.id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# The attribute to use as the principal identifier built during and upon a successful authentication attempt.
# cas.authn.pac4j.yahoo.principal-attribute-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationYahooProperties
# Module: cas-server-support-pac4j-webflow
# The client secret.
# cas.authn.pac4j.yahoo.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.PasswordSynchronizationProperties
# Module: cas-server-core-authentication
# Allow password synchronization to be turned off globally.
# cas.authn.password-sync.enabled: true

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.PasswordSynchronizationProperties
# Module: cas-server-core-authentication
# Options for password sync via LDAP.
# cas.authn.password-sync.ldap: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.authn.password-sync.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Set if multiple Entries are allowed.
# cas.authn.password-sync.ldap[].allow-multiple-entries: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Base DN to use.
There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating
the LDAP configuration block for each individual base-dn, each entry can be specified
and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN
resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned.
Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.password-sync.ldap[].base-dn: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.authn.password-sync.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.password-sync.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.authn.password-sync.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.authn.password-sync.ldap[].block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.password-sync.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.authn.password-sync.ldap[].connection-strategy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.password-sync.ldap[].disable-pooling: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether or not password sync should be enabled for this ldap instance.
# cas.authn.password-sync.ldap[].enabled: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.authn.password-sync.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Set if search referrals should be followed.
# cas.authn.password-sync.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.password-sync.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.authn.password-sync.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.authn.password-sync.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Keystore password.
# cas.authn.password-sync.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.password-sync.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.password-sync.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.password-sync.ldap[].max-pool-size: 10

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.authn.password-sync.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Name of the LDAP handler.
# cas.authn.password-sync.ldap[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Request that the server return results in batches of a
specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often
used to work around server result size limits.
A negative/zero value disables paged requests.
# cas.authn.password-sync.ldap[].page-size: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.authn.password-sync.ldap[].pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.authn.password-sync.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Duration of time to wait for responses.
# cas.authn.password-sync.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# SASL authorization id.
# cas.authn.password-sync.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The SASL mechanism.
# cas.authn.password-sync.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# SASL mutual auth is enabled?
# cas.authn.password-sync.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# SASL quality of protected.
# cas.authn.password-sync.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The SASL realm.
# cas.authn.password-sync.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# SASL security strength.
# cas.authn.password-sync.ldap[].sasl-security-strength: 

# Required: false
# Type: java.util.List<LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Search handlers.
# cas.authn.password-sync.ldap[].search-entry-handlers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# User filter to use for searching.
Syntax is {@code cn={user}} or {@code cn={0}}.

You may also provide an external groovy script
in the syntax of {@code file:/path/to/GroovyScript.groovy}
to fully build the final filter template dynamically.
# cas.authn.password-sync.ldap[].search-filter: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether subtree searching is allowed.
# cas.authn.password-sync.ldap[].subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.authn.password-sync.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.authn.password-sync.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.authn.password-sync.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Password needed to open the truststore.
# cas.authn.password-sync.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.password-sync.ldap[].trust-store-type: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.password-sync.ldap[].use-start-tls: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.password-sync.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Period at which pool should be validated.
# cas.authn.password-sync.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.password-sync.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties
# Module: cas-server-support-ldap
# Period at which validation operations may time out.
# cas.authn.password-sync.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.password-sync.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.password-sync.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.password-sync.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.password-sync.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.password-sync.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.password-sync.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.authn.password-sync.ldap[].validator.type: search

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationGroovyAccountsProperties
# Module: cas-server-support-passwordless
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.passwordless.accounts.groovy.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationJsonAccountsProperties
# Module: cas-server-support-passwordless
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.passwordless.accounts.json.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.passwordless.accounts.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Set if multiple Entries are allowed.
# cas.authn.passwordless.accounts.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.passwordless.accounts.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.passwordless.accounts.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.passwordless.accounts.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.passwordless.accounts.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.passwordless.accounts.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.passwordless.accounts.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.passwordless.accounts.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.passwordless.accounts.ldap.disable-pooling: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Name of the LDAP attribute that indicates the user's email address.
# cas.authn.passwordless.accounts.ldap.email-attribute: mail

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.passwordless.accounts.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Set if search referrals should be followed.
# cas.authn.passwordless.accounts.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.passwordless.accounts.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.passwordless.accounts.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.passwordless.accounts.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Keystore password.
# cas.authn.passwordless.accounts.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.passwordless.accounts.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.passwordless.accounts.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.passwordless.accounts.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.passwordless.accounts.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Name of the LDAP handler.
# cas.authn.passwordless.accounts.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.passwordless.accounts.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Name of the LDAP attribute that indicates the user's phone.
# cas.authn.passwordless.accounts.ldap.phone-attribute: phoneNumber

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.passwordless.accounts.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.passwordless.accounts.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Duration of time to wait for responses.
# cas.authn.passwordless.accounts.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# SASL authorization id.
# cas.authn.passwordless.accounts.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The SASL mechanism.
# cas.authn.passwordless.accounts.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# SASL mutual auth is enabled?
# cas.authn.passwordless.accounts.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# SASL quality of protected.
# cas.authn.passwordless.accounts.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The SASL realm.
# cas.authn.passwordless.accounts.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# SASL security strength.
# cas.authn.passwordless.accounts.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Search handlers.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.passwordless.accounts.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.passwordless.accounts.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether subtree searching is allowed.
# cas.authn.passwordless.accounts.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.passwordless.accounts.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.passwordless.accounts.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.passwordless.accounts.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Password needed to open the truststore.
# cas.authn.passwordless.accounts.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.passwordless.accounts.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.passwordless.accounts.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.passwordless.accounts.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Period at which pool should be validated.
# cas.authn.passwordless.accounts.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.passwordless.accounts.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationLdapAccountsProperties
# Module: cas-server-support-passwordless-ldap
# Period at which validation operations may time out.
# cas.authn.passwordless.accounts.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.passwordless.accounts.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.passwordless.accounts.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.passwordless.accounts.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.passwordless.accounts.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.passwordless.accounts.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.passwordless.accounts.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.passwordless.accounts.ldap.validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Name of the database to use for authentication.
# cas.authn.passwordless.accounts.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.passwordless.accounts.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.passwordless.accounts.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database instance name.
# cas.authn.passwordless.accounts.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.passwordless.accounts.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.passwordless.accounts.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database password for authentication.
# cas.authn.passwordless.accounts.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.passwordless.accounts.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.passwordless.accounts.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.passwordless.accounts.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.passwordless.accounts.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.passwordless.accounts.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.passwordless.accounts.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database port.
# cas.authn.passwordless.accounts.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.passwordless.accounts.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.passwordless.accounts.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.passwordless.accounts.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.passwordless.accounts.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.passwordless.accounts.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Whether connections require SSL.
# cas.authn.passwordless.accounts.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database connection timeout.
# cas.authn.passwordless.accounts.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# MongoDb database user for authentication.
# cas.authn.passwordless.accounts.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationMongoDbAccountsProperties
# Module: cas-server-support-passwordless-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.passwordless.accounts.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationRestAccountsProperties
# Module: cas-server-support-passwordless
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.passwordless.accounts.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationRestAccountsProperties
# Module: cas-server-support-passwordless
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.passwordless.accounts.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationRestAccountsProperties
# Module: cas-server-support-passwordless
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.passwordless.accounts.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationRestAccountsProperties
# Module: cas-server-support-passwordless
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.passwordless.accounts.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.account.PasswordlessAuthenticationRestAccountsProperties
# Module: cas-server-support-passwordless
# The endpoint URL to contact and retrieve attributes.
# cas.authn.passwordless.accounts.rest.url: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.passwordless.PasswordlessAuthenticationAccountsProperties
# Module: cas-server-support-passwordless
# Passwordless authentication settings using static accounts. The key is the user identifier, while the value is the form of contact such as email, sms, etc.
# cas.authn.passwordless.accounts.simple: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.PasswordlessAuthenticationCoreProperties
# Module: cas-server-support-passwordless
# Allow passwordless authentication to skip its own flow in favor of delegated authentication providers that may be available and defined in CAS. <p> If delegated authentication is activated, CAS will skip its normal passwordless authentication flow in favor of the requested delegated authentication provider. If no delegated providers are available, passwordless authentication flow will commence as usual.
# cas.authn.passwordless.core.delegated-authentication-activated: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.passwordless.core.delegated-authentication-selector-script.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.PasswordlessAuthenticationCoreProperties
# Module: cas-server-support-passwordless
# Allow passwordless authentication to skip its own flow in favor of multifactor authentication providers that may be available and defined in CAS. <p> If multifactor authentication is activated, and defined MFA triggers in CAS signal availability and eligibility of an MFA flow for the given passwordless user, CAS will skip its normal passwordless authentication flow in favor of the requested multifactor authentication provider. If no MFA providers are available, or if no triggers require MFA for the verified passwordless user, passwordless authentication flow will commence as usual.
# cas.authn.passwordless.core.multifactor-authentication-activated: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.passwordless.tokens.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.passwordless.tokens.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.passwordless.tokens.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.passwordless.tokens.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.passwordless.tokens.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.passwordless.tokens.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.passwordless.tokens.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.PasswordlessAuthenticationTokensProperties
# Module: cas-server-support-passwordless
# Indicate how long should the token be considered valid.
# cas.authn.passwordless.tokens.expire-in-seconds: 180

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.passwordless.tokens.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.passwordless.tokens.jpa.batch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.passwordless.tokens.jpa.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.passwordless.tokens.jpa.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.passwordless.tokens.jpa.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.passwordless.tokens.jpa.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.passwordless.tokens.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.passwordless.tokens.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.passwordless.tokens.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.passwordless.tokens.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.passwordless.tokens.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The JDBC driver used to connect to the database.
# cas.authn.passwordless.tokens.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.passwordless.tokens.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.passwordless.tokens.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Allow hibernate to generate query statistics.
# cas.authn.passwordless.tokens.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.passwordless.tokens.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.passwordless.tokens.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.passwordless.tokens.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.passwordless.tokens.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.passwordless.tokens.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The database connection password.
# cas.authn.passwordless.tokens.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.passwordless.tokens.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.passwordless.tokens.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.passwordless.tokens.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.passwordless.tokens.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.passwordless.tokens.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.passwordless.tokens.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.passwordless.tokens.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.passwordless.tokens.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The database connection URL.
# cas.authn.passwordless.tokens.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationJpaTokensProperties
# Module: cas-server-support-passwordless-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.passwordless.tokens.jpa.user: sa

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.passwordless.tokens.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.passwordless.tokens.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.passwordless.tokens.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.passwordless.tokens.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.passwordless.tokens.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.passwordless.tokens.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.passwordless.tokens.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.passwordless.tokens.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.passwordless.tokens.mail.validate-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationRestTokensProperties
# Module: cas-server-support-passwordless
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.passwordless.tokens.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationRestTokensProperties
# Module: cas-server-support-passwordless
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.passwordless.tokens.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationRestTokensProperties
# Module: cas-server-support-passwordless
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.passwordless.tokens.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationRestTokensProperties
# Module: cas-server-support-passwordless
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.passwordless.tokens.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.passwordless.token.PasswordlessAuthenticationRestTokensProperties
# Module: cas-server-support-passwordless
# The endpoint URL to contact and retrieve attributes.
# cas.authn.passwordless.tokens.rest.url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.passwordless.tokens.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.authn.passwordless.tokens.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.authn.passwordless.tokens.sms.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.PasswordManagementCoreProperties
# Module: cas-server-support-pm-webflow
# Flag to indicate whether successful password change should trigger login automatically.
# cas.authn.pm.core.auto-login: false

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.PasswordManagementCoreProperties
# Module: cas-server-support-pm-webflow
# Flag to indicate if password management facility is enabled.
# cas.authn.pm.core.enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.PasswordManagementCoreProperties
# Module: cas-server-support-pm-webflow
# A String value representing password policy regex pattern. Minimum 8 and Maximum 10 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet, 1 Number and 1 Special Character.
# cas.authn.pm.core.policy-pattern: ^(?&#61;.*[a-z])(?&#61;.*[A-Z])(?&#61;.*\d)(?&#61;.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]{8,10}

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.pm.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: enabled setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.pm.core.enabled

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA should be enabled.
# cas.authn.pm.forgot-username.google-recaptcha.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA invisible should be enabled.
# cas.authn.pm.forgot-username.google-recaptcha.invisible: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA badge position (only if invisible is enabled). Accepted values are: <ul> <li>{@code bottomright}: bottom right corner, default value.</li> <li>{@code bottomleft}: bottom left corner</li> <li>{@code inline}: allows to control the CSS.</li> </ul>
# cas.authn.pm.forgot-username.google-recaptcha.position: bottomright

# Required: true
# Type: java.lang.Double
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# reCAPTCHA v3 returns a score (1.0 is very likely a good interaction, 0.0 is very likely a bot). reCAPTCHA learns by seeing real traffic on your site. For this reason, scores in a staging environment or soon after implementing may differ from production. As reCAPTCHA v3 doesn't ever interrupt the user flow, you can first run reCAPTCHA without taking action and then decide on thresholds by looking at your traffic in the admin console. By default, you can use a threshold of 0.5.
# cas.authn.pm.forgot-username.google-recaptcha.score: 0.5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site secret.
# cas.authn.pm.forgot-username.google-recaptcha.secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site key.
# cas.authn.pm.forgot-username.google-recaptcha.site-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA endpoint for verification of tokens and input.
# cas.authn.pm.forgot-username.google-recaptcha.verify-url: https://www.google.com/recaptcha/api/siteverify

# Required: false
# Type: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties$RecaptchaVersions
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Indicate the version of the recaptcha api. Accepted values are: {@code V2, V3}.
Available values are as follows:
<ul><li>{@code GOOGLE_RECAPTCHA_V2}: V2 version of the recaptcha API.</li><li>{@code GOOGLE_RECAPTCHA_V3}: V3 version of the recaptcha API.</li><li>{@code HCAPTCHA}: hCaptcha.</li></ul>
# cas.authn.pm.forgot-username.google-recaptcha.version: 0.5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.pm.forgot-username.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.pm.forgot-username.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.pm.forgot-username.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.pm.forgot-username.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.pm.forgot-username.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.pm.forgot-username.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.pm.forgot-username.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.pm.forgot-username.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.pm.forgot-username.mail.validate-addresses: false

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA should be enabled.
# cas.authn.pm.google-recaptcha.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA invisible should be enabled.
# cas.authn.pm.google-recaptcha.invisible: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA badge position (only if invisible is enabled). Accepted values are: <ul> <li>{@code bottomright}: bottom right corner, default value.</li> <li>{@code bottomleft}: bottom left corner</li> <li>{@code inline}: allows to control the CSS.</li> </ul>
# cas.authn.pm.google-recaptcha.position: bottomright

# Required: true
# Type: java.lang.Double
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# reCAPTCHA v3 returns a score (1.0 is very likely a good interaction, 0.0 is very likely a bot). reCAPTCHA learns by seeing real traffic on your site. For this reason, scores in a staging environment or soon after implementing may differ from production. As reCAPTCHA v3 doesn't ever interrupt the user flow, you can first run reCAPTCHA without taking action and then decide on thresholds by looking at your traffic in the admin console. By default, you can use a threshold of 0.5.
# cas.authn.pm.google-recaptcha.score: 0.5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site secret.
# cas.authn.pm.google-recaptcha.secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site key.
# cas.authn.pm.google-recaptcha.site-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA endpoint for verification of tokens and input.
# cas.authn.pm.google-recaptcha.verify-url: https://www.google.com/recaptcha/api/siteverify

# Required: false
# Type: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties$RecaptchaVersions
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Indicate the version of the recaptcha api. Accepted values are: {@code V2, V3}.
Available values are as follows:
<ul><li>{@code GOOGLE_RECAPTCHA_V2}: V2 version of the recaptcha API.</li><li>{@code GOOGLE_RECAPTCHA_V3}: V3 version of the recaptcha API.</li><li>{@code HCAPTCHA}: hCaptcha.</li></ul>
# cas.authn.pm.google-recaptcha.version: 0.5

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.pm.GroovyPasswordManagementProperties
# Module: cas-server-support-pm
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.pm.groovy.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.PasswordHistoryCoreProperties
# Module: cas-server-support-pm-webflow
# Flag to indicate if password history tracking is enabled.
# cas.authn.pm.history.core.enabled: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.pm.history.groovy.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.pm.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.pm.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.pm.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.pm.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.pm.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.pm.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.pm.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The JDBC driver used to connect to the database.
# cas.authn.pm.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.pm.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.authn.pm.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Allow hibernate to generate query statistics.
# cas.authn.pm.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.authn.pm.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.pm.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.pm.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.pm.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.pm.jdbc.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The database connection password.
# cas.authn.pm.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.pm.jdbc.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.pm.jdbc.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.pm.jdbc.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.pm.jdbc.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.pm.jdbc.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.pm.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.pm.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.pm.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.pm.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.pm.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.pm.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.pm.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.pm.jdbc.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to change the password and update.
# cas.authn.pm.jdbc.sql-change-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to delete security questions for the account, if any.
# cas.authn.pm.jdbc.sql-delete-security-questions: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to locate the user email address.
# cas.authn.pm.jdbc.sql-find-email: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to locate the user phone number.
# cas.authn.pm.jdbc.sql-find-phone: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to locate the user via email.
# cas.authn.pm.jdbc.sql-find-user: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to locate security questions for the account, if any.
# cas.authn.pm.jdbc.sql-get-security-questions: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# SQL query to update security questions for the account, if any.
# cas.authn.pm.jdbc.sql-update-security-questions: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The database connection URL.
# cas.authn.pm.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties
# Module: cas-server-support-pm-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.pm.jdbc.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.pm.JsonPasswordManagementProperties
# Module: cas-server-support-pm
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.pm.json.location: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties>
# Owner: org.apereo.cas.configuration.model.support.pm.PasswordManagementProperties
# Module: cas-server-support-pm-webflow
# Manage account passwords in LDAP.
# cas.authn.pm.ldap: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.authn.pm.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Set if multiple Entries are allowed.
# cas.authn.pm.ldap[].allow-multiple-entries: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Base DN to use.
There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating
the LDAP configuration block for each individual base-dn, each entry can be specified
and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN
resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned.
Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.pm.ldap[].base-dn: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.authn.pm.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.pm.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.authn.pm.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.authn.pm.ldap[].block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.pm.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.authn.pm.ldap[].connection-strategy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.pm.ldap[].disable-pooling: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.authn.pm.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Set if search referrals should be followed.
# cas.authn.pm.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.pm.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.authn.pm.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.authn.pm.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Keystore password.
# cas.authn.pm.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.pm.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.pm.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.pm.ldap[].max-pool-size: 10

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.authn.pm.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Name of the LDAP handler.
# cas.authn.pm.ldap[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Request that the server return results in batches of a
specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often
used to work around server result size limits.
A negative/zero value disables paged requests.
# cas.authn.pm.ldap[].page-size: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.authn.pm.ldap[].pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.authn.pm.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Duration of time to wait for responses.
# cas.authn.pm.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# SASL authorization id.
# cas.authn.pm.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The SASL mechanism.
# cas.authn.pm.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# SASL mutual auth is enabled?
# cas.authn.pm.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# SASL quality of protected.
# cas.authn.pm.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The SASL realm.
# cas.authn.pm.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# SASL security strength.
# cas.authn.pm.ldap[].sasl-security-strength: 

# Required: false
# Type: java.util.List<LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Search handlers.
# cas.authn.pm.ldap[].search-entry-handlers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# User filter to use for searching.
Syntax is {@code cn={user}} or {@code cn={0}}.

You may also provide an external groovy script
in the syntax of {@code file:/path/to/GroovyScript.groovy}
to fully build the final filter template dynamically.
# cas.authn.pm.ldap[].search-filter: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Collection of attribute names that indicate security questions answers.
This is done via a key-value structure where the key is the attribute name
for the security question and the value is the attribute name for the answer linked to the question.
# cas.authn.pm.ldap[].security-questions-attributes: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether subtree searching is allowed.
# cas.authn.pm.ldap[].subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.authn.pm.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.authn.pm.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.authn.pm.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Password needed to open the truststore.
# cas.authn.pm.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.authn.pm.ldap[].trust-store-type: 

# Required: true
# Type: LdapType
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# The specific variant of LDAP
based on which update operations will be constructed.
Accepted values are:
* <ul>
<li>{@code AD}</li>
<li>{@code GENERIC}</li>
<li>{@code FreeIPA}</li>
<li>{@code EDirectory}</li>
</ul>
# cas.authn.pm.ldap[].type: AD

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.pm.ldap[].use-start-tls: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Username attribute required by LDAP.
# cas.authn.pm.ldap[].username-attribute: uid

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.pm.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Period at which pool should be validated.
# cas.authn.pm.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.pm.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.LdapPasswordManagementProperties
# Module: cas-server-support-pm-ldap
# Period at which validation operations may time out.
# cas.authn.pm.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.pm.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.pm.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.pm.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.pm.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.pm.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.pm.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.authn.pm.ldap[].validator.type: search

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.pm.policy-pattern: 
# Deprecation Level: ERROR
# Deprecation Reason: policy-pattern setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.pm.core.policy-pattern

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.pm.reset.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.pm.reset.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.pm.reset.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.pm.reset.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.pm.reset.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.pm.reset.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.pm.reset.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.pm.ResetPasswordManagementProperties
# Module: cas-server-support-pm-webflow
# How long in minutes should the password expiration link remain valid.
# cas.authn.pm.reset.expiration-minutes: 1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.ResetPasswordManagementProperties
# Module: cas-server-support-pm-webflow
# Whether the Password Management Token will contain the client IP Address.
# cas.authn.pm.reset.include-client-ip-address: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.ResetPasswordManagementProperties
# Module: cas-server-support-pm-webflow
# Whether the Password Management Token will contain the server IP Address.
# cas.authn.pm.reset.include-server-ip-address: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.pm.reset.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.pm.reset.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.pm.reset.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.pm.reset.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.pm.reset.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.pm.reset.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.pm.reset.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.pm.reset.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.pm.reset.mail.validate-addresses: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.pm.ResetPasswordManagementProperties
# Module: cas-server-support-pm-webflow
# Whether reset operations require security questions, or should they be marked as optional.
# cas.authn.pm.reset.security-questions-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.pm.reset.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.authn.pm.reset.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.authn.pm.reset.sms.text: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Password for Basic-Auth at the password management endpoints.
# cas.authn.pm.rest.endpoint-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Endpoint URL to use when updating passwords..
# cas.authn.pm.rest.endpoint-url-change: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Endpoint URL to use when locating email addresses.
# cas.authn.pm.rest.endpoint-url-email: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Endpoint URL to use when locating phone numbers.
# cas.authn.pm.rest.endpoint-url-phone: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Endpoint URL to use when locating security questions.
# cas.authn.pm.rest.endpoint-url-security-questions: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Endpoint URL to use when locating user names.
# cas.authn.pm.rest.endpoint-url-user: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.pm.RestfulPasswordManagementProperties
# Module: cas-server-support-pm-rest
# Username for Basic-Auth at the password management endpoints.
# cas.authn.pm.rest.endpoint-username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# Whether webflow auto-configuration should be enabled.
# cas.authn.pm.webflow.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# The order in which the webflow is configured.
# cas.authn.pm.webflow.order: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllHandlers
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.all-handlers.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllHandlers
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.all-handlers.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllCredentials
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.all.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllCredentials
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.all.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.any.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.any.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential
# Module: cas-server-core-authentication
# Avoid short circuiting and try every handler even if one prior succeeded. Ensure number of provided credentials does not match the sum of authentication successes and failures
# cas.authn.policy.any.try-all: false

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationPolicyProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Execute a groovy script to detect authentication policy.
# cas.authn.policy.groovy: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Path to the groovy script to execute.
# cas.authn.policy.groovy[].script: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.NotPrevented
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.not-prevented.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.NotPrevented
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.not-prevented.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.req.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler
# Module: cas-server-core-authentication
# The handler name which must have successfully executed and validated credentials.
# cas.authn.policy.req.handler-name: handlerName

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.req.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler
# Module: cas-server-core-authentication
# Ensure number of provided credentials does not match the sum of authentication successes and failures.
# cas.authn.policy.req.try-all: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Global authentication policy that is applied when CAS attempts to vend and validate tickets. Checks to make sure a particular authentication handler has successfully executed and validated credentials. Required handlers are defined per registered service.
# cas.authn.policy.required-handler-authentication-policy-enabled: false

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.authentication.RestAuthenticationPolicyProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties
# Module: cas-server-core-authentication
# Execute a rest endpoint to detect authentication policy.
# cas.authn.policy.rest: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.BaseRestEndpointProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication,
specify the password for authentication.
# cas.authn.policy.rest[].basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.BaseRestEndpointProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication,
specify the username for authentication.
# cas.authn.policy.rest[].basic-auth-username: 

# Required: false
# Type: java.util.Map<String,String>
# Owner: org.apereo.cas.configuration.model.BaseRestEndpointProperties
# Module: cas-server-core-util
# Headers, defined as a Map, to include in the request when making the REST call.
Will overwrite any header that CAS is pre-defined to
send and include in the request. Key in the map should be the header name
and the value in the map should be the header value.
# cas.authn.policy.rest[].headers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.BaseRestEndpointProperties
# Module: cas-server-core-util
# The endpoint URL to contact and retrieve attributes.
# cas.authn.policy.rest[].url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties
# Module: cas-server-core-authentication
# If true, allows CAS to select authentication handlers based on the credential source. This allows the authentication engine to restrict the task of validating credentials to the selected source or account repository, as opposed to every authentication handler registered with CAS at runtime.
# cas.authn.policy.source-selection-enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.UniquePrincipal
# Module: cas-server-core-authentication
# Enables the policy.
# cas.authn.policy.unique-principal.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.UniquePrincipal
# Module: cas-server-core-authentication
# The name of the authentication policy.
# cas.authn.policy.unique-principal.name: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.qr.QRAuthenticationProperties
# Module: cas-server-support-qr-authentication
# Configure allowed {@code Origin} header values. This check is mostly designed for browser clients. There is nothing preventing other types of client to modify the {@code Origin} header value. <p>When SockJS is enabled and origins are restricted, transport types that do not allow to check request origin (Iframe based transports) are disabled. As a consequence, IE 6 to 9 are not supported when origins are restricted. <p>Each provided allowed origin must start by "http://", "https://" or be "*" (means that all origins are allowed). By default, only same origin requests are allowed (empty list).
# cas.authn.qr.allowed-origins: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.qr.JsonQRAuthenticationProperties
# Module: cas-server-support-qr-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.qr.json.location: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# The accounting port.
# cas.authn.radius.client.accounting-port: 1813

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# The authentication port.
# cas.authn.radius.client.authentication-port: 1812

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Server address to connect and establish a session.
# cas.authn.radius.client.inet-address: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Secret/password to use for the initial bind.
# cas.authn.radius.client.shared-secret: N0Sh@ar3d$ecReT

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusClientProperties
# Module: cas-server-support-radius
# Socket connection timeout in milliseconds.
# cas.authn.radius.client.socket-timeout: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusProperties
# Module: cas-server-support-radius
# Whether authentication errors should be skipped and fail over to the next server.
# cas.authn.radius.failover-on-authentication-failure: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusProperties
# Module: cas-server-support-radius
# Whether catastrophic errors should be skipped and fail over to the next server.
# cas.authn.radius.failover-on-exception: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusProperties
# Module: cas-server-support-radius
# The name of the authentication handler.
# cas.authn.radius.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.radius.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.radius.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.radius.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.radius.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.radius.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.radius.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.radius.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.radius.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.radius.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.radius.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.radius.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS identifier.
# cas.authn.radius.server.nas-identifier: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS IP address.
# cas.authn.radius.server.nas-ip-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS IPv6 address.
# cas.authn.radius.server.nas-ipv6-address: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port.
# cas.authn.radius.server.nas-port: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port id.
# cas.authn.radius.server.nas-port-id: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS port type.
# cas.authn.radius.server.nas-port-type: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# The NAS real port.
# cas.authn.radius.server.nas-real-port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# Radius protocol to use when communicating with the server.
# cas.authn.radius.server.protocol: EAP_MSCHAPv2

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusServerProperties
# Module: cas-server-support-radius
# Number of re-try attempts when dealing with connection and authentication failures.
# cas.authn.radius.server.retries: 3

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.radius.RadiusProperties
# Module: cas-server-support-radius
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.radius.state: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Connection timeout.
# cas.authn.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Database index used by the connection factory.
# cas.authn.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Whether the module is enabled or not, defaults to true.
# cas.authn.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Redis server host.
# cas.authn.redis.host: localhost

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# The name of the authentication handler.
# cas.authn.redis.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Order of authentication handler in chain.
# cas.authn.redis.order: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Login password of the redis server.
# cas.authn.redis.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.redis.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.redis.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.redis.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.redis.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.redis.password-encoder.type: NONE

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Redis server port.
# cas.authn.redis.port: 6379

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.redis.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.redis.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.redis.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.redis.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.redis.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.redis.principal-transformation.suffix: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Command timeout.
# cas.authn.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisAuthenticationProperties
# Module: cas-server-support-redis-authentication
# Whether or not to use SSL for connection factory.
# cas.authn.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.RejectAuthenticationProperties
# Module: cas-server-support-generic
# Name of the authentication handler.
# cas.authn.reject.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.reject.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.reject.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.reject.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.reject.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.reject.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.reject.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.reject.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.reject.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.reject.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.reject.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.reject.principal-transformation.suffix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.RejectAuthenticationProperties
# Module: cas-server-support-generic
# Comma-separated list of users to reject for authentication.
# cas.authn.reject.users: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.release-protocol-attributes: 
# Deprecation Level: ERROR
# Deprecation Reason: Property moved to new namespace under cas.authn.authentication-attribute-release.* settings.
# Deprecation Replacement: cas.authn.authentication-attribute-release.enabled

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.RemoteAddressAuthenticationProperties
# Module: cas-server-support-generic-remote-webflow
# The authorized network address to allow for authentication.
# cas.authn.remote-address.ip-address-range: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.RemoteAddressAuthenticationProperties
# Module: cas-server-support-generic-remote-webflow
# The name of the authentication handler.
# cas.authn.remote-address.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.generic.RemoteAddressAuthenticationProperties
# Module: cas-server-support-generic-remote-webflow
# Order of the authentication handler in the chain.
# cas.authn.remote-address.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.rest.RestAuthenticationProperties
# Module: cas-server-support-rest-authentication
# Charset to encode the credentials sent to the REST endpoint.
# cas.authn.rest.charset: US-ASCII

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.rest.RestAuthenticationProperties
# Module: cas-server-support-rest-authentication
# Name of the authentication handler.
# cas.authn.rest.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.rest.RestAuthenticationProperties
# Module: cas-server-support-rest-authentication
# Order of the authentication handler in the chain.
# cas.authn.rest.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.rest.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.rest.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.rest.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.rest.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.rest.password-encoder.type: NONE

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.rest.RestAuthenticationProperties
# Module: cas-server-support-rest-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.rest.state: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.rest.RestAuthenticationProperties
# Module: cas-server-support-rest-authentication
# Endpoint URI to use for verification of credentials.
# cas.authn.rest.uri: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override white listed algorithms.
# cas.authn.saml-idp.algs.override-allowed-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override allowed signature signing algorithms.
# cas.authn.saml-idp.algs.override-allowed-signature-signing-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override black listed encryption algorithms.
# cas.authn.saml-idp.algs.override-blocked-encryption-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override blocked signature signing algorithms.
# cas.authn.saml-idp.algs.override-blocked-signature-signing-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override data encryption algorithms.
# cas.authn.saml-idp.algs.override-data-encryption-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override key encryption algorithms.
# cas.authn.saml-idp.algs.override-key-encryption-algorithms: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override signature algorithms.
# cas.authn.saml-idp.algs.override-signature-algorithms: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override signature canonicalization algorithm.
# cas.authn.saml-idp.algs.override-signature-canonicalization-algorithm: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# The Override signature reference digest methods.
# cas.authn.saml-idp.algs.override-signature-reference-digest-methods: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPAlgorithmsProperties
# Module: cas-server-support-saml-idp
# Algorithm name to use when generating or locating private key for signing operations..
# cas.authn.saml-idp.algs.private-key-alg-name: RSA

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.attribute-friendly-names: 
# Deprecation Level: ERROR
# Deprecation Reason: attribute-friendly-names setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.saml-idp.core.attribute-friendly-names

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.authentication-context-class-mappings: 
# Deprecation Level: ERROR
# Deprecation Reason: authentication-context-class-mappings setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.saml-idp.core.authentication-context-class-mappings

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties
# Module: cas-server-support-saml-idp
# A mapping of attribute names to their friendly names, defined globally. Example might be {@code urn:oid:1.3.6.1.4.1.5923.1.1.1.6->eduPersonPrincipalName}.
# cas.authn.saml-idp.core.attribute-friendly-names: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties
# Module: cas-server-support-saml-idp
# Indicates whether attribute query profile is enabled. Enabling this setting would allow CAS to record SAML responses and have them be made available later for attribute lookups.
# cas.authn.saml-idp.core.attribute-query-profile-enabled: false

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties
# Module: cas-server-support-saml-idp
# A mapping of authentication context class refs. This is where specific authentication context classes are reference and mapped to providers that CAS may support mainly for MFA purposes. <p> Example might be {@code urn:oasis:names:tc:SAML:2.0:ac:classes:SomeClassName->mfa-duo}.
# cas.authn.saml-idp.core.authentication-context-class-mappings: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties
# Module: cas-server-support-saml-idp
# The SAML entity id for the deployment.
# cas.authn.saml-idp.core.entity-id: https://cas.example.org/idp

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.core.replicate-sessions: 
# Deprecation Level: ERROR
# Deprecation Reason: Session replication settings for SAML2 are moved to cas.authn.saml-idp.core.session-storage-type
# Deprecation Replacement: cas.authn.saml-idp.core.session-storage-type

# Required: false
# Type: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties$SessionStorageTypes
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPCoreProperties
# Module: cas-server-support-saml-idp
# Indicates whether saml requests, and other session data, collected as part of SAML flows and requests that are kept by the container http session, local storage, or should be replicated across the cluster.
Available values are as follows:
<ul><li>{@code HTTP}: Saml requests, and other session data collected as part of SAML flows and requests
are kept in the http servlet session that is local to the server.</li><li>{@code BROWSER_SESSION_STORAGE}: Saml requests, and other session data collected as part of SAML flows and requests
are kept in the client browser's session storage, signed and encrypted. SAML2 interactions
require client-side read/write operations to restore the session from the browser.</li><li>{@code TICKET_REGISTRY}: Saml requests, and other session data collected as part of SAML flows and requests
are tracked as CAS tickets in the registry and replicated across the entire cluster
as tickets.</li></ul>
# cas.authn.saml-idp.core.session-storage-type: https://cas.example.org/idp

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.entity-id: 
# Deprecation Level: ERROR
# Deprecation Reason: entity-id setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.saml-idp.core.entity-id

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPLogoutProperties
# Module: cas-server-support-saml-idp
# Whether SLO logout requests are required to be signed.
# cas.authn.saml-idp.logout.force-signed-logout-requests: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPLogoutProperties
# Module: cas-server-support-saml-idp
# Whether SLO logout responses should be sent using a forced binding. Accepted values are: <ul>     <li>{@code urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST}</li>     <li>{@code urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect}</li> </ul> If no binding is defined, all available SLO endpoints found in the metadata will be consulted for logout responses.
# cas.authn.saml-idp.logout.logout-response-binding: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPLogoutProperties
# Module: cas-server-support-saml-idp
# Whether SLO logout responses should be sent to service providers.
# cas.authn.saml-idp.logout.send-logout-response: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPLogoutProperties
# Module: cas-server-support-saml-idp
# Whether SLO logout responses are required to be signed.
# cas.authn.saml-idp.logout.sign-logout-response: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPLogoutProperties
# Module: cas-server-support-saml-idp
# Whether SAML SLO is enabled and processed.
# cas.authn.saml-idp.logout.single-logout-callbacks-disabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# S3 bucket that contains metadata files.
# cas.authn.saml-idp.metadata.amazon-s3.bucket-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Client execution timeout.
# cas.authn.saml-idp.metadata.amazon-s3.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Connection timeout.
# cas.authn.saml-idp.metadata.amazon-s3.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Use access-key provided by AWS to authenticate.
# cas.authn.saml-idp.metadata.amazon-s3.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Use secret key provided by AWS to authenticate.
# cas.authn.saml-idp.metadata.amazon-s3.credential-secret-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.amazon-s3.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.amazon-s3.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# AWS custom endpoint.
# cas.authn.saml-idp.metadata.amazon-s3.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# The collection name that is responsible to hold the identity provider metadata.
# cas.authn.saml-idp.metadata.amazon-s3.idp-metadata-bucket-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Local address.
# cas.authn.saml-idp.metadata.amazon-s3.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Maximum connections setting.
# cas.authn.saml-idp.metadata.amazon-s3.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Profile name to use.
# cas.authn.saml-idp.metadata.amazon-s3.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Profile path.
# cas.authn.saml-idp.metadata.amazon-s3.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Optionally specifies the proxy host to connect through.
# cas.authn.saml-idp.metadata.amazon-s3.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Optionally specifies the proxy password to connect through.
# cas.authn.saml-idp.metadata.amazon-s3.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Optionally specifies the proxy username to connect through.
# cas.authn.saml-idp.metadata.amazon-s3.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# AWS region used.
# cas.authn.saml-idp.metadata.amazon-s3.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.authn.saml-idp.metadata.amazon-s3.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Socket timeout.
# cas.authn.saml-idp.metadata.amazon-s3.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.AmazonS3SamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-aws-s3
# Flag that indicates whether to use reaper.
# cas.authn.saml-idp.metadata.amazon-s3.use-reaper: false

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.metadata.basic-authn-password: 
# Deprecation Level: ERROR
# Deprecation Reason: basic-authn-password setting is now moved into the mdq namespace.
# Deprecation Replacement: cas.authn.saml-idp.metadata.mdq.basic-authn-password

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.metadata.basic-authn-username: 
# Deprecation Level: ERROR
# Deprecation Reason: basic-authn-username setting is now moved into the mdq namespace.
# Deprecation Replacement: cas.authn.saml-idp.metadata.mdq.basic-authn-username

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# How long should metadata be cached.
# cas.authn.saml-idp.metadata.core.cache-expiration: PT24H

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether invalid metadata should eagerly fail quickly on startup once the resource is parsed.
# cas.authn.saml-idp.metadata.core.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether valid metadata is required.
# cas.authn.saml-idp.metadata.core.require-valid-metadata: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SLO service POST binding.
# cas.authn.saml-idp.metadata.core.slo-service-post-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SLO service REDIRECT binding.
# cas.authn.saml-idp.metadata.core.slo-service-redirect-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SSO service POST binding.
# cas.authn.saml-idp.metadata.core.sso-service-post-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SSO service POST SimpleSign binding.
# cas.authn.saml-idp.metadata.core.sso-service-post-simple-sign-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SSO service REDIRECT binding.
# cas.authn.saml-idp.metadata.core.sso-service-redirect-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CoreSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generation process should support SSO service SOAP binding.
# cas.authn.saml-idp.metadata.core.sso-service-soap-binding-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Use a local cache to reduce fetches..
# cas.authn.saml-idp.metadata.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Remove idle connections from pool.
# cas.authn.saml-idp.metadata.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# TCP connection timeout.
# cas.authn.saml-idp.metadata.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Create the database if it doesn't exist.
# cas.authn.saml-idp.metadata.couch-db.create-if-not-exists: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.couch-db.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.couch-db.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.couch-db.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.couch-db.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.couch-db.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.couch-db.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.couch-db.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Database name.
# cas.authn.saml-idp.metadata.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.saml-idp.metadata.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Whether identity provider metadata artifacts are expected to be found in the database.
# cas.authn.saml-idp.metadata.couch-db.idp-metadata-enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Max entries in local cache.
# cas.authn.saml-idp.metadata.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Maximum connections to CouchDB.
# cas.authn.saml-idp.metadata.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Largest allowable serialized object.
# cas.authn.saml-idp.metadata.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Password for connection.
# cas.authn.saml-idp.metadata.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Proxy host.
# cas.authn.saml-idp.metadata.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# proxy port.
# cas.authn.saml-idp.metadata.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.saml-idp.metadata.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Retries for update conflicts.
# cas.authn.saml-idp.metadata.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Socket idle timeout.
# cas.authn.saml-idp.metadata.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Connection url.
# cas.authn.saml-idp.metadata.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.saml-idp.metadata.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.CouchDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-couchdb
# Username for connection.
# cas.authn.saml-idp.metadata.couch-db.username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.FileSystemSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Directory location of SAML metadata and signing/encryption keys. This directory will be used to hold the configuration files.
# cas.authn.saml-idp.metadata.file-system.location: file:/etc/cas/saml

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.FileSystemSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Whether metadata generated on disk should be digitally signed. Signing operations use the saml2 identity provider's signing certificate and signing key.
# cas.authn.saml-idp.metadata.file-system.sign-metadata: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# The branch to checkout and activate, defaults to {@code master}.
# cas.authn.saml-idp.metadata.git.active-branch: master

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# If the repository is to be cloned, this will allow a select list of branches to be fetched. List the branch names separated by commas or use {@code *} to clone all branches. Defaults to all branches.
# cas.authn.saml-idp.metadata.git.branches-to-clone: *

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# When establishing an ssh session, determine if default identities loaded on the machine should be excluded/removed and identity should only be limited to those loaded from given keys.
# cas.authn.saml-idp.metadata.git.clear-existing-identities: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.saml-idp.metadata.git.clone-directory.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.git.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.git.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.git.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.git.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.git.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.git.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.git.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: org.apereo.cas.configuration.model.support.git.services.BaseGitProperties$HttpClientTypes
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Implementation of HTTP client to use when doing git operations via http/https. The jgit library sets the connection factory statically (globally) so this property should be set to the same value for all git repositories (services, saml, etc). Not doing so might result in one connection factory being used for clone and another for subsequent fetches.
Available values are as follows:
<ul><li>{@code JDK}: Built-in JDK http/https client.</li><li>{@code HTTP_CLIENT}: Apache HTTP Client http/https client.</li></ul>
# cas.authn.saml-idp.metadata.git.http-client-type: JDK

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Whether identity provider metadata artifacts are expected to be found in the database.
# cas.authn.saml-idp.metadata.git.idp-metadata-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Password used to access or push to the repository.
# cas.authn.saml-idp.metadata.git.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Password for the SSH private key.
# cas.authn.saml-idp.metadata.git.private-key-passphrase: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.metadata.git.private-key-path: 
# Deprecation Level: ERROR
# Deprecation Reason: Type changed from File to Resource, but still needs to resolve to File.
# Deprecation Replacement: cas.authn.saml-idp.metadata.git.private-key.location

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.saml-idp.metadata.git.private-key.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Decide whether changes should be pushed back into the remote repository.
# cas.authn.saml-idp.metadata.git.push-changes: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# The address of the git repository. Could be a URL or a file-system path.
# cas.authn.saml-idp.metadata.git.repository-url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Whether or not commits should be signed.
# cas.authn.saml-idp.metadata.git.sign-commits: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# As with using SSH with public keys, an SSH session with {@code ssh://user@example.com/repo.git} must be specified to use password-secured SSH connections.
# cas.authn.saml-idp.metadata.git.ssh-session-password: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Whether on not to turn on strict host key checking. true will be "yes", false will be "no", "ask" not supported.
# cas.authn.saml-idp.metadata.git.strict-host-key-checking: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Timeout for git operations such as push and pull in seconds.
# cas.authn.saml-idp.metadata.git.timeout: PT10S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.GitSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-git
# Username used to access or push to the repository.
# cas.authn.saml-idp.metadata.git.username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.HttpSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Forcefully download and fetch metadata files form URL sources and disregard any cached copies of the metadata.
# cas.authn.saml-idp.metadata.http.force-metadata-refresh: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.HttpSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Directory location where downloaded SAML metadata is cached as backup files. If left undefined, the directory is calculated off of the metadata location on disk when specified. The directory location should also support and be resolvable via Spring expression language.
# cas.authn.saml-idp.metadata.http.metadata-backup-location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.saml-idp.metadata.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.saml-idp.metadata.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.jpa.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.jpa.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.jpa.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.jpa.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.jpa.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.jpa.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.jpa.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.saml-idp.metadata.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.saml-idp.metadata.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.saml-idp.metadata.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.saml-idp.metadata.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.saml-idp.metadata.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The JDBC driver used to connect to the database.
# cas.authn.saml-idp.metadata.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.saml-idp.metadata.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.authn.saml-idp.metadata.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Allow hibernate to generate query statistics.
# cas.authn.saml-idp.metadata.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The SQL query to be executed to test the validity of connections.
# cas.authn.saml-idp.metadata.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.saml-idp.metadata.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Whether identity provider metadata artifacts are expected to be found in the database.
# cas.authn.saml-idp.metadata.jpa.idp-metadata-enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.saml-idp.metadata.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.saml-idp.metadata.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.saml-idp.metadata.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The database connection password.
# cas.authn.saml-idp.metadata.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.saml-idp.metadata.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.saml-idp.metadata.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.saml-idp.metadata.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.saml-idp.metadata.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.saml-idp.metadata.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.saml-idp.metadata.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.saml-idp.metadata.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.saml-idp.metadata.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The database connection URL.
# cas.authn.saml-idp.metadata.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.saml-idp.metadata.jpa.user: sa

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.metadata.location: 
# Deprecation Level: ERROR
# Deprecation Reason: location setting is now moved into the file-system namespace.
# Deprecation Replacement: cas.authn.saml-idp.metadata.file-system.location

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MDQSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Basic auth password in case the metadata instance is connecting to an MDQ server.
# cas.authn.saml-idp.metadata.mdq.basic-authn-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MDQSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Basic auth username in case the metadata instance is connecting to an MDQ server.
# cas.authn.saml-idp.metadata.mdq.basic-authn-username: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MDQSamlMetadataProperties
# Module: cas-server-support-saml-idp
# Supported content types in case the metadata instance is connecting to an MDQ server. {@link MediaType#APPLICATION_XML_VALUE} and {@link MediaType#TEXT_XML_VALUE} are supported by default.
# cas.authn.saml-idp.metadata.mdq.supported-content-types: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Name of the database to use for authentication.
# cas.authn.saml-idp.metadata.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.authn.saml-idp.metadata.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database collection name to fetch and/or create.
# cas.authn.saml-idp.metadata.mongo.collection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.mongo.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.mongo.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.mongo.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.mongo.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.mongo.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.mongo.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.mongo.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database instance name.
# cas.authn.saml-idp.metadata.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Whether collections should be dropped on startup and re-created.
# cas.authn.saml-idp.metadata.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.authn.saml-idp.metadata.mongo.host: localhost

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# The collection name that is responsible to hold the identity provider metadata.
# cas.authn.saml-idp.metadata.mongo.idp-metadata-collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database password for authentication.
# cas.authn.saml-idp.metadata.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.authn.saml-idp.metadata.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.authn.saml-idp.metadata.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.authn.saml-idp.metadata.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.authn.saml-idp.metadata.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.authn.saml-idp.metadata.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.authn.saml-idp.metadata.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database port.
# cas.authn.saml-idp.metadata.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.authn.saml-idp.metadata.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.authn.saml-idp.metadata.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.authn.saml-idp.metadata.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.authn.saml-idp.metadata.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.authn.saml-idp.metadata.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Whether connections require SSL.
# cas.authn.saml-idp.metadata.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database connection timeout.
# cas.authn.saml-idp.metadata.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# MongoDb database user for authentication.
# cas.authn.saml-idp.metadata.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.MongoDbSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.authn.saml-idp.metadata.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.authn.saml-idp.metadata.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.authn.saml-idp.metadata.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.authn.saml-idp.metadata.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.authn.saml-idp.metadata.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.authn.saml-idp.metadata.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.authn.saml-idp.metadata.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.authn.saml-idp.metadata.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Connection timeout.
# cas.authn.saml-idp.metadata.redis.connect-timeout: PT10S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.redis.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.redis.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.redis.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.redis.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.redis.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.redis.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.redis.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Database index used by the connection factory.
# cas.authn.saml-idp.metadata.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Whether the module is enabled or not, defaults to true.
# cas.authn.saml-idp.metadata.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Redis server host.
# cas.authn.saml-idp.metadata.redis.host: localhost

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Whether identity provider metadata artifacts are expected to be found in the database.
# cas.authn.saml-idp.metadata.redis.idp-metadata-enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Login password of the redis server.
# cas.authn.saml-idp.metadata.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.authn.saml-idp.metadata.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.authn.saml-idp.metadata.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.authn.saml-idp.metadata.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.authn.saml-idp.metadata.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.authn.saml-idp.metadata.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.authn.saml-idp.metadata.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.authn.saml-idp.metadata.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.authn.saml-idp.metadata.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.authn.saml-idp.metadata.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.authn.saml-idp.metadata.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.authn.saml-idp.metadata.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.authn.saml-idp.metadata.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.authn.saml-idp.metadata.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.authn.saml-idp.metadata.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Redis server port.
# cas.authn.saml-idp.metadata.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.authn.saml-idp.metadata.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.authn.saml-idp.metadata.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.authn.saml-idp.metadata.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Command timeout.
# cas.authn.saml-idp.metadata.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RedisSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-redis
# Whether or not to use SSL for connection factory.
# cas.authn.saml-idp.metadata.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.saml-idp.metadata.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.saml-idp.metadata.rest.basic-auth-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.saml-idp.metadata.rest.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.saml-idp.metadata.rest.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.saml-idp.metadata.rest.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.saml-idp.metadata.rest.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.saml-idp.metadata.rest.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.saml-idp.metadata.rest.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.saml-idp.metadata.rest.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.saml-idp.metadata.rest.headers: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# Whether identity provider metadata artifacts are expected to be found in the database.
# cas.authn.saml-idp.metadata.rest.idp-metadata-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.saml-idp.metadata.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.metadata.RestSamlMetadataProperties
# Module: cas-server-support-saml-idp-metadata-rest
# The endpoint URL to contact and retrieve attributes.
# cas.authn.saml-idp.metadata.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.metadata.supported-content-types: 
# Deprecation Level: ERROR
# Deprecation Reason: supported-content-types setting is now moved into the mdq namespace.
# Deprecation Replacement: cas.authn.saml-idp.metadata.mdq.supported-content-types

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPProfileProperties.Saml2SloProfile
# Module: cas-server-support-saml-idp
# Whether the initial request should be explicitly url-decoded before it's consumed by the decoder.
# cas.authn.saml-idp.profile.slo.url-decode-redirect-request: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPProfileProperties.Saml2SsoPostSimpleSignProfile
# Module: cas-server-support-saml-idp
# Whether the initial request should be explicitly url-decoded before it's consumed by the decoder.
# cas.authn.saml-idp.profile.sso-post-simple-sign.url-decode-redirect-request: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPProfileProperties.Saml2SsoProfile
# Module: cas-server-support-saml-idp
# Whether the initial request should be explicitly url-decoded before it's consumed by the decoder.
# cas.authn.saml-idp.profile.sso.url-decode-redirect-request: false

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# Each individual attribute can be mapped to a particular name-format. Example: {@code attributeName->basic|uri|unspecified|custom-format-etc,...}.
# cas.authn.saml-idp.response.attribute-name-formats: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties$SignatureCredentialTypes
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# Indicate the encoding type of the credential used when rendering the saml response.
Available values are as follows:
<ul><li>{@code BASIC}: DER-Encoded format.</li><li>{@code X509}: PEM-encoded X509 format.</li></ul>
# cas.authn.saml-idp.response.credential-type: uri

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# Indicates the default name-format for all attributes in case the individual attribute is not individually mapped.
# cas.authn.saml-idp.response.default-attribute-name-format: uri

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# The default authentication context class to include in the response if none is specified via the service.
# cas.authn.saml-idp.response.default-authentication-context-class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# Whether error responses should be signed.
# cas.authn.saml-idp.response.sign-error: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPResponseProperties
# Module: cas-server-support-saml-idp
# Time unit in seconds used to skew authentication dates such as valid-from and valid-until elements.
# cas.authn.saml-idp.response.skew-allowance: PT30S

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.saml-idp.scope: 
# Deprecation Level: ERROR
# Deprecation Reason: Property is moved to cas.server.scope to be applied globally.
# Deprecation Replacement: cas.server.scope

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPTicketProperties
# Module: cas-server-support-saml-idp
# name that should be given to the saml artifact cache storage name.
# cas.authn.saml-idp.ticket.saml-artifacts-cache-storage-name: samlArtifactsCache

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.idp.SamlIdPTicketProperties
# Module: cas-server-support-saml-idp
# The name that should be given to the saml attribute query cache storage name.
# cas.authn.saml-idp.ticket.saml-attribute-query-cache-storage-name: samlAttributeQueryCache

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.shibboleth.ShibbolethIdPProperties
# Module: cas-server-support-shibboleth
# The server url of the shibboleth idp deployment.
# cas.authn.shib-idp.server-url: localhost

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.generic.ShiroAuthenticationProperties
# Module: cas-server-support-shiro-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.shiro.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.generic.ShiroAuthenticationProperties
# Module: cas-server-support-shiro-authentication
# Name of the authentication handler.
# cas.authn.shiro.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.shiro.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.shiro.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.shiro.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.shiro.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.shiro.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.shiro.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.shiro.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.shiro.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.shiro.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.shiro.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.shiro.principal-transformation.suffix: 

# Required: false
# Type: java.util.Set<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.generic.ShiroAuthenticationProperties
# Module: cas-server-support-shiro-authentication
# Required permissions that should be authorized by Shiro.
# cas.authn.shiro.required-permissions: 

# Required: false
# Type: java.util.Set<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.generic.ShiroAuthenticationProperties
# Module: cas-server-support-shiro-authentication
# Required roles that should be authorized by Shiro.
# cas.authn.shiro.required-roles: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.soap.SoapAuthenticationProperties
# Module: cas-server-support-soap-authentication
# The name of the authentication handler.
# cas.authn.soap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.soap.SoapAuthenticationProperties
# Module: cas-server-support-soap-authentication
# The order of this authentication handler in the chain.
# cas.authn.soap.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.soap.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.soap.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.soap.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.soap.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.soap.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.soap.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.soap.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.soap.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.soap.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.soap.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.soap.principal-transformation.suffix: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.soap.SoapAuthenticationProperties
# Module: cas-server-support-soap-authentication
# URL of the SOAP endpoint.
# cas.authn.soap.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Alternative header name to use in order to find the host address.
# cas.authn.spnego.alternative-remote-host-attribute: alternateRemoteHeader

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# When validating clients, specifies the DNS timeout used to look up an address.
# cas.authn.spnego.dns-timeout: PT2S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# The bean id of a webflow action whose job is to evaluate the client host to see if the request is authorized for spnego. Supported strategies include {@code hostnameSpnegoClientAction} where CAS checks to see if the requestâ€™s remote hostname matches a predefine pattern. and {@code ldapSpnegoClientAction} where CAS checks an LDAP instance for the remote hostname, to locate a pre-defined attribute whose mere existence would allow the webflow to resume to SPNEGO.
# cas.authn.spnego.host-name-client-action-strategy: hostnameSpnegoClientAction

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# A regex pattern that indicates whether the client host name is allowed for spnego.
# cas.authn.spnego.host-name-pattern-string: .+

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# A regex pattern that indicates whether the client IP is allowed for spnego.
# cas.authn.spnego.ips-to-check-pattern: 127.+

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.spnego.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Set if multiple Entries are allowed.
# cas.authn.spnego.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.spnego.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.spnego.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The bind credential to use when connecting to LDAP.
# cas.authn.spnego.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.spnego.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.spnego.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Sets the maximum amount of time that connects will block.
# cas.authn.spnego.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.spnego.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether to use a pooled connection factory in components.
# cas.authn.spnego.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.spnego.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Set if search referrals should be followed.
# cas.authn.spnego.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.spnego.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.spnego.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.spnego.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Keystore password.
# cas.authn.spnego.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.spnego.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.spnego.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.spnego.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.spnego.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Name of the LDAP handler.
# cas.authn.spnego.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.spnego.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.spnego.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.spnego.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Duration of time to wait for responses.
# cas.authn.spnego.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# SASL authorization id.
# cas.authn.spnego.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The SASL mechanism.
# cas.authn.spnego.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# SASL mutual auth is enabled?
# cas.authn.spnego.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# SASL quality of protected.
# cas.authn.spnego.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The SASL realm.
# cas.authn.spnego.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# SASL security strength.
# cas.authn.spnego.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Search handlers.
# cas.authn.spnego.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.spnego.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.spnego.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.spnego.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.spnego.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.spnego.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.spnego.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.spnego.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.spnego.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.spnego.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.spnego.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.spnego.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.spnego.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.spnego.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.spnego.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether subtree searching is allowed.
# cas.authn.spnego.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.spnego.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.spnego.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.spnego.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Password needed to open the truststore.
# cas.authn.spnego.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.spnego.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.spnego.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether connections should be validated when loaned out from the pool.
# cas.authn.spnego.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Period at which pool should be validated.
# cas.authn.spnego.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.spnego.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoLdapProperties
# Module: cas-server-support-spnego-webflow
# Period at which validation operations may time out.
# cas.authn.spnego.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.spnego.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.spnego.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.spnego.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.spnego.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.spnego.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.spnego.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.spnego.ldap.validator.type: search

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# If true, does not terminate authentication and allows CAS to resume and fallback to normal authentication means such as uid/psw via the login page. If disallowed, considers spnego authentication to be final in the event of failures.
# cas.authn.spnego.mixed-mode-authentication: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Name of the authentication handler.
# cas.authn.spnego.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Determines the header to set and the message prefix when negotiating spnego.
# cas.authn.spnego.ntlm: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Allows authentication if spnego credential is marked as NTLM.
# cas.authn.spnego.ntlm-allowed: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# The order of the authentication handler in the chain.
# cas.authn.spnego.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.spnego.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.spnego.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.spnego.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.spnego.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.spnego.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.spnego.principal-transformation.suffix: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# If specified, will create the principal by ths name on successful authentication.
# cas.authn.spnego.principal-with-domain-name: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.authn.spnego.principal.active-attribute-repository-ids: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.authn.spnego.principal.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.authn.spnego.principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.authn.spnego.principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.spnego.principal.principal-resolution-failure-fatal: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.spnego.principal.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.authn.spnego.principal.use-existing-principal-id: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties>
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Individual authentication settings for spengo that are grouped and fed to the spnego authentication object to form a collection.
# cas.authn.spnego.properties: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# Jcifs Netbios cache policy.
# cas.authn.spnego.properties[].cache-policy: 600

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs domain.
# cas.authn.spnego.properties[].jcifs-domain: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs domain controller.
# cas.authn.spnego.properties[].jcifs-domain-controller: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs netbios wins.
# cas.authn.spnego.properties[].jcifs-netbios-wins: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs password.
# cas.authn.spnego.properties[].jcifs-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs service password.
# cas.authn.spnego.properties[].jcifs-service-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs service principal.
# cas.authn.spnego.properties[].jcifs-service-principal: HTTP/cas.example.com@EXAMPLE.COM

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# The Jcifs username.
# cas.authn.spnego.properties[].jcifs-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoAuthenticationProperties
# Module: cas-server-support-spnego
# Spnego JCIFS timeout.
# cas.authn.spnego.properties[].timeout: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# If the authenticated principal cannot be determined from the spegno credential, will set the http status code to 401.
# cas.authn.spnego.send401-on-authentication-failure: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# In case LDAP is used to validate clients, this is the attribute that indicates the host.
# cas.authn.spnego.spnego-attribute-name: distinguishedName

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.spnego.SpnegoProperties
# Module: cas-server-support-spnego-webflow
# Begins negotiating spnego if the user-agent is one of the supported browsers.
# cas.authn.spnego.supported-browsers: MSIE,Trident,Firefox,AppleWebKit

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# Whether webflow auto-configuration should be enabled.
# cas.authn.spnego.webflow.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# The order in which the webflow is configured.
# cas.authn.spnego.webflow.order: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Use a local cache to reduce fetches..
# cas.authn.surrogate.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Remove idle connections from pool.
# cas.authn.surrogate.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# TCP connection timeout.
# cas.authn.surrogate.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Create the database if it doesn't exist.
# cas.authn.surrogate.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Database name.
# cas.authn.surrogate.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.authn.surrogate.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Max entries in local cache.
# cas.authn.surrogate.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Maximum connections to CouchDB.
# cas.authn.surrogate.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Largest allowable serialized object.
# cas.authn.surrogate.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Password for connection.
# cas.authn.surrogate.couch-db.password: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Use user profiles instead of surrogate/principal pairs. If +true+, a list of of principals the user is an authorized surrogate of is stored in the user profile in CouchDb. Most useful with CouchDb authentication or AUP.
# cas.authn.surrogate.couch-db.profile-based: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Proxy host.
# cas.authn.surrogate.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# proxy port.
# cas.authn.surrogate.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.authn.surrogate.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Retries for update conflicts.
# cas.authn.surrogate.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Socket idle timeout.
# cas.authn.surrogate.couch-db.socket-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Attribute with list of principals the user may surrogate when user surrogates are stored in user profiles.
# cas.authn.surrogate.couch-db.surrogate-principals-attribute: surrogateFor

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Connection url.
# cas.authn.surrogate.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Expect HTTP 100 Continue during connection.
# cas.authn.surrogate.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateCouchDbAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-couchdb
# Username for connection.
# cas.authn.surrogate.couch-db.username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.surrogate.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.surrogate.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.surrogate.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.surrogate.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.surrogate.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.surrogate.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.surrogate.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The JDBC driver used to connect to the database.
# cas.authn.surrogate.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.surrogate.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.authn.surrogate.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Allow hibernate to generate query statistics.
# cas.authn.surrogate.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.authn.surrogate.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.surrogate.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.surrogate.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.surrogate.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.surrogate.jdbc.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The database connection password.
# cas.authn.surrogate.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.surrogate.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.surrogate.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.surrogate.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.surrogate.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.surrogate.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.surrogate.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.surrogate.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.surrogate.jdbc.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# SQL query to use in order to retrieve the list of qualified accounts for impersonation for a given admin user.
# cas.authn.surrogate.jdbc.surrogate-account-query: SELECT surrogate_user AS surrogateAccount FROM surrogate WHERE username&#61;?

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# Surrogate query to use to determine whether an admin user can impersonate another user. The query must return an integer count of greater than zero.
# cas.authn.surrogate.jdbc.surrogate-search-query: SELECT COUNT(*) FROM surrogate WHERE username&#61;?

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The database connection URL.
# cas.authn.surrogate.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJdbcAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.surrogate.jdbc.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateJsonAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.surrogate.json.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.surrogate.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Set if multiple Entries are allowed.
# cas.authn.surrogate.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.surrogate.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.surrogate.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The bind credential to use when connecting to LDAP.
# cas.authn.surrogate.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.surrogate.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.surrogate.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Sets the maximum amount of time that connects will block.
# cas.authn.surrogate.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.surrogate.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether to use a pooled connection factory in components.
# cas.authn.surrogate.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.surrogate.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Set if search referrals should be followed.
# cas.authn.surrogate.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.surrogate.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.surrogate.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.surrogate.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Keystore password.
# cas.authn.surrogate.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.surrogate.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.surrogate.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.surrogate.ldap.max-pool-size: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Attribute that must be found on the LDAP entry linked to the admin user that tags the account as authorized for impersonation.
# cas.authn.surrogate.ldap.member-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# A pattern that is matched against the attribute value of the admin user, that allows for further authorization of the admin user and accounts qualified for impersonation. The regular expression pattern is expected to contain at least a single group whose value on a successful match indicates the qualified impersonated user by admin.
# cas.authn.surrogate.ldap.member-attribute-value-regex: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.surrogate.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Name of the LDAP handler.
# cas.authn.surrogate.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.surrogate.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.surrogate.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.surrogate.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Duration of time to wait for responses.
# cas.authn.surrogate.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# SASL authorization id.
# cas.authn.surrogate.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The SASL mechanism.
# cas.authn.surrogate.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# SASL mutual auth is enabled?
# cas.authn.surrogate.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# SASL quality of protected.
# cas.authn.surrogate.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The SASL realm.
# cas.authn.surrogate.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# SASL security strength.
# cas.authn.surrogate.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Search handlers.
# cas.authn.surrogate.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.surrogate.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.surrogate.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.surrogate.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.surrogate.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.surrogate.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.surrogate.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.surrogate.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.surrogate.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.surrogate.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.surrogate.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.surrogate.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.surrogate.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.surrogate.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.surrogate.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether subtree searching is allowed.
# cas.authn.surrogate.ldap.subtree-search: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# LDAP search filter used to locate the surrogate account.
# cas.authn.surrogate.ldap.surrogate-search-filter: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.surrogate.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.surrogate.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.surrogate.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Password needed to open the truststore.
# cas.authn.surrogate.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.surrogate.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.surrogate.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.authn.surrogate.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Period at which pool should be validated.
# cas.authn.surrogate.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.surrogate.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateLdapAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-ldap
# Period at which validation operations may time out.
# cas.authn.surrogate.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.surrogate.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.surrogate.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.surrogate.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.surrogate.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.surrogate.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.surrogate.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.surrogate.ldap.validator.type: search

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.surrogate.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.authn.surrogate.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.authn.surrogate.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.authn.surrogate.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.authn.surrogate.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.authn.surrogate.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.authn.surrogate.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.authn.surrogate.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.authn.surrogate.mail.validate-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.authn.surrogate.principal.active-attribute-repository-ids: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.authn.surrogate.principal.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.authn.surrogate.principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.authn.surrogate.principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.surrogate.principal.principal-resolution-failure-fatal: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.surrogate.principal.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.authn.surrogate.principal.use-existing-principal-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateRestfulAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.authn.surrogate.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateRestfulAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.authn.surrogate.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateRestfulAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.authn.surrogate.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateRestfulAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.authn.surrogate.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateRestfulAuthenticationProperties
# Module: cas-server-support-surrogate-authentication-rest
# The endpoint URL to contact and retrieve attributes.
# cas.authn.surrogate.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The separator character used to distinguish between the surrogate account and the admin account.
# cas.authn.surrogate.separator: +

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.surrogate.simple.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Set if multiple Entries are allowed.
# cas.authn.surrogate.simple.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.surrogate.simple.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.surrogate.simple.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The bind credential to use when connecting to LDAP.
# cas.authn.surrogate.simple.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.surrogate.simple.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.surrogate.simple.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Sets the maximum amount of time that connects will block.
# cas.authn.surrogate.simple.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.surrogate.simple.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether to use a pooled connection factory in components.
# cas.authn.surrogate.simple.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.surrogate.simple.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Set if search referrals should be followed.
# cas.authn.surrogate.simple.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.surrogate.simple.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.surrogate.simple.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.surrogate.simple.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Keystore password.
# cas.authn.surrogate.simple.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.surrogate.simple.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.surrogate.simple.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.surrogate.simple.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.surrogate.simple.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Name of the LDAP handler.
# cas.authn.surrogate.simple.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.surrogate.simple.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.surrogate.simple.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.surrogate.simple.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Duration of time to wait for responses.
# cas.authn.surrogate.simple.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# SASL authorization id.
# cas.authn.surrogate.simple.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The SASL mechanism.
# cas.authn.surrogate.simple.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# SASL mutual auth is enabled?
# cas.authn.surrogate.simple.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# SASL quality of protected.
# cas.authn.surrogate.simple.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The SASL realm.
# cas.authn.surrogate.simple.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# SASL security strength.
# cas.authn.surrogate.simple.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Search handlers.
# cas.authn.surrogate.simple.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.surrogate.simple.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.surrogate.simple.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.surrogate.simple.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.surrogate.simple.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.surrogate.simple.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.surrogate.simple.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.surrogate.simple.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.surrogate.simple.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.surrogate.simple.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.surrogate.simple.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.surrogate.simple.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.surrogate.simple.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.surrogate.simple.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.surrogate.simple.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether subtree searching is allowed.
# cas.authn.surrogate.simple.subtree-search: true

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Define the list of accounts that are allowed to impersonate. This is done in a key-value structure where the key is the admin user and the value is a comma-separated list of identifiers that can be impersonated by the admin-user.
# cas.authn.surrogate.simple.surrogates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.surrogate.simple.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.surrogate.simple.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.surrogate.simple.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Password needed to open the truststore.
# cas.authn.surrogate.simple.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.surrogate.simple.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.surrogate.simple.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether connections should be validated when loaned out from the pool.
# cas.authn.surrogate.simple.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Period at which pool should be validated.
# cas.authn.surrogate.simple.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.surrogate.simple.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateSimpleAuthenticationProperties
# Module: cas-server-support-surrogate-webflow
# Period at which validation operations may time out.
# cas.authn.surrogate.simple.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.surrogate.simple.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.surrogate.simple.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.surrogate.simple.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.surrogate.simple.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.surrogate.simple.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.surrogate.simple.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.surrogate.simple.validator.type: search

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.authn.surrogate.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.authn.surrogate.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.authn.surrogate.sms.text: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.surrogate.SurrogateAuthenticationTicketGrantingTicketProperties
# Module: cas-server-support-surrogate-webflow
# Timeout in seconds to kill the surrogate session and consider tickets expired.
# cas.authn.surrogate.tgt.time-to-kill-in-seconds: 1800

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties
# Module: cas-server-support-syncope-authentication
# A number of authentication handlers are allowed to determine whether they can operate on the provided credential and as such lend themselves to be tried and tested during the authentication handler selection phase. The credential criteria may be one of the following options:<ul> <li>1) A regular expression pattern that is tested against the credential identifier.</li> <li>2) A fully qualified class name of your own design that implements {@code Predicate}.</li> <li>3) Path to an external Groovy script that implements the same interface.</li> </ul>
# cas.authn.syncope.credential-criteria: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties
# Module: cas-server-support-syncope-authentication
# Syncope domain used for authentication, etc.
# cas.authn.syncope.domain: Master

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties
# Module: cas-server-support-syncope-authentication
# Name of the authentication handler.
# cas.authn.syncope.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.authn.syncope.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.authn.syncope.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.authn.syncope.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.authn.syncope.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.authn.syncope.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.syncope.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.syncope.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.syncope.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.syncope.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.syncope.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.syncope.principal-transformation.suffix: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties
# Module: cas-server-support-syncope-authentication
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.syncope.state: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties
# Module: cas-server-support-syncope-authentication
# Syncope instance URL primary used for REST.
# cas.authn.syncope.url: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.throttle.app-code: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.throttle.core.app-code

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.throttle.Bucket4jThrottleProperties
# Module: cas-server-support-throttle-bucket4j
# Whether the request should block until capacity becomes available.
# cas.authn.throttle.bucket4j.blocking: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.Bucket4jThrottleProperties
# Module: cas-server-support-throttle-bucket4j
# Number of tokens that can be used within the time window.
# cas.authn.throttle.bucket4j.capacity: 120

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.Bucket4jThrottleProperties
# Module: cas-server-support-throttle-bucket4j
# Indicate the overdraft used if requests are above the average capacity. A positive value activates a greedy strategy for producing tokens for capacity.
# cas.authn.throttle.bucket4j.overdraft: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.Bucket4jThrottleProperties
# Module: cas-server-support-throttle-bucket4j
# Time window in which capacity can be allowed.
# cas.authn.throttle.bucket4j.range-in-seconds: 60

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.ThrottleCoreProperties
# Module: cas-server-support-throttle
# Application code used to identify this application in the audit logs.
# cas.authn.throttle.core.app-code: CAS

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.ThrottleCoreProperties
# Module: cas-server-support-throttle
# Username parameter to use in order to extract the username from the request.
# cas.authn.throttle.core.username-parameter: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.ThrottleFailureProperties
# Module: cas-server-support-throttle
# Failure code to record in the audit log. Generally this indicates an authentication failure event.
# cas.authn.throttle.failure.code: AUTHENTICATION_FAILED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.ThrottleFailureProperties
# Module: cas-server-support-throttle
# Period of time in seconds during which the threshold applies.
# cas.authn.throttle.failure.range-seconds: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.ThrottleFailureProperties
# Module: cas-server-support-throttle
# Number of failed login attempts permitted in the above period. All login throttling components that ship with CAS limit successive failed login attempts that exceed a threshold rate in failures per second.
# cas.authn.throttle.failure.threshold: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports both synchronous and asynchronous backups. By default, backup operations are synchronous. In this case, backup operations block operations until backups are successfully copied to backup members (or deleted from backup members in case of remove) and acknowledgements are received. Therefore, backups are updated before a put operation is completed, provided that the cluster is stable. Asynchronous backups, on the other hand, do not block operations. They are fire and forget and do not require acknowledgements; the backup operations are performed at some point in time.
# cas.authn.throttle.hazelcast.cluster.core.async-backup-count: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Used when replication is turned on with {@link #isReplicated()}. <p> If a new member joins the cluster, there are two ways you can handle the initial provisioning that is executed to replicate all existing values to the new member. Each involves how you configure the async fill up. <ul> <li>First, you can configure async fill up to true, which does not block reads while the fill up operation is underway. That way, you have immediate access on the new member, but it will take time until all the values are eventually accessible. Not yet replicated values are returned as non-existing (null). </li> <li>Second, you can configure for a synchronous initial fill up (by configuring the async fill up to false), which blocks every read or write access to the map until the fill up operation is finished. Use this with caution since it might block your application from operating.</li> </ul>
# cas.authn.throttle.hazelcast.cluster.core.async-fillup: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# To provide data safety, Hazelcast allows you to specify the number of backup copies you want to have. That way, data on a cluster member will be copied onto other member(s). To create synchronous backups, select the number of backup copies. When this count is 1, a map entry will have its backup on one other member in the cluster. If you set it to 2, then a map entry will have its backup on two other members. You can set it to 0 if you do not want your entries to be backed up, e.g., if performance is more important than backing up. The maximum value for the backup count is 6. Sync backup operations have a blocking cost which may lead to latency issues.
# cas.authn.throttle.hazelcast.cluster.core.backup-count: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. Its data structures are CP with respect to the CAP principle, i.e., they always maintain linearizability and prefer consistency over availability during network partitions. Besides network partitions, CP Subsystem withstands server and client failures. All members of a Hazelcast cluster do not necessarily take part in CP Subsystem. The number of Hazelcast members that take part in CP Subsystem is specified here. CP Subsystem must have at least 3 CP members.
# cas.authn.throttle.hazelcast.cluster.core.cp-member-count: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports policy-based eviction for distributed maps. Currently supported policies are LRU (Least Recently Used) and LFU (Least Frequently Used) and NONE. See <a href="http://docs.hazelcast.org/docs/latest-development/manual/html/Distributed_Data_Structures/Map/Map_Eviction.html">this</a> for more info.
# cas.authn.throttle.hazelcast.cluster.core.eviction-policy: LRU

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# The instance name.
# cas.authn.throttle.hazelcast.cluster.core.instance-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast has a flexible logging configuration and doesn't depend on any logging framework except JDK logging. It has in-built adaptors for a number of logging frameworks and also supports custom loggers by providing logging interfaces. To use built-in adaptors you should set this setting to one of predefined types below. <ul> <li>{@code jdk}: JDK logging</li> <li>{@code log4j}: Log4j</li> <li>{@code slf4j}: Slf4j</li> <li>{@code none}: Disable logging</li> </ul>
# cas.authn.throttle.hazelcast.cluster.core.logging-type: slf4j

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Define how data items in Hazelcast maps are merged together from source to destination. By default, merges map entries from source to destination if they don't exist in the destination map. Accepted values are: <ul>     <li>{@code PUT_IF_ABSENT}: Merges data structure entries from source to destination if they don't exist in the destination data structure.</li>     <li>{@code HIGHER_HITS}:  * Merges data structure entries from source to destination data structure if the source entry     has more hits than the destination one.</li>     <li>{@code DISCARD}: Merges only entries from the destination data structure and discards all entries from the source data structure. </li>     <li>{@code PASS_THROUGH}: Merges data structure entries from source to destination directly unless the merging entry is null</li>     <li>{@code EXPIRATION_TIME}: Merges data structure entries from source to destination data structure if the source entry     will expire later than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_UPDATE}:  Merges data structure entries from source to destination data structure if the source entry was     updated more frequently than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_ACCESS}: Merges data structure entries from source to destination data structure if the source entry     has been accessed more recently than the destination entry. This policy can only be used if the clocks of the nodes are in sync.</li> </ul>
# cas.authn.throttle.hazelcast.cluster.core.map-merge-policy: PUT_IF_ABSENT

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Max timeout of heartbeat in seconds for a node to assume it is dead.
# cas.authn.throttle.hazelcast.cluster.core.max-no-heartbeat-seconds: 300

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the maximum size of the map.
# cas.authn.throttle.hazelcast.cluster.core.max-size: 85

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# <ul> <li>{@code FREE_HEAP_PERCENTAGE}: Policy based on minimum free JVM heap memory percentage per JVM.</li> <li>{@code FREE_HEAP_SIZE}: Policy based on minimum free JVM heap memory in megabytes per JVM.</li> <li>{@code FREE_NATIVE_MEMORY_PERCENTAGE}: Policy based on minimum free native memory percentage per Hazelcast instance.</li> <li>{@code FREE_NATIVE_MEMORY_SIZE}: Policy based on minimum free native memory in megabytes per Hazelcast instance.</li> <li>{@code PER_NODE}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code PER_PARTITION}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each partition.</li> <li>{@code USED_HEAP_PERCENTAGE}: Policy based on maximum used JVM heap memory percentage per data structure (map, cache etc) on each Hazelcast instance .</li> <li>{@code USED_HEAP_SIZE}: Policy based on maximum used JVM heap memory in megabytes per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_PERCENTAGE}: Policy based on maximum used native memory percentage per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_SIZE}: Policy based on maximum used native memory in megabytes per data structure (map, cache etc) on each Hazelcast instance .</li> </ul>
# cas.authn.throttle.hazelcast.cluster.core.max-size-policy: USED_HEAP_PERCENTAGE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# With {@code PartitionGroupConfig}, you can control how primary and backup partitions are mapped to physical Members. Hazelcast will always place partitions on different partition groups so as to provide redundancy. Accepted value are: {@code PER_MEMBER, HOST_AWARE, CUSTOM, ZONE_AWARE, SPI}. In all cases a partition will never be created on the same group. If there are more partitions defined than there are partition groups, then only those partitions, up to the number of partition groups, will be created. For example, if you define 2 backups, then with the primary, that makes 3. If you have only two partition groups only two will be created. <ul> <li>{@code}PER_MEMBER Partition Groups}: This is the default partition scheme and is used if no other scheme is defined. Each Member is in a group of its own.</li> <li>{@code}HOST_AWARE Partition Groups}: In this scheme, a group corresponds to a host, based on its IP address. Partitions will not be written to any other members on the same host. This scheme provides good redundancy when multiple instances are being run on the same host.</li> <li>{@code}CUSTOM Partition Groups}: In this scheme, IP addresses, or IP address ranges, are allocated to groups. Partitions are not written to the same group. This is very useful for ensuring partitions are written to different racks or even availability zones.</li> <li>{@code}ZONE_AWARE Partition Groups}: In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group. This is very useful for ensuring partitions are written to availability zones or different racks without providing the IP addresses to the config ahead.</li> <li>{@code}SPI Partition Groups}:  In this scheme, groups are allocated according to the implementation provided by Discovery SPI.</li> </ul>
# cas.authn.throttle.hazelcast.cluster.core.partition-member-group-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# A Replicated Map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high speed access. A Replicated Map does not partition data (it does not spread data to different cluster members); instead, it replicates the data to all members. Replication leads to higher memory consumption. However, a Replicated Map has faster read and write access since the data is available on all members. Writes could take place on local/remote members in order to provide write-order, eventually being replicated to all other members. <br><p> If you have a large cluster or very high occurrences of updates, the Replicated Map may not scale linearly as expected since it has to replicate update operations to all members in the cluster. Since the replication of updates is performed in an asynchronous manner, Hazelcast recommends you enable back pressure in case your system has high occurrences of updates. Note that Replicated Map does not guarantee eventual consistency because there are some edge cases that fail to provide consistency. <br><p> Replicated Map uses the internal partition system of Hazelcast in order to serialize updates happening on the same key at the same time. This happens by sending updates of the same key to the same Hazelcast member in the cluster. <br><p> Due to the asynchronous nature of replication, a Hazelcast member could die before successfully replicating a "write" operation to other members after sending the "write completed" response to its caller during the write process. In this scenario, Hazelcastâ€™s internal partition system promotes one of the replicas of the partition as the primary one. The new primary partition does not have the latest "write" since the dead member could not successfully replicate the update.
# cas.authn.throttle.hazelcast.cluster.core.replicated: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Connection timeout in seconds for the TCP/IP config and members joining the cluster.
# cas.authn.throttle.hazelcast.cluster.core.timeout: 5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS access key.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.access-key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# The maximum amount of time Hazelcast will try to connect to a well known member before giving up. Setting this value too low could mean that a member is not able to connect to a cluster. Setting the value too high means that member startup could slow down because of longer timeouts (for example, when a well known member is not up). Increasing this value is recommended if you have many IPs listed and the members cannot properly build up the cluster. Its default value is 5.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.connection-timeout-seconds: 5

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Host header. i.e. {@code ec2.amazonaws.com}. The URL that is the entry point for a web service.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.host-header: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If you do not want to use access key and secret key, you can specify iam-role. Hazelcast fetches your credentials by using your IAM role. This setting only affects deployments on Amazon EC2. If you are deploying CAS in an Amazon ECS environment, the role should not be specified. The role is fetched from the task definition that is assigned to run CAS.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.iam-role: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Hazelcast port. Typically may be set to {@code 5701}. You can set searching for other ports rather than 5701 if you've members on different ports.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS region. i.e. {@code us-east-1}. The region where your members are running.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.region: us-east-1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS secret key.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.secret-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a security group is configured, only instances within that security group are selected.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.security-group-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.tag-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.authn.throttle.hazelcast.cluster.discovery.aws.tag-value: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client ID.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.client-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client secret.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.client-secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The name of the tag on the hazelcast vm resources. With every Hazelcast Virtual Machine you deploy in your resource group, you need to ensure that each VM is tagged with the value of cluster-id defined in your Hazelcast configuration. The only requirement is that every VM can access each other either by private or public IP address.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.cluster-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure resource group name of the cluster. You can find this in the Azure portal or CLI.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.group-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure subscription ID.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.subscription-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory tenant ID.
# cas.authn.throttle.hazelcast.cluster.discovery.azure.tenant-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.dns-provider.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma separated list of docker services and associated ports to be considered peers of this service. Note, this must include itself (the definition of serviceName and servicePort) if the service is to cluster with other instances of this service.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.dns-provider.peer-services: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Name of the docker service that this instance is running in.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.dns-provider.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Internal port that hazelcast is listening on.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.dns-provider.service-port: 5701

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of Docker network names to discover matching services on.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-network-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service label=values to find tasks/containers on the networks.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-service-labels: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service names to find tasks/containers on the networks.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-service-names: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# The raw port that hazelcast is listening on. IMPORTANT: This is NOT a docker "published" port, nor is it necessarily a EXPOSEd port. It is the hazelcast port that the service is configured with, this must be the same for all matched containers in order to work, and just using the default of 5701 is the simplest way to go.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.hazelcast-peer-port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# If Swarm Mgr URI is SSL, to enable skip-verify for it.
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.skip-verify-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Swarm Manager URI (overrides DOCKER_HOST).
# cas.authn.throttle.hazelcast.cluster.discovery.docker-swarm.member-provider.swarm-mgr-uri: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDiscoveryProperties
# Module: cas-server-support-hazelcast-core
# Whether discovery should be enabled via the configured strategies below.
# cas.authn.throttle.hazelcast.cluster.discovery.enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider credential, can be thought of as a password for cloud services.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.credential: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for cloud providers which require an extra JSON or P12 key file. This denotes the path of that file. Only tested with Google Compute Engine. (Required if Google Compute Engine is used.)
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.credential-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines the endpoint for a generic API such as OpenStack or CloudStack (optional).
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters instance groups (optional). When used with AWS it maps to security group.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.group: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider identity, can be thought of as a user name for cloud services.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.identity: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Port which the hazelcast instance service uses on the cluster member. Default value is 5701. (optional)
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.port: -1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# String value that is used to identify ComputeService provider. For example, "google-compute-engine" is used for Google Cloud services. See <a href="https://jclouds.apache.org/reference/providers/#compute">here</a> for more info.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.provider: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines region for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.regions: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for IAM role support specific to AWS (optional, but if defined, no identity or credential should be defined in the configuration).
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.role-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional). Can be used with comma separated values for multiple values.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.tag-keys: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional) Can be used with comma separated values for multiple values.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.tag-values: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines zone for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.authn.throttle.hazelcast.cluster.discovery.jclouds.zones: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the number of retries to Kubernetes API. Defaults to: 3.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.api-retries: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an oauth token for the kubernetes client to access the kubernetes REST API. Defaults to reading the token from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/token}.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.api-token: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# CA Authority certificate from Kubernetes Master. Defaults to reading the certificate from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/ca.crt}.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.ca-certificate: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an alternative address for the kubernetes master. Defaults to: {@code https://kubernetes.default.svc}
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.kubernetes-master: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the namespace of the application POD through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.namespace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label to lookup through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.pod-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.pod-label-value: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if not ready addresses should be evaluated to be discovered on startup.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.resolve-not-ready-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup domain. This is defined as something similar to {@code my-svc.my-namespace.svc.cluster.local}.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-dns: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup timeout in seconds. Defaults to 5 secs.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-dns-timeout: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label to lookup through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-label-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service name of the POD to lookup through the Service Discovery REST API of Kubernetes.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# If specified with a value greater than 0, its value defines the endpoint port of the service (overriding the default).
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.service-port: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if the node name should be used as external address, instead of looking up the external IP using the {@code /nodes} resource. Default is false.
# cas.authn.throttle.hazelcast.cluster.discovery.kubernetes.use-node-name-as-external-address: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Enables a multicast configuration using a group address and port. Contains the configuration for the multicast discovery mechanism. With the multicast discovery mechanism Hazelcast allows Hazelcast members to find each other using multicast. So Hazelcast members do not need to know concrete addresses of members, they just multicast to everyone listening. It depends on your environment if multicast is possible or allowed; otherwise you need to have a look at the tcp/ip cluster
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast group address used for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.group: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast port used for discovery.
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.port: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Gets the time to live for the multicast package in seconds. This is the default time-to-live for multicast packets sent out on the socket
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.time-to-live: 32

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# specifies the time in seconds that a member should wait for a valid multicast response from another member running in the network before declaring itself the leader member (the first member joined to the cluster) and creating its own cluster. This only applies to the startup of members where no leader has been assigned yet. If you specify a high value, such as 60 seconds, it means that until a leader is selected, each member will wait 60 seconds before moving on. Be careful when providing a high value. Also, be careful not to set the value too low, or the members might give up too early and create their own cluster.
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.timeout: 2

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Multicast trusted interfaces for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.authn.throttle.hazelcast.cluster.discovery.multicast.trusted-interfaces: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# IPv6 support has been switched off by default, since some platforms have issues in use of IPv6 stack. And some other platforms such as Amazon AWS have no support at all. To enable IPv6 support set this setting to false.
# cas.authn.throttle.hazelcast.cluster.network.ipv4-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# If this property is set, then this is the address where the server socket is bound to.
# cas.authn.throttle.hazelcast.cluster.network.local-address: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the well known members. If members is empty, calling this method will have the same effect as calling clear(). A member can be a comma separated string, e..g '10.11.12.1,10.11.12.2' which indicates multiple members are going to be added.
# cas.authn.throttle.hazelcast.cluster.network.members: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify which network interfaces that Hazelcast should use. Servers mostly have more than one network interface, so you may want to list the valid IPs. Range characters ('*' and '-') can be used for simplicity. For instance, 10.3.10.* refers to IPs between 10.3.10.0 and 10.3.10.255. Interface 10.3.10.4-18 refers to IPs between 10.3.10.4 and 10.3.10.18 (4 and 18 included). If network interface configuration is enabled (it is disabled by default) and if Hazelcast cannot find an matching interface, then it will print a message on the console and will not start on that node. Interfaces can be separated by a comma.
# cas.authn.throttle.hazelcast.cluster.network.network-interfaces: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The outbound ports for the Hazelcast configuration.
# cas.authn.throttle.hazelcast.cluster.network.outbound-ports: 

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify the ports which Hazelcast will use to communicate between cluster members. The name of the parameter for this is port and its default value is 5701. By default, Hazelcast will try 100 ports to bind. Meaning that, if you set the value of port as 5701, as members are joining to the cluster, Hazelcast tries to find ports between 5701 and 5801.
# cas.authn.throttle.hazelcast.cluster.network.port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You may also want to choose to use only one port. In that case, you can disable the auto-increment feature of port.
# cas.authn.throttle.hazelcast.cluster.network.port-auto-increment: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The default public address to be advertised to other cluster members and clients.
# cas.authn.throttle.hazelcast.cluster.network.public-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Enable TCP/IP config. Contains the configuration for the Tcp/Ip join mechanism. The Tcp/Ip join mechanism relies on one or more well known members. So when a new member wants to join a cluster, it will try to connect to one of the well known members. If it is able to connect, it will now about all members in the cluster and doesn't rely on these well known members anymore.
# cas.authn.throttle.hazelcast.cluster.network.tcpip-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Whether WAN should be enabled.
# cas.authn.throttle.hazelcast.cluster.wan-replication.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Name of this replication group.
# cas.authn.throttle.hazelcast.cluster.wan-replication.replication-name: apereo-cas

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# List of target clusters to be used for synchronization and replication.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
    <li>{@code ACK_ON_RECEIPT}: ACK after WAN operation is received by the target cluster (without waiting the result of actual operation invocation).</li>
    <li>{@code ACK_ON_OPERATION_COMPLETE}: Wait till the operation is complete on target cluster.</li>
</ul>
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].acknowledge-type: ACK_ON_OPERATION_COMPLETE

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum amount of time, in milliseconds, to be waited before
sending a batch of events in case batch.size is not reached.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].batch-maximum-delay-milliseconds: 1000

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum size of events that are sent to the target cluster in a single batch.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].batch-size: 500

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the cluster name used as an endpoint group password for authentication
on the target endpoint.
If there is no separate publisher ID property defined, this cluster name
will also be used as a WAN publisher ID. This ID is then used for
identifying the publisher.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].cluster-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Strategy for checking the consistency of data between replicas.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].consistency-check-strategy: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Comma separated list of endpoints in this replication group.
IP addresses and ports of the cluster members for which the WAN replication is implemented. These endpoints are not necessarily
the entire target cluster and WAN does not perform the discovery of other members in the target cluster. It only expects
that these IP addresses (or at least some of them) are available.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].endpoints: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The number of threads that the replication executor will have. The executor is used to send WAN
events to the endpoints and ideally you want to have one thread per endpoint. If this property is omitted
and you have specified the endpoints property, this will be the case. If necessary you can manually define
the number of threads that the executor will use. Once the executor has been initialized there is thread
affinity between the discovered endpoints and the executor threads - all events for a single endpoint will
go through a single executor thread, preserving event order. It is important to determine which number of
executor threads is a good value. Failure to do so can lead to performance issues - either contention on a
too small number of threads or wasted threads that will not be performing any work.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].executor-thread-count: 2

# Required: false
# Type: java.util.Map<String,Comparable>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The WAN publisher properties.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].properties: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Publisher class name for WAN replication.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].publisher-class-name: com.hazelcast.enterprise.wan.replication.WanBatchReplication

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Returns the publisher ID used for identifying the publisher.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].publisher-id: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# For huge clusters or high data mutation rates, you might need to increase the replication queue size.
The default queue size for replication queues is 10,000. This means, if you have heavy put/update/remove
rates, you might exceed the queue size so that the oldest, not yet replicated, updates might get
lost.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].queue-capacity: 10_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
<li>{@code THROW_EXCEPTION}: Instruct WAN replication implementation to throw an exception and doesn't allow further processing.</li>
<li>{@code DISCARD_AFTER_MUTATION}: Instruct WAN replication implementation to drop new events when WAN event queues are full.</li>
<li>{@code THROW_EXCEPTION_ONLY_IF_REPLICATION_ACTIVE}: Similar to {@code THROW_EXCEPTION} but only throws exception when WAN replication is active.
* Discards the new events if WAN replication is stopped.</li>
</ul>
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].queue-full-behavior: THROW_EXCEPTION

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Time, in milliseconds, to be waited for the acknowledgment of a sent WAN event to target cluster.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].response-timeout-milliseconds: 60_000

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# When set to true, only the latest events (based on key) are selected and sent in a batch.
# cas.authn.throttle.hazelcast.cluster.wan-replication.targets[].snapshot-enabled: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables compression when default java serialization is used.
# cas.authn.throttle.hazelcast.core.enable-compression: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables scripting from Management Center.
# cas.authn.throttle.hazelcast.core.enable-management-center-scripting: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast enterprise license key.
# cas.authn.throttle.hazelcast.core.license-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Audit query to execute against the database to locate audit records based on IP, user, date and an application code along with the relevant audit action.
# cas.authn.throttle.jdbc.audit-query: SELECT AUD_DATE FROM COM_AUDIT_TRAIL WHERE AUD_CLIENT_IP &#61; ? AND AUD_USER &#61; ? AND AUD_ACTION &#61; ? AND APPLIC_CD &#61; ? AND AUD_DATE &gt;&#61; ? ORDER BY AUD_DATE DESC

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.authn.throttle.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.authn.throttle.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.authn.throttle.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.authn.throttle.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.authn.throttle.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.authn.throttle.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.authn.throttle.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The JDBC driver used to connect to the database.
# cas.authn.throttle.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.authn.throttle.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.authn.throttle.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Allow hibernate to generate query statistics.
# cas.authn.throttle.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.authn.throttle.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.authn.throttle.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.authn.throttle.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.throttle.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.authn.throttle.jdbc.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The database connection password.
# cas.authn.throttle.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.authn.throttle.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.authn.throttle.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.authn.throttle.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.authn.throttle.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.authn.throttle.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.authn.throttle.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.authn.throttle.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.authn.throttle.jdbc.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The database connection URL.
# cas.authn.throttle.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.throttle.JdbcThrottleProperties
# Module: cas-server-support-throttle-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.authn.throttle.jdbc.user: sa

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.authn.throttle.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.authn.throttle.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.authn.throttle.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.authn.throttle.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.throttle.username-parameter: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the core namespace.
# Deprecation Replacement: cas.authn.throttle.core.username-parameter

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.token.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.token.crypto.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto encryption operations are enabled.
# cas.authn.token.crypto.encryption-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.token.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.token.crypto.encryption.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto signing operations are enabled.
# cas.authn.token.crypto.signing-enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.token.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.token.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionOptionalSigningOptionalJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.token.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.token.TokenAuthenticationProperties
# Module: cas-server-support-token-webflow
# Name of the authentication handler.
# cas.authn.token.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.token.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.token.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.token.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.token.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.token.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.token.principal-transformation.suffix: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates
# Owner: org.apereo.cas.configuration.model.support.token.TokenAuthenticationProperties
# Module: cas-server-support-token-webflow
# Define the scope and state of this authentication handler and the lifecycle in which it can be invoked or activated.
# cas.authn.token.state: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# Whether webflow auto-configuration should be enabled.
# cas.authn.token.webflow.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# The order in which the webflow is configured.
# cas.authn.token.webflow.order: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.authn.trusted.active-attribute-repository-ids: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.authn.trusted.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Indicates the name of the authentication handler.
# cas.authn.trusted.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Order of the authentication handler in the chain.
# cas.authn.trusted.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.authn.trusted.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.authn.trusted.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.trusted.principal-resolution-failure-fatal: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Indicates the name of the request header that may be extracted from the request as the indicated authenticated userid from the remote authn system.
# cas.authn.trusted.remote-principal-header: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.trusted.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.support.trusted.TrustedAuthenticationProperties
# Module: cas-server-support-trusted-webflow
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.authn.trusted.use-existing-principal-id: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties>
# Owner: org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties
# Module: cas-server-core-authentication
# Collection of settings related to WsFed delegated authentication. These settings are required to be indexed (i.e. wsfed[0].xyz).
# cas.authn.wsfed: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationIdentityProviderProperties
# Module: cas-server-support-ws-idp
# At this point, by default security token serviceâ€™s endpoint operate using a single realm configuration and identity provider configuration is only able to recognize and request tokens for a single realm. Registration of clients need to ensure this value is matched.
# cas.authn.wsfed-idp.idp.realm: urn:org:apereo:cas:ws:idp:realm-CAS

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationIdentityProviderProperties
# Module: cas-server-support-ws-idp
# Realm name.
# cas.authn.wsfed-idp.idp.realm-name: CAS

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Set whether client lifetime is accepted.
# cas.authn.wsfed-idp.sts.conditions-accept-client-lifetime: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# If requested lifetime exceeds shall it fail (default) or overwrite with maximum lifetime.
# cas.authn.wsfed-idp.sts.conditions-fail-lifetime-exceedance: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Get how long (in seconds) a client-supplied Created Element is allowed to be in the future. The default is 60 seconds to avoid common problems relating to clock skew.
# cas.authn.wsfed-idp.sts.conditions-future-time-to-live: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Set the default lifetime in seconds for issued SAML tokens.
# cas.authn.wsfed-idp.sts.conditions-lifetime: PT30M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Set the maximum lifetime in seconds for issued SAML tokens.
# cas.authn.wsfed-idp.sts.conditions-max-lifetime: PT12H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.wsfed-idp.sts.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.wsfed-idp.sts.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.wsfed-idp.sts.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.wsfed-idp.sts.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.wsfed-idp.sts.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.wsfed-idp.sts.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.authn.wsfed-idp.sts.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Collection of fully-qualified claims prefixed with the appropriate namespace that are expected to be released via attribute release policy.
# cas.authn.wsfed-idp.sts.custom-claims: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Whether tokens generated by STS should encrypted.
# cas.authn.wsfed-idp.sts.encrypt-tokens: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Keystore path used to encrypt tokens.
# cas.authn.wsfed-idp.sts.encryption-keystore-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Keystore password used to encrypt tokens.
# cas.authn.wsfed-idp.sts.encryption-keystore-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceRealmProperties
# Module: cas-server-support-ws-sts
# Issuer/name of the realm identified and registered with STS.
# cas.authn.wsfed-idp.sts.realm.issuer: CAS

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceRealmProperties
# Module: cas-server-support-ws-sts
# Key alias associated with the this realm.
# cas.authn.wsfed-idp.sts.realm.key-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceRealmProperties
# Module: cas-server-support-ws-sts
# Key alias associated with the this realm.
# cas.authn.wsfed-idp.sts.realm.keystore-alias: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceRealmProperties
# Module: cas-server-support-ws-sts
# Keystore path associated with the this realm.
# cas.authn.wsfed-idp.sts.realm.keystore-file: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceRealmProperties
# Module: cas-server-support-ws-sts
# Keystore password associated with the this realm.
# cas.authn.wsfed-idp.sts.realm.keystore-password: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Set whether the provided token will be signed or not. Default is true.
# cas.authn.wsfed-idp.sts.sign-tokens: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Keystore path used to sign tokens.
# cas.authn.wsfed-idp.sts.signing-keystore-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# Keystore password used to sign tokens.
# cas.authn.wsfed-idp.sts.signing-keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# When generating a SAML token, indicates the subject name-id format to use. Accepted values are: <ul>     <li>unspecified</li>     <li>email</li>     <li>transient</li>     <li>persistent</li>     <li>entity</li> </ul>
# cas.authn.wsfed-idp.sts.subject-name-id-format: unspecified

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationSecurityTokenServiceProperties
# Module: cas-server-support-ws-sts
# When generating a SAML token, indicates the subject name-id qualifier to use.
# cas.authn.wsfed-idp.sts.subject-name-qualifier: http://cxf.apache.org/sts

# Required: true
# Type: Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or
files found either on the classpath or outside somewhere
in the file system.
# cas.authn.wsfed[].attribute-mutator-script.location: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Whether CAS should enable its own attribute resolution machinery
after having received a response from wsfed.
# cas.authn.wsfed[].attribute-resolver-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Indicates how attributes should be recorded into the principal object.
Useful if you wish to additionally resolve attributes on top of what wsfed provides.
Accepted values are {@code CAS,WSFED,BOTH}.
# cas.authn.wsfed[].attributes-type: WSFED

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Whether CAS should auto redirect to this wsfed instance.
# cas.authn.wsfed[].auto-redirect: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# A regular expression pattern that indicates the set of allowed IP addresses,
when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch
between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc),
the cookie can still be considered valid if the new IP address matches the pattern
specified here.
# cas.authn.wsfed[].cookie.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.authn.wsfed[].cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.authn.wsfed[].cookie.crypto.alg: DEFAULT_CONTENT_ENCRYPTION_ALGORITHM

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.authn.wsfed[].cookie.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.authn.wsfed[].cookie.crypto.encryption.key: EMPTY

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.authn.wsfed[].cookie.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.authn.wsfed[].cookie.crypto.signing.key: EMPTY

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.authn.wsfed[].cookie.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations.
The accepted values are:
<ul>
    <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>
    <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li>
</ul>
# cas.authn.wsfed[].cookie.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# Cookie domain. Specifies the domain within which this cookie should be presented.
The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com)
and means that the cookie is visible to servers in a
specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com).
By default, cookies are only returned to the server that sent them.
# cas.authn.wsfed[].cookie.domain: EMPTY

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# true if this cookie contains the HttpOnly attribute. This means that the cookie should
not be accessible to scripting engines, like javascript.
# cas.authn.wsfed[].cookie.http-only: true

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating
the cookie will persist until browser shutdown.
A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is
the maximum age when the cookie will expire, not the cookie's current age.
A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits.
A zero value causes the cookie to be deleted.
# cas.authn.wsfed[].cookie.max-age: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# Cookie name. Constructs a cookie with a specified name and value.
The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and
cannot contain commas, semicolons, or white space or begin with a {@code $} character.
The cookie's name cannot be changed after creation.
By default, cookies are created according to the RFC 2965 cookie specification.
Cookie names are automatically calculated assigned by CAS at runtime, and there is usually
no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.authn.wsfed[].cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# Cookie path.
Specifies a path for the cookie to which the client should return the cookie.
The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's
subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog,
which makes the cookie visible to all directories on the server under /catalog.
Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.authn.wsfed[].cookie.path: EMPTY

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# When generating cookie values, determine whether the value
should be compounded and signed with the properties of
the current session, such as IP address, user-agent, etc.
# cas.authn.wsfed[].cookie.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# If a cookie is only intended to be accessed in a first party context, the
developer has the option to apply one of settings
{@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access.
<p>
To safeguard more websites and their users, the new secure-by-default model
assumes all cookies should be protected from external access unless otherwise
specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate
cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional
{@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS
connections.
</p>
<p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.authn.wsfed[].cookie.same-site-policy: EMPTY

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegatedCookieProperties
# Module: cas-server-support-wsfederation-webflow
# True if sending this cookie should be restricted to a secure protocol, or
false if the it can be sent using any protocol.
# cas.authn.wsfed[].cookie.secure: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The path to the public key/certificate used to handle and verify encrypted assertions.
# cas.authn.wsfed[].encryption-certificate: classpath:certificate.crt

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The path to the private key used to handle and verify encrypted assertions.
# cas.authn.wsfed[].encryption-private-key: classpath:private.key

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The private key password.
# cas.authn.wsfed[].encryption-private-key-password: NONE

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Internal identifier for this wsfed configuration.
If undefined, the identifier would be auto-generated by CAS itself.
In the event that there is more than on CAS server defined in a clustered
deployment, this identifier must be statically defined in the configuration.
# cas.authn.wsfed[].id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The attribute extracted from the assertion and used to construct the CAS principal id.
# cas.authn.wsfed[].identity-attribute: upn

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The entity id or the identifier of the Wsfed instance.
# cas.authn.wsfed[].identity-provider-identifier: http://adfs.example.org/adfs/services/trust

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Wsfed identity provider url.
# cas.authn.wsfed[].identity-provider-url: https://adfs.example.org/adfs/ls/

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Name of the authentication handler.
# cas.authn.wsfed[].name: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The order of the authentication handler in the chain.
# cas.authn.wsfed[].order: MAX_VALUE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers
that should be used for fetching attributes
if attribute resolution is enabled.
The list here may include identifiers separated by comma.
# cas.authn.wsfed[].principal.active-attribute-repository-ids: 

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted
to fetch person attributes. Defaults to true if not set.
# cas.authn.wsfed[].principal.attribute-resolution-enabled: UNDEFINED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed.
If the attribute is blank or has no values, the default principal id will be used
determined by the underlying authentication engine. The principal id attribute
usually is removed from the collection of attributes collected, though this behavior
depends on the schematics of the underlying authentication strategy.
# cas.authn.wsfed[].principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves
more than one principal, (specially if such principals in the chain
have different identifiers), this setting determines strategy by which
the principal id would be chosen from the chain.
Accepted values are: {@code last}, {@code first}.
# cas.authn.wsfed[].principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution
has failed and no principal can be found based on the authentication requirements.
Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.wsfed[].principal.principal-resolution-failure-fatal: UNDEFINED

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.wsfed[].principal.return-null: UNDEFINED

# Required: false
# Type: TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already
been established in order to run person directory queries.
This is generally useful in situations where
authentication is delegated to an external identity provider
and a principal is first established to then query an attribute source.
# cas.authn.wsfed[].principal.use-existing-principal-id: UNDEFINED

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# The identifier for CAS (RP) registered with wsfed.
# cas.authn.wsfed[].relying-party-identifier: urn:cas:localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Locations of signing certificates used to verify assertions.
# cas.authn.wsfed[].signing-certificate-resources: classpath:adfs-signing.crt

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties
# Module: cas-server-support-wsfederation-webflow
# Tolerance value used to skew assertions to support clock drift.
# cas.authn.wsfed[].tolerance: PT10S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# When CRLs are cached, indicate whether cache should overflow to disk.
# cas.authn.x509.cache-disk-overflow: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Size of cache on disk.
# cas.authn.x509.cache-disk-size: 100MB

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# When CRLs are cached, indicate if cache items should be eternal.
# cas.authn.x509.cache-eternal: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# When CRLs are cached, indicate maximum number of elements kept in memory.
# cas.authn.x509.cache-max-elements-in-memory: 1000

# Required: false
# Type: java.lang.Integer
# Owner: 
# Module: 
# 
# cas.authn.x509.cache-time-to-idle-seconds: 
# Deprecation Level: ERROR
# Deprecation Reason: This setting no longer applies to the ehcache 3 cache used for x509 CRL caching.
# Deprecation Replacement: cas.authn.x509.cache-time-to-live-seconds

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# When CRLs are cached, indicate the time-to-live of cache items.
# cas.authn.x509.cache-time-to-live-seconds: 4

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Whether revocation checking should check all resources, or stop at first one.
# cas.authn.x509.check-all: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Deployer supplied setting to check the KeyUsage extension.
# cas.authn.x509.check-key-usage: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.CnEdipiPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Attribute name that will be used by X509 principal resolvers if the main attribute in the certificate is not present. This only applies to principal resolvers that are looking for attributes in the certificate that are not common to all certificates. (e.g. {@code SUBJECT_ALT_NAME}, {@code CN_EDIPI}) <p> This assumes you would rather get something like the {@code subjectDn} rather than {@code null} where {@code null} would allow falling through to another authentication mechanism. <p> Currently supported values are: {@code subjectDn}, {@code sigAlgOid}, {@code subjectX500Principal}.
# cas.authn.x509.cn-edipi.alternate-principal-attribute: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.CnEdipiPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Whether to extract EDIPI as an attribute, regardless of principal resolver type.
# cas.authn.x509.cn-edipi.extract-edipi-as-attribute: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# If the CRL has expired, activate the this policy. Activated if {@link #revocationChecker} is {@code CRL}. Accepted values are: <ul> <li>{@code ALLOW}: Allow authentication to proceed.</li> <li>{@code DENY}: Deny authentication and block.</li> <li>{@code THRESHOLD}: Applicable to CRL expiration, throttle the request whereby expired data is permitted up to a threshold period of time but not afterward.</li> </ul>
# cas.authn.x509.crl-expired-policy: DENY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Options to describe how to fetch CRL resources.  To fetch CRLs, the following options are available: <ul> <li>{@code RESOURCE}: By default, all revocation checks use fixed resources to fetch the CRL resource from the specified location.</li> <li>{@code LDAP}: A CRL resource may be fetched from a pre-configured attribute, in the event that the CRL resource location is an LDAP URI.</li> </ul>
# cas.authn.x509.crl-fetcher: RESOURCE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# If the CRL resource has expired, activate the this policy. Activated if {@link #revocationChecker} is {@code RESOURCE}. Accepted values are: <ul> <li>{@code ALLOW}: Allow authentication to proceed.</li> <li>{@code DENY}: Deny authentication and block.</li> <li>{@code THRESHOLD}: Applicable to CRL expiration, throttle the request whereby expired data is permitted up to a threshold period of time but not afterward.</li> </ul>
# cas.authn.x509.crl-resource-expired-policy: DENY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# If the CRL resource is unavailable, activate the this policy. Activated if {@link #revocationChecker} is {@code RESOURCE}. Accepted values are: <ul> <li>{@code ALLOW}: Allow authentication to proceed.</li> <li>{@code DENY}: Deny authentication and block.</li> <li>{@code THRESHOLD}: Applicable to CRL expiration, throttle the request whereby expired data is permitted up to a threshold period of time but not afterward.</li> </ul>
# cas.authn.x509.crl-resource-unavailable-policy: DENY

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# List of CRL resources to use for fetching.
# cas.authn.x509.crl-resources: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# If the CRL is unavailable, activate the this policy. Activated if {@link #revocationChecker} is {@code CRL}. Accepted values are: <ul> <li>{@code ALLOW}: Allow authentication to proceed.</li> <li>{@code DENY}: Deny authentication and block.</li> <li>{@code THRESHOLD}: Applicable to CRL expiration, throttle the request whereby expired data is permitted up to a threshold period of time but not afterward.</li> </ul>
# cas.authn.x509.crl-unavailable-policy: DENY

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Whether to extract certificate from request. The default implementation extracts certificate from header via Tomcat SSLValve parsing logic and using the {@link #DEFAULT_CERT_HEADER_NAME} header. Must be false by default because if someone enables it they need to make sure they are behind proxy that won't let the header arrive directly from the browser.
# cas.authn.x509.extract-cert: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.authn.x509.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Set if multiple Entries are allowed.
# cas.authn.x509.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.authn.x509.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.authn.x509.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The bind credential to use when connecting to LDAP.
# cas.authn.x509.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.authn.x509.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.authn.x509.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The LDAP attribute that holds the certificate revocation list.
# cas.authn.x509.ldap.certificate-attribute: certificateRevocationList

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Sets the maximum amount of time that connects will block.
# cas.authn.x509.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.authn.x509.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether to use a pooled connection factory in components.
# cas.authn.x509.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.authn.x509.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Set if search referrals should be followed.
# cas.authn.x509.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.authn.x509.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.authn.x509.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.authn.x509.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Keystore password.
# cas.authn.x509.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.x509.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.authn.x509.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.authn.x509.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.authn.x509.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Name of the LDAP handler.
# cas.authn.x509.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.authn.x509.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.authn.x509.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.authn.x509.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Duration of time to wait for responses.
# cas.authn.x509.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# SASL authorization id.
# cas.authn.x509.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The SASL mechanism.
# cas.authn.x509.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# SASL mutual auth is enabled?
# cas.authn.x509.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# SASL quality of protected.
# cas.authn.x509.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The SASL realm.
# cas.authn.x509.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# SASL security strength.
# cas.authn.x509.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Search handlers.
# cas.authn.x509.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.authn.x509.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.x509.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.authn.x509.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.authn.x509.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.authn.x509.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.authn.x509.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.authn.x509.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.authn.x509.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.authn.x509.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.authn.x509.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.authn.x509.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.authn.x509.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.authn.x509.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.authn.x509.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether subtree searching is allowed.
# cas.authn.x509.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.authn.x509.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.authn.x509.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.authn.x509.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Password needed to open the truststore.
# cas.authn.x509.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.authn.x509.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether TLS should be used and enabled when establishing the connection.
# cas.authn.x509.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether connections should be validated when loaned out from the pool.
# cas.authn.x509.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Period at which pool should be validated.
# cas.authn.x509.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Whether connections should be validated periodically when the pool is idle.
# cas.authn.x509.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509LdapProperties
# Module: cas-server-support-x509-webflow
# Period at which validation operations may time out.
# cas.authn.x509.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.authn.x509.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.authn.x509.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.authn.x509.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.authn.x509.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.authn.x509.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.authn.x509.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.authn.x509.ldap.validator.type: search

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Deployer supplied setting for maximum pathLength in a SUPPLIED certificate.
# cas.authn.x509.max-path-length: 1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Deployer supplied setting to allow unlimited pathLength in a SUPPLIED certificate.
# cas.authn.x509.max-path-length-allow-unspecified: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Determine whether X509 authentication should allow other forms of authentication such as username/password. If this setting is turned off, typically the ability to view the login form as the primary form of authentication is turned off.
# cas.authn.x509.mixed-mode: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The authentication handler name.
# cas.authn.x509.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The order of the authentication handler in the chain.
# cas.authn.x509.order: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The principal descriptor used for principal resolution when type is set to {@link PrincipalTypes#SUBJECT}.
# cas.authn.x509.principal-descriptor: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.authn.x509.principal-hex-sn-zero-padding: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed due to x509 settings reorganization.
# Deprecation Replacement: cas.authn.x509.serial-no.principal-hex-s-n-zero-padding

# Required: false
# Type: java.lang.Integer
# Owner: 
# Module: 
# 
# cas.authn.x509.principal-sn-radix: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed due to x509 settings reorganization.
# Deprecation Replacement: cas.authn.x509.serial-no.principal-s-n-radix

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the username to match for blocking/forbidden values. If a match is found, an exception will be thrown and principal transformation will fail.
# cas.authn.x509.principal-transformation.blocking-pattern: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Indicate whether the principal identifier should be transformed into upper-case, lower-case, etc.
Available values are as follows:
<ul><li>{@code NONE}: No conversion.</li><li>{@code LOWERCASE}: Lowercase conversion.</li><li>{@code UPPERCASE}: Uppercase conversion.</li></ul>
# cas.authn.x509.principal-transformation.case-conversion: NONE

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties
# Module: cas-server-core-authentication
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.authn.x509.principal-transformation.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# A regular expression that will be used against the provided username for username extractions. On a successful match, the first matched group in the pattern will be used as the extracted username.
# cas.authn.x509.principal-transformation.pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Prefix to add to the principal id prior to authentication.
# cas.authn.x509.principal-transformation.prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties
# Module: cas-server-core-authentication
# Suffix to add to the principal id prior to authentication.
# cas.authn.x509.principal-transformation.suffix: 

# Required: true
# Type: org.apereo.cas.configuration.model.support.x509.X509Properties$PrincipalTypes
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Indicates the type of principal resolution for X509.
Available values are as follows:
<ul><li>{@code CN_EDIPI}: Create principal by common name and EDIPI.</li><li>{@code RFC822_EMAIL}: Create principal from the RFC822 type name (aka email address) in the subject alternative name field.
The subject alternative name field contains a list of various types of names, one type is RFC822 e-mail
address. This will return the first e-mail address that is found (if there are more than one).</li><li>{@code SERIAL_NO}: Create principal by serial no.
Resolve the principal by the serial number with a configurable <strong>radix</strong>, ranging from 2 to 36.
If {@code radix} is {@code 16}, then the serial number could be filled with leading zeros to even the number of digits.</li><li>{@code SERIAL_NO_DN}: Create principal by serial no and DN.</li><li>{@code SUBJECT}: Create principal by subject.
Resolve the principal by extracting one or more attribute values from the
certificate subject DN and combining them with intervening delimiters.</li><li>{@code SUBJECT_ALT_NAME}: Create principal by subject alternative name.
Resolve the principal by the subject alternative name extension. (type: otherName).</li><li>{@code SUBJECT_DN}: Create principal by subject DN.</li></ul>
# cas.authn.x509.principal-type: MAX_VALUE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.authn.x509.principal.active-attribute-repository-ids: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.authn.x509.principal.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.authn.x509.principal.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.authn.x509.principal.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.authn.x509.principal.principal-resolution-failure-fatal: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.authn.x509.principal.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.authn.x509.principal.use-existing-principal-id: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The refresh interval of the internal scheduler in cases where CRL revocation checking is done via resources.
# cas.authn.x509.refresh-interval-seconds: 3600

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The pattern that authorizes an acceptable certificate by its subject dn.
# cas.authn.x509.reg-ex-subject-dn-pattern: .+

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The compiled pattern supplied by the deployer.
# cas.authn.x509.reg-ex-trusted-issuer-dn-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Deployer supplied setting to force require the correct KeyUsage extension.
# cas.authn.x509.require-key-usage: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Revocation certificate checking can be carried out in one of the following ways: <ul> <li>{@code NONE}: No revocation is performed.</li> <li>{@code CRL}: The CRL URI(s) mentioned in the certificate cRLDistributionPoints extension field. Caches are available to prevent excessive IO against CRL endpoints. CRL data is fetched if does not exist in the cache or if it is expired.</li> <li>{@code RESOURCE}: A CRL hosted at a fixed location. The CRL is fetched at periodic intervals and cached.</li> </ul>
# cas.authn.x509.revocation-checker: NONE

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# Threshold value if expired CRL revocation policy is to be handled via threshold.
# cas.authn.x509.revocation-policy-threshold: 172800

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.Rfc822EmailPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Attribute name that will be used by X509 principal resolvers if the main attribute in the certificate is not present. This only applies to principal resolvers that are looking for attributes in the certificate that are not common to all certificates. (e.g. {@code SUBJECT_ALT_NAME}, {@code CN_EDIPI}) <p> This assumes you would rather get something like the {@code subjectDn} rather than {@code null} where {@code null} would allow falling through to another authentication mechanism. <p> Currently supported values are: {@code subjectDn}, {@code sigAlgOid}, {@code subjectX500Principal}.
# cas.authn.x509.rfc822-email.alternate-principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.SerialNoDnPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# The serial number prefix used for principal resolution when type is set to {@link X509Properties.PrincipalTypes#SERIAL_NO_DN}.
# cas.authn.x509.serial-no-dn.serial-number-prefix: SERIALNUMBER&#61;

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.SerialNoDnPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Value delimiter used for principal resolution when type is set to {@link X509Properties.PrincipalTypes#SERIAL_NO_DN}.
# cas.authn.x509.serial-no-dn.value-delimiter: , 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.SerialNoPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# If radix hex padding should be used when {@link X509Properties.PrincipalTypes} is {@link X509Properties.PrincipalTypes#SERIAL_NO}.
# cas.authn.x509.serial-no.principal-hex-s-n-zero-padding: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.SerialNoPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Radix used when {@link X509Properties.PrincipalTypes} is {@link X509Properties.PrincipalTypes#SERIAL_NO}.
# cas.authn.x509.serial-no.principal-s-n-radix: 0

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.x509.serial-number-prefix: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed due to x509 settings reorganization.
# Deprecation Replacement: cas.authn.x509.serial-no-dn.serial-number-prefix

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# The name of the header to consult for an X509 cert (e.g. when behind proxy).
# cas.authn.x509.ssl-header-name: ssl_client_cert

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.SubjectAltNamePrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Attribute name that will be used by X509 principal resolvers if the main attribute in the certificate is not present. This only applies to principal resolvers that are looking for attributes in the certificate that are not common to all certificates. (e.g. {@code SUBJECT_ALT_NAME}, {@code CN_EDIPI}) <p> This assumes you would rather get something like the {@code subjectDn} rather than {@code null} where {@code null} would allow falling through to another authentication mechanism. <p> Currently supported values are: {@code subjectDn}, {@code sigAlgOid}, {@code subjectX500Principal}.
# cas.authn.x509.subject-alt-name.alternate-principal-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.x509.SubjectDnPrincipalResolverProperties$SubjectDnFormat
# Owner: org.apereo.cas.configuration.model.support.x509.SubjectDnPrincipalResolverProperties
# Module: cas-server-support-x509-webflow
# Format of subject DN to use.
Available values are as follows:
<ul><li>{@code DEFAULT}: Denigrated result of calling certificate.getSubjectDN() method.
Javadocs designate this method as "denigrated" for not being portable and/or not being well defined.
It is what has been used by CAS for a long time so it remains the default.</li><li>{@code RFC1779}: RFC 1779 String format of Distinguished Names.
Calls {@code X500Principal.getName("RFC1779")} which emits a subject DN with the attribute keywords defined
in RFC 1779 (CN, L, ST, O, OU, C, STREET). Any other attribute type is emitted as an OID.</li><li>{@code RFC2253}: RFC 2253 String format of Distinguished Names.
Calls {@code X500Principal.getName("RFC2253")} which emits a subject DN with the attribute keywords defined in
RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID). Any other attribute type is emitted as an OID.</li><li>{@code CANONICAL}: Canonical String format of Distinguished Names.
Calls X500Principal.getName("CANONICAL" which emits a subject DN that starts with RFC 2253 and applies
additional canonicalizations described in the javadoc.</li></ul>
# cas.authn.x509.subject-dn.format: DEFAULT

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509Properties
# Module: cas-server-support-x509-webflow
# When CRL revocation checking is done via distribution points, decide if fetch failures should throw errors.
# cas.authn.x509.throw-on-fetch-failure: false

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.authn.x509.value-delimiter: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed due to x509 settings reorganization.
# Deprecation Replacement: cas.authn.x509.serial-no-dn.value-delimiter

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.x509.X509WebflowAutoConfigurationProperties
# Module: cas-server-support-x509-webflow
# Indicate the strategy that should be used to enforce client x509 authentication. Accepted values are {@code true, false, want}.
# cas.authn.x509.webflow.client-auth: want

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.x509.X509WebflowAutoConfigurationProperties
# Module: cas-server-support-x509-webflow
# Whether webflow auto-configuration should be enabled.
# cas.authn.x509.webflow.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509WebflowAutoConfigurationProperties
# Module: cas-server-support-x509-webflow
# The order in which the webflow is configured.
# cas.authn.x509.webflow.order: 0

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.x509.X509WebflowAutoConfigurationProperties
# Module: cas-server-support-x509-webflow
# Port that is used to enact x509 client authentication as a separate connector. Configuration of a separate server connector and port allows the separation of client-auth functionality from the rest of the server, allowing for opt-in behavior.  To activate, a non-zero port must be specified.
# cas.authn.x509.webflow.port: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.clearpass.ClearpassProperties
# Module: cas-server-core-authentication
# Enable clearpass and allow CAS to cache credentials.
# cas.clearpass.cache-credential: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.clearpass.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.clearpass.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.clearpass.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.clearpass.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.clearpass.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.clearpass.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.clearpass.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.CasJavaClientProperties
# Module: cas-server-core
# Prefix of the CAS server used to establish ticket validators for the client. Typically set to {@code https://sso.example.org/cas}
# cas.client.prefix: 

# Required: false
# Type: org.apereo.cas.configuration.model.core.CasJavaClientProperties$ClientTicketValidatorTypes
# Owner: org.apereo.cas.configuration.model.core.CasJavaClientProperties
# Module: cas-server-core
# Determines the type of ticket validator that CAS should create from the Java CAS client when attempting to issue in-bound ticket validation calls.
Available values are as follows:
<ul><li>{@code CAS10}: CAS10 ticket validator.</li><li>{@code CAS20}: CAS20 ticket validator.</li><li>{@code CAS30}: CAS30 ticket validator.</li><li>{@code JSON}: JSON ticket validator.</li></ul>
# cas.client.validator-type: CAS30

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.consent.activation-strategy-groovy-script.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.ConsentProperties
# Module: cas-server-support-consent-webflow
# Whether consent functionality should be globally applicapable to all applications and requests.
# cas.consent.active: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Use a local cache to reduce fetches..
# cas.consent.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Remove idle connections from pool.
# cas.consent.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# TCP connection timeout.
# cas.consent.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Create the database if it doesn't exist.
# cas.consent.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Database name.
# cas.consent.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.consent.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Max entries in local cache.
# cas.consent.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Maximum connections to CouchDB.
# cas.consent.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Largest allowable serialized object.
# cas.consent.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Password for connection.
# cas.consent.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Proxy host.
# cas.consent.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# proxy port.
# cas.consent.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.consent.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Retries for update conflicts.
# cas.consent.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Socket idle timeout.
# cas.consent.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Connection url.
# cas.consent.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Expect HTTP 100 Continue during connection.
# cas.consent.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.CouchDbConsentProperties
# Module: cas-server-support-consent-couchdb
# Username for connection.
# cas.consent.couch-db.username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.consent.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.consent.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.consent.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.consent.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.consent.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.consent.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.consent.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.ConsentProperties
# Module: cas-server-support-consent-webflow
# Whether consent functionality should be enabled.
# cas.consent.enabled: true

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.consent.GroovyConsentProperties
# Module: cas-server-support-consent-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.consent.groovy.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.consent.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.consent.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.consent.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.consent.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.consent.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.consent.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.consent.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The JDBC driver used to connect to the database.
# cas.consent.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.consent.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Used to specify number of rows to be fetched in a select query.
# cas.consent.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Allow hibernate to generate query statistics.
# cas.consent.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The SQL query to be executed to test the validity of connections.
# cas.consent.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.consent.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.consent.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.consent.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.consent.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The database connection password.
# cas.consent.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.consent.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.consent.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.consent.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.consent.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.consent.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.consent.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.consent.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.consent.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The database connection URL.
# cas.consent.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.JpaConsentProperties
# Module: cas-server-support-consent-jdbc
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.consent.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.consent.JsonConsentProperties
# Module: cas-server-support-consent-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.consent.json.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.consent.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Set if multiple Entries are allowed.
# cas.consent.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.consent.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.consent.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The bind credential to use when connecting to LDAP.
# cas.consent.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.consent.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.consent.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Sets the maximum amount of time that connects will block.
# cas.consent.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.consent.ldap.connection-strategy: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Name of LDAP attribute that holds consent decisions as JSON.
# cas.consent.ldap.consent-attribute-name: casConsentDecision

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether to use a pooled connection factory in components.
# cas.consent.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.consent.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Set if search referrals should be followed.
# cas.consent.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.consent.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.consent.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.consent.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Keystore password.
# cas.consent.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.consent.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.consent.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.consent.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.consent.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Name of the LDAP handler.
# cas.consent.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.consent.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.consent.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.consent.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Duration of time to wait for responses.
# cas.consent.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# SASL authorization id.
# cas.consent.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The SASL mechanism.
# cas.consent.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# SASL mutual auth is enabled?
# cas.consent.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# SASL quality of protected.
# cas.consent.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The SASL realm.
# cas.consent.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# SASL security strength.
# cas.consent.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Search handlers.
# cas.consent.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.consent.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.consent.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.consent.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.consent.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.consent.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.consent.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.consent.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.consent.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.consent.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.consent.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.consent.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.consent.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.consent.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.consent.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether subtree searching is allowed.
# cas.consent.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.consent.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.consent.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.consent.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Password needed to open the truststore.
# cas.consent.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.consent.ldap.trust-store-type: 

# Required: true
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapType
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Type of LDAP directory.
Available values are as follows:
<ul><li>{@code GENERIC}: Generic ldap type (OpenLDAP, 389ds, etc).</li><li>{@code AD}: Active directory.</li><li>{@code FreeIPA}: FreeIPA directory.</li><li>{@code EDirectory}: EDirectory.</li></ul>
# cas.consent.ldap.type: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether TLS should be used and enabled when establishing the connection.
# cas.consent.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether connections should be validated when loaned out from the pool.
# cas.consent.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Period at which pool should be validated.
# cas.consent.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Whether connections should be validated periodically when the pool is idle.
# cas.consent.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.LdapConsentProperties
# Module: cas-server-support-consent-ldap
# Period at which validation operations may time out.
# cas.consent.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.consent.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.consent.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.consent.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.consent.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.consent.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.consent.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.consent.ldap.validator.type: search

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Name of the database to use for authentication.
# cas.consent.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.consent.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database collection name to fetch and/or create.
# cas.consent.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database instance name.
# cas.consent.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Whether collections should be dropped on startup and re-created.
# cas.consent.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.consent.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database password for authentication.
# cas.consent.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.consent.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.consent.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.consent.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.consent.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.consent.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.consent.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database port.
# cas.consent.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.consent.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.consent.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.consent.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.consent.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.consent.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Whether connections require SSL.
# cas.consent.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database connection timeout.
# cas.consent.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# MongoDb database user for authentication.
# cas.consent.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.MongoDbConsentProperties
# Module: cas-server-support-consent-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.consent.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.consent.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.consent.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.consent.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.consent.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.consent.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.consent.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.consent.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.consent.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.consent.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.consent.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.consent.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.consent.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Connection timeout.
# cas.consent.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Database index used by the connection factory.
# cas.consent.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Whether the module is enabled or not, defaults to true.
# cas.consent.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Redis server host.
# cas.consent.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Login password of the redis server.
# cas.consent.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.consent.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.consent.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.consent.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.consent.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.consent.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.consent.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.consent.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.consent.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.consent.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.consent.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.consent.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.consent.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.consent.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.consent.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Redis server port.
# cas.consent.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.consent.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.consent.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.consent.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Command timeout.
# cas.consent.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.consent.RedisConsentProperties
# Module: cas-server-support-consent-redis
# Whether or not to use SSL for connection factory.
# cas.consent.redis.use-ssl: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.consent.ConsentProperties
# Module: cas-server-support-consent-webflow
# Global reminder time unit, to reconfirm consent in cases no changes are detected.
# cas.consent.reminder: 30

# Required: false
# Type: java.time.temporal.ChronoUnit
# Owner: org.apereo.cas.configuration.model.support.consent.ConsentProperties
# Module: cas-server-support-consent-webflow
# Global reminder time unit of measure, to reconfirm consent in cases no changes are detected.
# cas.consent.reminder-time-unit: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RestfulConsentProperties
# Module: cas-server-support-consent-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.consent.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RestfulConsentProperties
# Module: cas-server-support-consent-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.consent.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.consent.RestfulConsentProperties
# Module: cas-server-support-consent-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.consent.rest.headers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.consent.RestfulConsentProperties
# Module: cas-server-support-consent-rest
# The endpoint URL to contact and retrieve attributes.
# cas.consent.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# Whether webflow auto-configuration should be enabled.
# cas.consent.webflow.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# The order in which the webflow is configured.
# cas.consent.webflow.order: 0

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.custom.CasCustomProperties
# Module: cas-server-core-web
# Collection of custom settings that can be utilized for a local deployment. The settings should be available to CAS views and webflows for altering UI and/or introducing custom behavior to any extended customized component without introducing a new property namespace. This is defined as a map, where the key should be the setting name and the value should be the setting value.
# cas.custom.properties: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CoreEventsProperties
# Module: cas-server-core-events
# Whether event tracking and recording functionality should be enabled.
# cas.events.core.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CoreEventsProperties
# Module: cas-server-core-events
# Whether CAS should track the underlying configuration store for changes. This depends on whether the store provides that sort of functionality. When running in standalone mode, this typically translates to CAS monitoring configuration files and reloading context conditionally if there are any changes.
# cas.events.core.track-configuration-modifications: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CoreEventsProperties
# Module: cas-server-core-events
# Whether geolocation should be tracked as part of collected authentication events. This of course require's consent from the user's browser to collect stats on location.
# cas.events.core.track-geolocation: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Make DB updates asynchronously.
# cas.events.couch-db.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Use a local cache to reduce fetches..
# cas.events.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Remove idle connections from pool.
# cas.events.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# TCP connection timeout.
# cas.events.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Create the database if it doesn't exist.
# cas.events.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Database name.
# cas.events.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Use TLS. Only needed if not specified by URL.
# cas.events.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Max entries in local cache.
# cas.events.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Maximum connections to CouchDB.
# cas.events.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Largest allowable serialized object.
# cas.events.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Password for connection.
# cas.events.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Proxy host.
# cas.events.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# proxy port.
# cas.events.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Relax TLS settingsâ€“like certificate verification.
# cas.events.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Retries for update conflicts.
# cas.events.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Socket idle timeout.
# cas.events.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Connection url.
# cas.events.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Expect HTTP 100 Continue during connection.
# cas.events.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.CouchDbEventsProperties
# Module: cas-server-support-events-couchdb
# Username for connection.
# cas.events.couch-db.username: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.events.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Client execution timeout.
# cas.events.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Connection timeout.
# cas.events.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.events.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.events.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.events.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# AWS custom endpoint.
# cas.events.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Local address.
# cas.events.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.events.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Maximum connections setting.
# cas.events.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.events.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Profile name to use.
# cas.events.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Profile path.
# cas.events.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.events.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.events.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.events.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Read capacity.
# cas.events.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# AWS region used.
# cas.events.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.events.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Socket timeout.
# cas.events.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# The table name used and created by CAS to hold events in DynamoDb.
# cas.events.dynamo-db.table-name: DynamoDbCasEvents

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Time offset.
# cas.events.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Flag that indicates whether to use reaper.
# cas.events.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.events.DynamoDbEventsProperties
# Module: cas-server-support-events-dynamodb
# Write capacity.
# cas.events.dynamo-db.write-capacity: 10

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.events.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: enabled setting is now moved into the core namespace.
# Deprecation Replacement: cas.events.core.enabled

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# The interval used to run batch jobs to flush points.
# cas.events.influx-db.batch-interval: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# Database consistency level. Acceptable values are {@code ALL, ANY, ONE, QUORUM}. <ul> <li>ALL - Write succeeds only if write reached all cluster members.</li> <li>ANY - Write succeeds if write reached any cluster members.</li> <li>ONE - Write succeeds if write reached at least one cluster members.</li> <li>QUORUM - Write succeeds only if write reached a quorum of cluster members.</li> </ul>
# cas.events.influx-db.consistency-level: ALL

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# Database name.
# cas.events.influx-db.database: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# Whether the indicated database should be dropped and recreated.
# cas.events.influx-db.drop-database: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# InfluxDb connection password.
# cas.events.influx-db.password: root

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# The number of point to flush and write to the database as part of the batch.
# cas.events.influx-db.points-to-flush: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# Database retention policy to use.
# cas.events.influx-db.retention-policy: autogen

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# InfluxDb connection url.
# cas.events.influx-db.url: http://localhost:8086

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.InfluxDbEventsProperties
# Module: cas-server-support-events-influxdb
# InfluxDb connection username.
# cas.events.influx-db.username: root

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.events.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.events.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.events.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.events.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.events.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.events.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.events.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The JDBC driver used to connect to the database.
# cas.events.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.events.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Used to specify number of rows to be fetched in a select query.
# cas.events.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Allow hibernate to generate query statistics.
# cas.events.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The SQL query to be executed to test the validity of connections.
# cas.events.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.events.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.events.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.events.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.events.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The database connection password.
# cas.events.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.events.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.events.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.events.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.events.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.events.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.events.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.events.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.events.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The database connection URL.
# cas.events.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.JpaEventsProperties
# Module: cas-server-support-events-jpa
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.events.jpa.user: sa

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Name of the database to use for authentication.
# cas.events.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.events.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database collection name to fetch and/or create.
# cas.events.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database instance name.
# cas.events.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Whether collections should be dropped on startup and re-created.
# cas.events.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.events.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database password for authentication.
# cas.events.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.events.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.events.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.events.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.events.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.events.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.events.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database port.
# cas.events.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.events.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.events.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.events.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Sets whether writes should be retried if they fail due to a network error.
# cas.events.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Whether the database socket connection should be tagged with keep-alive.
# cas.events.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Whether connections require SSL.
# cas.events.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database connection timeout.
# cas.events.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# MongoDb database user for authentication.
# cas.events.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.MongoDbEventsProperties
# Module: cas-server-support-events-mongo
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.events.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.events.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.events.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.events.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.events.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.events.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.events.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.events.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.events.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.events.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.events.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.events.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.events.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Connection timeout.
# cas.events.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Database index used by the connection factory.
# cas.events.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Whether the module is enabled or not, defaults to true.
# cas.events.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Redis server host.
# cas.events.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Login password of the redis server.
# cas.events.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.events.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.events.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.events.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.events.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.events.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.events.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.events.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.events.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.events.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.events.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.events.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.events.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.events.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.events.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Redis server port.
# cas.events.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.events.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.events.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.events.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Command timeout.
# cas.events.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.events.RedisEventsProperties
# Module: cas-server-support-events-redis
# Whether or not to use SSL for connection factory.
# cas.events.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# Attribute name to collect from the authentication event to serve as the cookie value.
# cas.google-analytics.cookie.attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# A regular expression pattern that is tested against attribute values to only release and allow those that produce a successful match.
# cas.google-analytics.cookie.attribute-value-pattern: .+

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.google-analytics.cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.google-analytics.cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.google-analytics.cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.google-analytics.cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.google-analytics.cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.google-analytics.cookie.path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.google-analytics.cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsCookieProperties
# Module: cas-server-support-google-analytics
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.google-analytics.cookie.secure: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.analytics.GoogleAnalyticsProperties
# Module: cas-server-support-google-analytics
# The tracking id. Configuring the tracking activated google analytics in CAS on UI views, etc.
# cas.google-analytics.google-analytics-tracking-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.googleapps.GoogleAppsProperties
# Module: cas-server-support-saml-googleapps
# Signature algorithm used to generate keys. @deprecated Since 6.2
# cas.google-apps.key-algorithm: RSA
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.googleapps.GoogleAppsProperties
# Module: cas-server-support-saml-googleapps
# The private key location that is used to sign responses, etc. @deprecated Since 6.2
# cas.google-apps.private-key-location: file:/etc/cas/private.key
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.googleapps.GoogleAppsProperties
# Module: cas-server-support-saml-googleapps
# The public key location that is also shared with google apps. @deprecated Since 6.2
# cas.google-apps.public-key-location: file:/etc/cas/public.key
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.firebase.GoogleFirebaseCloudMessagingProperties
# Module: cas-server-support-notifications-fcm
# Firebase database url.
# cas.google-firebase-messaging.database-url: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.firebase.GoogleFirebaseCloudMessagingProperties
# Module: cas-server-support-notifications-fcm
# The principal attribute name that contains the registration token for the user. Registration tokens that are provided by clients during the handshake process should be stored on the server, and made available to CAS as a principal attribute.
# cas.google-firebase-messaging.registration-token-attribute-name: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.firebase.GoogleFirebaseCloudMessagingProperties
# Module: cas-server-support-notifications-fcm
# Required scopes to properly communicate with the firebase cloud.
# cas.google-firebase-messaging.scopes: 

# Required: false
# Type: org.apereo.cas.configuration.model.SpringResourceProperties
# Owner: org.apereo.cas.configuration.model.support.firebase.GoogleFirebaseCloudMessagingProperties
# Module: cas-server-support-notifications-fcm
# Path to the service account key json file. This can optional if you set the environment variable {@code GOOGLE_APPLICATION_CREDENTIALS} to the file path of the JSON file that contains your service account key. If this is undefined, the property value will be used instead.
# cas.google-firebase-messaging.service-account-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.geo.googlemaps.GoogleMapsProperties
# Module: cas-server-support-geolocation-googlemaps
# Authenticate into google maps via an API key.
# cas.google-maps.api-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.geo.googlemaps.GoogleMapsProperties
# Module: cas-server-support-geolocation-googlemaps
# Authenticate into google maps via a client id.
# cas.google-maps.client-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.geo.googlemaps.GoogleMapsProperties
# Module: cas-server-support-geolocation-googlemaps
# Authenticate into google maps via a client secret.
# cas.google-maps.client-secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.geo.googlemaps.GoogleMapsProperties
# Module: cas-server-support-geolocation-googlemaps
# The connection timeout when reaching out to google maps.
# cas.google-maps.connect-timeout: PT3S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.geo.googlemaps.GoogleMapsProperties
# Module: cas-server-support-geolocation-googlemaps
# When true, a strategy for handling URL requests using Google App Engine's URL Fetch API.
# cas.google-maps.google-apps-engine: false

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA should be enabled.
# cas.google-recaptcha.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Whether google reCAPTCHA invisible should be enabled.
# cas.google-recaptcha.invisible: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA badge position (only if invisible is enabled). Accepted values are: <ul> <li>{@code bottomright}: bottom right corner, default value.</li> <li>{@code bottomleft}: bottom left corner</li> <li>{@code inline}: allows to control the CSS.</li> </ul>
# cas.google-recaptcha.position: bottomright

# Required: true
# Type: java.lang.Double
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# reCAPTCHA v3 returns a score (1.0 is very likely a good interaction, 0.0 is very likely a bot). reCAPTCHA learns by seeing real traffic on your site. For this reason, scores in a staging environment or soon after implementing may differ from production. As reCAPTCHA v3 doesn't ever interrupt the user flow, you can first run reCAPTCHA without taking action and then decide on thresholds by looking at your traffic in the admin console. By default, you can use a threshold of 0.5.
# cas.google-recaptcha.score: 0.5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site secret.
# cas.google-recaptcha.secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA site key.
# cas.google-recaptcha.site-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# The google reCAPTCHA endpoint for verification of tokens and input.
# cas.google-recaptcha.verify-url: https://www.google.com/recaptcha/api/siteverify

# Required: false
# Type: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties$RecaptchaVersions
# Owner: org.apereo.cas.configuration.model.support.captcha.GoogleRecaptchaProperties
# Module: cas-server-support-captcha
# Indicate the version of the recaptcha api. Accepted values are: {@code V2, V3}.
Available values are as follows:
<ul><li>{@code GOOGLE_RECAPTCHA_V2}: V2 version of the recaptcha API.</li><li>{@code GOOGLE_RECAPTCHA_V3}: V3 version of the recaptcha API.</li><li>{@code HCAPTCHA}: hCaptcha.</li></ul>
# cas.google-recaptcha.version: 0.5

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.CasServerHostProperties
# Module: cas-server-core
# Name of the networking host configured to run CAS server. A CAS host is automatically appended to the ticket ids generated by CAS. If none is specified, one is automatically detected and used by CAS.
# cas.host.name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Whether CAS should accept local URLs. For example {@code http(s)://localhost/logout}.
# cas.http-client.allow-local-urls: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Indicates timeout for async operations.
# cas.http-client.async-timeout: PT5S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Whether the regular expression specified with {@link #authorityValidationRegex} should be handled as case-sensitive ({@code true}) or case-insensitive ({@code false}). If no {@link #authorityValidationRegex} is set, this value does not have any effect.
# cas.http-client.authority-validation-reg-ex-case-sensitive: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# If specified the regular expression will be used to validate the url's authority.
# cas.http-client.authority-validation-regex: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Connection timeout for all operations that reach out to URL endpoints.
# cas.http-client.connection-timeout: PT5S

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# The default headers to use for any HTTP connection. This is defined as map, where the key is the header name and the value is the header value that should be sent along with request.
# cas.http-client.default-headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Enable hostname verification when attempting to contact URL endpoints. May also be set to {@code none} to disable verification.
# cas.http-client.host-name-verifier: default

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Send requests via a proxy; define the hostname.
# cas.http-client.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Send requests via a proxy; define the proxy port. Negative/zero values should deactivate the proxy configuration for the http client.
# cas.http-client.proxy-port: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientProperties
# Module: cas-server-core-authentication
# Read timeout for all operations that reach out to URL endpoints.
# cas.http-client.read-timeout: PT5S

# Required: false
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties
# Module: cas-server-core-authentication
# The CAS local truststore resource to contain certificates to the CAS deployment. In the event that local certificates are to be imported into the CAS running environment, a local truststore is provided by CAS to improve portability of configuration across environments.
# cas.http-client.truststore.file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties
# Module: cas-server-core-authentication
# The truststore password.
# cas.http-client.truststore.psw: changeit

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties
# Module: cas-server-core-authentication
# Truststore type used to create a SSL context for http client.
# cas.http-client.truststore.type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Whether CAS should accept multi-valued parameters in incoming requests. Example block would to prevent requests where more than one {@code service} parameter is specified.
# cas.http-web-request.allow-multi-value-parameters: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Characters to block in incoming requests. {@code none} is a special value. Separate characters by a space.
# cas.http-web-request.characters-to-forbid: none

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Access-Control-Allow-Credentials header Indicates whether or not the response to the request can be exposed when the credentials flag is true.  When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials. Note that simple GET requests are not preflighted, and so if a request is made for a resource with credentials, if this header is not returned with the resource, the response is ignored by the browser and not returned to web content.
# cas.http-web-request.cors.allow-credentials: true

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Access-Control-Allow-Headers header is used in response to a preflight request to indicate which HTTP headers can be used when making the actual request. Default is everything.
# cas.http-web-request.cors.allow-headers: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource. This is used in response to a pre-flight request. The conditions under which a request is pre-flighted are discussed above. Default is everything.
# cas.http-web-request.cors.allow-methods: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# Comma-separated list of origin patterns to allow. Unlike allowed origins which only supports {@code *}, origin patterns are more flexible (for example {@code https://*.example.com}) and can be used when credentials are allowed. When no allowed origin patterns or allowed origins are set, CORS support is disabled.
# cas.http-web-request.cors.allow-origin-patterns: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Origin header indicates the origin of the cross-site access request or preflight request. The origin is a URI indicating the server from which the request initiated. When credentials are allowed, '*' cannot be used and origin patterns should be configured instead. It does not include any path information, but only the server name.
# cas.http-web-request.cors.allow-origins: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# Whether CORS should be enabled for http requests.
# cas.http-web-request.cors.enabled: false

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Access-Control-Expose-Headers header lets a server accept headers that browsers are allowed to access.
# cas.http-web-request.cors.exposed-headers: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpCorsRequestProperties
# Module: cas-server-core-web
# The Access-Control-Max-Age header indicates how long the results of a preflight request can be cached.
# cas.http-web-request.cors.max-age: 3600

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Custom response headers to inject into the response as needed.
# cas.http-web-request.custom-headers: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# When true, will inject the following headers into the response for non-static resources. &lt;pre&gt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate Pragma: no-cache Expires: 0 &lt;/pre&gt;
# cas.http-web-request.header.cache: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# Helps you reduce XSS risks on modern browsers by declaring what dynamic resources are allowed to load via a HTTP Header. Header value is made up of one or more directives. Multiple directives are separated with a semicolon.
# cas.http-web-request.header.content-security-policy: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# Allow CAS to inject and enforce http security headers via an http filter that are outlined here for caching, HSTS, etc.
# cas.http-web-request.header.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# When true, will inject the following headers into the response: {@code Strict-Transport-Security: max-age=15768000 ; includeSubDomains}.
# cas.http-web-request.header.hsts: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# When true, will inject the following headers into the response: {@code X-Content-Type-Options: nosniff}.
# cas.http-web-request.header.xcontent: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# When true, will inject the following headers into the response: {@code X-Frame-Options: DENY}.
# cas.http-web-request.header.xframe: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# Will inject values into the {@code X-Frame-Options} header into the response.
# cas.http-web-request.header.xframe-options: DENY

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# When true, will inject the following headers into the response: {@code X-XSS-Protection: 1; mode=block}.
# cas.http-web-request.header.xss: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpHeadersRequestProperties
# Module: cas-server-core-web
# Will inject values into the {@code X-XSS-Protection} header into the response.
# cas.http-web-request.header.xss-options: 1; mode&#61;block

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Parameters that are only allowed and accepted during posts.
# cas.http-web-request.only-post-params: username,password

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Parameters to sanitize and cross-check in incoming requests. The special value * instructs the Filter to check all parameters.
# cas.http-web-request.params-to-check: ticket,service,renew,gateway,warn,method,target,SAMLart,pgtUrl,pgt,pgtId,pgtIou,targetService,entityId,token

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpRequestProperties
# Module: cas-server-core-web
# Specify a regular expression that would be checked against the request URL. If a successful match is found, the request would be blocked.
# cas.http-web-request.pattern-to-block: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpWebRequestProperties
# Module: cas-server-core-web
# Control and specify the encoding for all http requests.
# cas.http-web-request.web.encoding: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.security.HttpWebRequestProperties
# Module: cas-server-core-web
# Whether specified encoding should be forced for every request. Whether the specified encoding is supposed to override existing request and response encodings
# cas.http-web-request.web.force-encoding: true

# Required: false
# Type: java.lang.Long
# Owner: 
# Module: 
# Timestamp that indicates the initialization time.
# cas.initialization-time: 0

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.interrupt.attribute-name: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the regex namespace.
# Deprecation Replacement: cas.interrupt.regex.attribute-name

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.interrupt.attribute-value: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the regex namespace.
# Deprecation Replacement: cas.interrupt.regex.attribute-value

# Required: false
# Type: org.apereo.cas.configuration.model.support.interrupt.InterruptCoreProperties$InterruptTriggerModes
# Owner: org.apereo.cas.configuration.model.support.interrupt.InterruptCoreProperties
# Module: cas-server-support-interrupt-webflow
# Define how interrupt notifications should be triggered in the authentication flow.
Available values are as follows:
<ul><li>{@code AFTER_AUTHENTICATION}: Trigger interrupt notifications and inquiry
after authentication events and before
single sign-on has been established.</li><li>{@code AFTER_SSO}: Trigger interrupt notifications and inquiry
after single sign-on has been established.
Interrupt queries that execute after single sign-on
cannot control the creation of the
SSO session conditionally.</li></ul>
# cas.interrupt.core.trigger-mode: AFTER_AUTHENTICATION

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.interrupt.GroovyInterruptProperties
# Module: cas-server-support-interrupt-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.interrupt.groovy.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.interrupt.JsonInterruptProperties
# Module: cas-server-support-interrupt-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.interrupt.json.location: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RegexInterruptProperties
# Module: cas-server-support-interrupt-webflow
# A regex pattern on the attribute name that if matches will successfully complete the first condition for the interrupt notifications trigger.
# cas.interrupt.regex.attribute-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RegexInterruptProperties
# Module: cas-server-support-interrupt-webflow
# A regex pattern on the attribute value that if matches will successfully complete the first condition for the interrupt notifications trigger.
# cas.interrupt.regex.attribute-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RestfulInterruptProperties
# Module: cas-server-support-interrupt-webflow
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.interrupt.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RestfulInterruptProperties
# Module: cas-server-support-interrupt-webflow
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.interrupt.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.interrupt.RestfulInterruptProperties
# Module: cas-server-support-interrupt-webflow
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.interrupt.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RestfulInterruptProperties
# Module: cas-server-support-interrupt-webflow
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.interrupt.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.interrupt.RestfulInterruptProperties
# Module: cas-server-support-interrupt-webflow
# The endpoint URL to contact and retrieve attributes.
# cas.interrupt.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.DatabaseProperties
# Module: cas-server-support-jdbc-drivers
# When choosing physical table names, determine whether names should be considered case-insensitive.
# cas.jdbc.case-insensitive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.DatabaseProperties
# Module: cas-server-support-jdbc-drivers
# Whether to generate DDL after the EntityManagerFactory has been initialized creating/updating all relevant tables.
# cas.jdbc.gen-ddl: true

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.jpa.DatabaseProperties
# Module: cas-server-support-jdbc-drivers
# Indicate a physical table name to be used by the hibernate naming strategy in case table names need to be customized for the specific type of database. The key here indicates the CAS-provided table name and the value is the translate physical name for the database. If a match is not found for the CAS-provided table name, then that name will be used by default.
# cas.jdbc.physical-table-names: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.DatabaseProperties
# Module: cas-server-support-jdbc-drivers
# Whether SQL queries should be displayed in the console/logs.
# cas.jdbc.show-sql: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# A regular expression pattern that indicates the set of allowed IP addresses, when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc), the cookie can still be considered valid if the new IP address matches the pattern specified here.
# cas.locale.cookie.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.locale.cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.locale.cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.locale.cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.locale.cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.locale.cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.locale.cookie.path: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# When generating cookie values, determine whether the value should be compounded and signed with the properties of the current session, such as IP address, user-agent, etc.
# cas.locale.cookie.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.locale.cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.LocaleCookieProperties
# Module: cas-server-core-web
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.locale.cookie.secure: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleProperties
# Module: cas-server-core-web
# Default locale.
# cas.locale.default-value: en

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.LocaleProperties
# Module: cas-server-core-web
# When set to true, locale resolution via request parameters and such is ignored and the locale default value is always enforced.
# cas.locale.force-default-locale: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.LocaleProperties
# Module: cas-server-core-web
# Parameter name to use when switching locales.
# cas.locale.param-name: locale

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.logging.LoggingProperties
# Module: cas-server-core-logging
# Allow CAS to add http request details into the logging's MDC filter. Mapped Diagnostic Context is essentially a map maintained by the logging framework where the application code provides key-value pairs which can then be inserted by the logging framework in log messages. MDC data can also be highly helpful in filtering messages or triggering certain actions.
# cas.logging.mdc-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.logout.LogoutProperties
# Module: cas-server-core-logout
# Before logout, allow the option to confirm on the web interface.
# cas.logout.confirm-logout: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.logout.LogoutProperties
# Module: cas-server-core-logout
# Whether CAS should be allowed to redirect to an alternative location after logout.
# cas.logout.follow-service-redirects: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.logout.LogoutProperties
# Module: cas-server-core-logout
# The target destination to which CAS should redirect after logout is indicated and extracted by a parameter name of your choosing here. If none specified, the default will be used as {@code service}.
# cas.logout.redirect-parameter: service

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.logout.LogoutProperties
# Module: cas-server-core-logout
# A url to which CAS must immediately redirect after all logout operations have completed. Typically useful in scenarios where CAS is acting as a proxy and needs to redirect to an external identity provider's logout endpoint in order to remove a session, etc.
# cas.logout.redirect-url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.logout.LogoutProperties
# Module: cas-server-core-logout
# Indicates whether tickets issued and linked to a ticket-granting ticket should also be removed as part of logout. There are a number of tickets issued by CAS whose expiration policy is usually by default bound to the SSO expiration policy and the active TGT, yet such tickets may be allowed to live beyond the normal lifetime of a CAS SSO session with options to be renewed. Examples include OAuth's access tokens, etc. Set this option to true if you want all linked tickets to be removed.
# cas.logout.remove-descendant-tickets: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.geo.maxmind.MaxmindProperties
# Module: cas-server-support-geolocation-maxmind
# Path to the location of the database file containing cities.
# cas.maxmind.city-database: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.geo.maxmind.MaxmindProperties
# Module: cas-server-support-geolocation-maxmind
# Path to the location of the database file containing countries.
# cas.maxmind.country-database: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# A list of strings representing base names for this message bundle. Set an array of basenames, each following the basic ResourceBundle convention of not specifying file extension or language codes. The resource location format is up to the specific MessageSource implementation. Regular and XMl properties files are supported: e.g. "messages" will find a "messages.properties", "messages_en.properties" etc arrangement as well as "messages.xml", "messages_en.xml" etc. The associated resource bundles will be checked sequentially when resolving a message code. Note that message definitions in a previous resource bundle will override ones in a later bundle, due to the sequential lookup.
# cas.message-bundle.base-names: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# Cache size.
# cas.message-bundle.cache-seconds: 180

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# A list of strings representing common names for this message bundle. Specify locale-independent common messages, with the message code as key and the full message String (may contain argument placeholders) as value. <p> Entries in last common names override first values (as opposed to baseNames used in message bundles).
# cas.message-bundle.common-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# Message bundle character encoding.
# cas.message-bundle.encoding: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# Flag that controls whether to fallback to the default system locale if no locale is specified explicitly. Set whether to fall back to the system Locale if no files for a specific Locale have been found. If this is turned off, the only fallback will be the default file (e.g. "messages.properties" for basename "messages"). Falling back to the system Locale is the default behavior of {@link java.util.ResourceBundle}. However, this is often not desirable in an application server environment, where the system Locale is not relevant to the application at all: set this flag to {@code false} in such a scenario.
# cas.message-bundle.fallback-system-locale: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.MessageBundleProperties
# Module: cas-server-core-web
# Flag that controls whether to use code message. Set whether to use the message code as default message instead of throwing a {@code NoSuchMessageException}. Useful for development and debugging. Note: In case of a {@code MessageSourceResolvable} with multiple codes (like a FieldError) and a MessageSource that has a parent MessageSource, do not activate "useCodeAsDefaultMessage" in the parent: Else, you'll get the first code returned as message by the parent, without attempts to check further codes.
# cas.message-bundle.use-code-message: true

# Required: false
# Type: java.util.List<EndpointAccessLevel>
# Owner: org.apereo.cas.configuration.model.core.monitor.ActuatorEndpointProperties
# Module: cas-server-support-reports
# Define the security access level of the endpoint.
Available values are as follows:
<ul><li>{@code PERMIT}: Allow open access to the endpoint.</li><li>{@code ANONYMOUS}: Allow anonymous access to the endpoint.</li><li>{@code DENY}: Block access to the endpoint.</li><li>{@code AUTHENTICATED}: Require authenticated access to the endpoint.</li><li>{@code ROLE}: Require authenticated access to the endpoint along with a role requirement.</li><li>{@code AUTHORITY}: Require authenticated access to the endpoint along with an authority requirement.</li><li>{@code IP_ADDRESS}: Require authenticated access to the endpoint using a collection of IP addresses.</li></ul>
# cas.monitor.endpoints.endpoint.[key].access: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.monitor.ActuatorEndpointProperties
# Module: cas-server-support-reports
# Required user authorities.
# cas.monitor.endpoints.endpoint.[key].required-authorities: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.monitor.ActuatorEndpointProperties
# Module: cas-server-support-reports
# Required ip addresses.
# cas.monitor.endpoints.endpoint.[key].required-ip-addresses: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.monitor.ActuatorEndpointProperties
# Module: cas-server-support-reports
# Required user roles.
# cas.monitor.endpoints.endpoint.[key].required-roles: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.ActuatorEndpointsMonitorProperties
# Module: cas-server-support-reports
# Control whether access to endpoints can be controlled via form-based login over the web via a special admin login endpoint.
# cas.monitor.endpoints.form-login-enabled: false

# Required: false
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.monitor.JaasSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# JAAS login resource file.
# cas.monitor.endpoints.jaas.login-config: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JaasSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The login context name should coincide with a given index in the login config specified. This name is used as the index to the configuration specified in the login config property. &lt;pre&gt; JAASTest { org.springframework.security.authentication.jaas.TestLoginModule required; }; &lt;/pre&gt; In the above example, {@code JAASTest} should be set as the context name.
# cas.monitor.endpoints.jaas.login-context-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JaasSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# If set, a call to {@code Configuration#refresh()} will be made by {@code #configureJaas(Resource)} method.
# cas.monitor.endpoints.jaas.refresh-configuration-on-startup: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.monitor.endpoints.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.monitor.endpoints.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.monitor.endpoints.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.monitor.endpoints.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.monitor.endpoints.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.monitor.endpoints.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.monitor.endpoints.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The JDBC driver used to connect to the database.
# cas.monitor.endpoints.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.monitor.endpoints.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Used to specify number of rows to be fetched in a select query.
# cas.monitor.endpoints.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Allow hibernate to generate query statistics.
# cas.monitor.endpoints.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The SQL query to be executed to test the validity of connections.
# cas.monitor.endpoints.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.monitor.endpoints.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.monitor.endpoints.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.monitor.endpoints.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.monitor.endpoints.jdbc.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The database connection password.
# cas.monitor.endpoints.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as 'UTF-8'. Relevant when the type used is {@code DEFAULT}.
# cas.monitor.endpoints.jdbc.password-encoder.character-encoding: UTF-8

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# The encoding algorithm to use such as {@code MD5}. Relevant when the type used is {@code DEFAULT} or {@code GLIBC_CRYPT}.
# cas.monitor.endpoints.jdbc.password-encoder.encoding-algorithm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Secret to use with {@code STANDARD}, {@code PBKDF2}, {@code BCRYPT}, {@code GLIBC_CRYPT} password encoders. Secret usually is an optional setting.
# cas.monitor.endpoints.jdbc.password-encoder.secret: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Strength or number of iterations to use for password hashing. Usually relevant when dealing with {@code PBKDF2} or {@code BCRYPT} encoders. Used by {@code GLIBC_CRYPT} encoders as well.
# cas.monitor.endpoints.jdbc.password-encoder.strength: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties
# Module: cas-server-core-authentication
# Define the password encoder type to use. Type may be specified as blank or {@code NONE} to disable password encoding. It may also refer to a fully-qualified class name that implements the Spring Security's {@code PasswordEncoder} interface if you wish you define your own encoder. The following types may be used: <ul>     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest     algorithms via {@code character-encoding} and {@code encoding-algorithm}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}: Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded and have the label {SHA} or {SSHA} prepended to the encoded hash.</li>     <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on the     {@code encoding-algorithm}, strength provided and an optional secret.</li>     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder} of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged with handling password encoding operations.</li> </ul>
# cas.monitor.endpoints.jdbc.password-encoder.type: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.monitor.endpoints.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.monitor.endpoints.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.monitor.endpoints.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.monitor.endpoints.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.monitor.endpoints.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.monitor.endpoints.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.monitor.endpoints.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.monitor.endpoints.jdbc.properties: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Query to execute in order to authenticate users via JDBC. Example: {@code SELECT username,password,enabled FROM users WHERE username=?}
# cas.monitor.endpoints.jdbc.query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Prefix to add to the role.
# cas.monitor.endpoints.jdbc.role-prefix: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The database connection URL.
# cas.monitor.endpoints.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.monitor.endpoints.jdbc.user: sa

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.monitor.endpoints.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Set if multiple Entries are allowed.
# cas.monitor.endpoints.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.monitor.endpoints.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.monitor.endpoints.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The bind credential to use when connecting to LDAP.
# cas.monitor.endpoints.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.monitor.endpoints.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.monitor.endpoints.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Sets the maximum amount of time that connects will block.
# cas.monitor.endpoints.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.monitor.endpoints.ldap.connection-strategy: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Define how aliases are de-referenced. Accepted values are: <ul> <li>{@code NEVER}</li> <li>{@code SEARCHING}: dereference when searching the entries beneath the starting point but not when searching for the starting entry.</li> <li>{@code FINDING}: dereference when searching for the starting entry but not when searching the entries beneath the starting point.</li> <li>{@code ALWAYS}: dereference when searching for the starting entry and when searching the entries beneath the starting point.</li> </ul>
# cas.monitor.endpoints.ldap.deref-aliases: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether to use a pooled connection factory in components.
# cas.monitor.endpoints.ldap.disable-pooling: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Specify the dn format accepted by the AD authenticator, etc. Example format might be {@code uid=%s,ou=people,dc=example,dc=org}.
# cas.monitor.endpoints.ldap.dn-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether specific search entry resolvers need to be set on the authenticator, or the default should be used.
# cas.monitor.endpoints.ldap.enhance-with-entry-resolver: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.monitor.endpoints.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Set if search referrals should be followed.
# cas.monitor.endpoints.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.monitor.endpoints.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.monitor.endpoints.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.monitor.endpoints.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Keystore password.
# cas.monitor.endpoints.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.monitor.endpoints.ldap.keystore-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Indicate whether the LDAP search query is allowed to return multiple entries.
# cas.monitor.endpoints.ldap.ldap-authz.allow-multiple-results: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Base DN to start the search.
# cas.monitor.endpoints.ldap.ldap-authz.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Attribute expected to be found on the entry resulting from the group search whose value is going to be used to construct roles. The final value is always prefixed with {@link #groupPrefix}. This is useful in scenarios where you wish to grant access to a resource to all users who a member of a given group.
# cas.monitor.endpoints.ldap.ldap-authz.group-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Base DN to start the search looking for groups.
# cas.monitor.endpoints.ldap.ldap-authz.group-base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Search filter to begin looking for groups.
# cas.monitor.endpoints.ldap.ldap-authz.group-filter: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# A prefix that is prepended to the group attribute value to construct an authorized role.
# cas.monitor.endpoints.ldap.ldap-authz.group-prefix: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Attribute expected to be found on the entry whose value is going to be used to construct roles. The final value is always prefixed with {@link #rolePrefix}. This is useful in scenarios where you wish to grant access to a resource to all users who carry a special attribute.
# cas.monitor.endpoints.ldap.ldap-authz.role-attribute: uugid

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# Prefix for the role.
# cas.monitor.endpoints.ldap.ldap-authz.role-prefix: ROLE_

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapAuthorizationProperties
# Module: cas-server-support-ldap
# LDAP search filter to locate accounts.
# cas.monitor.endpoints.ldap.ldap-authz.search-filter: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.monitor.endpoints.ldap.ldap-url: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.monitor.endpoints.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.monitor.endpoints.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Name of the LDAP handler.
# cas.monitor.endpoints.ldap.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.monitor.endpoints.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.monitor.endpoints.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# If principalAttributePassword is empty then a user simple bind is done to validate credentials otherwise the given attribute is compared with the given principalAttributePassword using the SHA encrypted value of it. <p> For the anonymous authentication type, if principalAttributePassword is empty then a user simple bind is done to validate credentials otherwise the given attribute is compared with the given principalAttributePassword using the SHA encrypted value of it. </p>
# cas.monitor.endpoints.ldap.principal-attribute-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.monitor.endpoints.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Duration of time to wait for responses.
# cas.monitor.endpoints.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# SASL authorization id.
# cas.monitor.endpoints.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The SASL mechanism.
# cas.monitor.endpoints.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# SASL mutual auth is enabled?
# cas.monitor.endpoints.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# SASL quality of protected.
# cas.monitor.endpoints.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The SASL realm.
# cas.monitor.endpoints.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# SASL security strength.
# cas.monitor.endpoints.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Search handlers.
# cas.monitor.endpoints.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.monitor.endpoints.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.monitor.endpoints.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.monitor.endpoints.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.monitor.endpoints.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.monitor.endpoints.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.monitor.endpoints.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.monitor.endpoints.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.monitor.endpoints.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.monitor.endpoints.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.monitor.endpoints.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.monitor.endpoints.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.monitor.endpoints.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.monitor.endpoints.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.monitor.endpoints.ldap.search-filter: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether subtree searching is allowed.
# cas.monitor.endpoints.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.monitor.endpoints.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.monitor.endpoints.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.monitor.endpoints.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Password needed to open the truststore.
# cas.monitor.endpoints.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.monitor.endpoints.ldap.trust-store-type: 

# Required: true
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties$AuthenticationTypes
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# The authentication type. <ul> <li>{@code AD} - Users authenticate with {@code sAMAccountName}. </li> <li>{@code AUTHENTICATED} - Manager bind/search type of authentication. If {@code} principalAttributePassword} is empty then a user simple bind is done to validate credentials. Otherwise the given attribute is compared with the given {@code principalAttributePassword} using the {@code SHA} encrypted value of it.</li> <li>{@code ANONYMOUS}: Similar semantics as {@code AUTHENTICATED} except no {@code bindDn} and {@code bindCredential} may be specified to initialize the connection. If {@code principalAttributePassword} is empty then a user simple bind is done to validate credentials. Otherwise the given attribute is compared with the given {@code principalAttributePassword} using the {@code SHA} encrypted value of it.</li> <li>DIRECT: Direct Bind - Compute user DN from format string and perform simple bind. This is relevant when no search is required to compute the DN needed for a bind operation. Use cases for this type are: 1) All users are under a single branch in the directory, {@code e.g. ou=Users,dc=example,dc=org.} 2) The username provided on the CAS login form is part of the DN, e.g. {@code uid=%s,ou=Users,dc=example,dc=org}.</li>  </ul>
Available values are as follows:
<ul><li>{@code AD}: Active Directory.</li><li>{@code AUTHENTICATED}: Authenticated Search.</li><li>{@code DIRECT}: Direct Bind.</li><li>{@code ANONYMOUS}: Anonymous Search.</li></ul>
# cas.monitor.endpoints.ldap.type: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether TLS should be used and enabled when establishing the connection.
# cas.monitor.endpoints.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether connections should be validated when loaned out from the pool.
# cas.monitor.endpoints.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Period at which pool should be validated.
# cas.monitor.endpoints.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Whether connections should be validated periodically when the pool is idle.
# cas.monitor.endpoints.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapSecurityActuatorEndpointsMonitorProperties
# Module: cas-server-core-monitor
# Period at which validation operations may time out.
# cas.monitor.endpoints.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.monitor.endpoints.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.monitor.endpoints.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.monitor.endpoints.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.monitor.endpoints.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.monitor.endpoints.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.monitor.endpoints.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.monitor.endpoints.ldap.validator.type: search

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.monitor.jdbc.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.monitor.jdbc.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.monitor.jdbc.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.monitor.jdbc.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.monitor.jdbc.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.monitor.jdbc.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.monitor.jdbc.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The JDBC driver used to connect to the database.
# cas.monitor.jdbc.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.monitor.jdbc.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Used to specify number of rows to be fetched in a select query.
# cas.monitor.jdbc.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Allow hibernate to generate query statistics.
# cas.monitor.jdbc.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The SQL query to be executed to test the validity of connections.
# cas.monitor.jdbc.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.monitor.jdbc.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.monitor.jdbc.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.monitor.jdbc.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.monitor.jdbc.leak-threshold: 3000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# When monitoring the JDBC connection pool, indicates the amount of time the operation must wait before it times outs and considers the pool in bad shape.
# cas.monitor.jdbc.max-wait: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The database connection password.
# cas.monitor.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.monitor.jdbc.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.monitor.jdbc.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.monitor.jdbc.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.monitor.jdbc.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.monitor.jdbc.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.monitor.jdbc.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.monitor.jdbc.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.monitor.jdbc.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The database connection URL.
# cas.monitor.jdbc.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.monitor.jdbc.user: sa

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.JdbcMonitorProperties
# Module: cas-server-support-jdbc-monitor
# The query to execute against the database to monitor status.
# cas.monitor.jdbc.validation-query: SELECT 1

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties>
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorProperties
# Module: cas-server-core-monitor
# Options for monitoring LDAP resources.
# cas.monitor.ldap: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether search/query results are allowed to match on multiple DNs,
or whether a single unique DN is expected for the result.
# cas.monitor.ldap[].allow-multiple-dns: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Set if multiple Entries are allowed.
# cas.monitor.ldap[].allow-multiple-entries: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Indicate the collection of attributes that are to be tagged and processed as binary
attributes by the underlying search resolver.
# cas.monitor.ldap[].binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The bind credential to use when connecting to LDAP.
# cas.monitor.ldap[].bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The bind DN to use when connecting to LDAP.
LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters:
<ul>
<li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li>
<li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li>
<li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li>
<li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li>
</ul>
# cas.monitor.ldap[].bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The length of time the pool will block.
By default the pool will block indefinitely and there is no guarantee that
waiting threads will be serviced in the order in which they made their request.
This option should be used with a blocking connection pool when you need to control the exact
number of connections that can be created
# cas.monitor.ldap[].block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Sets the maximum amount of time that connects will block.
# cas.monitor.ldap[].connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed.
<ul>
<li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li>
<li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>
<li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>
<li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>
</ul>
# cas.monitor.ldap[].connection-strategy: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether to use a pooled connection factory in components.
# cas.monitor.ldap[].disable-pooling: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether LDAP monitoring should be enabled.
# cas.monitor.ldap[].enabled: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Attempt to populate the connection pool early on startup
and fail quickly if something goes wrong.
# cas.monitor.ldap[].fail-fast: true

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Set if search referrals should be followed.
# cas.monitor.ldap[].follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.monitor.ldap[].hostname-verifier: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Removes connections from the pool based on how long they have been idle in the available queue.
Prunes connections that have been idle for more than the indicated amount.
# cas.monitor.ldap[].idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Path to the keystore used for SSL connections.
Typically contains SSL certificates for the LDAP server.
# cas.monitor.ldap[].keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Keystore password.
# cas.monitor.ldap[].keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The type of keystore. {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.monitor.ldap[].keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.monitor.ldap[].ldap-url: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.monitor.ldap[].max-pool-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# When monitoring the LDAP connection pool, indicates the amount of time the operation must wait
before it times outs and considers the pool in bad shape.
# cas.monitor.ldap[].max-wait: PT5S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Minimum LDAP connection pool size.
Size the pool should be initialized to and pruned to
# cas.monitor.ldap[].min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Name of the LDAP handler.
# cas.monitor.ldap[].name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# You may receive unexpected LDAP failures, when CAS is configured to authenticate
using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches.
Every second attempt with a given LDAP connection from the pool would fail if it was on
the same connection as a failed login attempt, and the regular connection validator would
similarly fail. When a connection is returned back to a pool,
it still may contain the principal and credentials from the previous attempt.
Before the next bind attempt using that connection, the validator tries to
validate the connection again but fails because it’s no longer trying with the
configured bind credentials but with whatever user DN was used in the previous step.
Given the validation failure, the connection is closed and CAS would deny
access by default. Passivators attempt to reconnect
to LDAP with the configured bind credentials, effectively resetting the connection
to what it should be after each bind request.
Furthermore if you are seeing errors in the logs that resemble
a 'Operation exception encountered, reopening connection' type of message, this
usually is an indication that the connection pool’s validation timeout
established and created by CAS is greater than the timeout configured
in the LDAP server, or more likely, in the load balancer in front of
the LDAP servers. You can adjust the LDAP server session’s timeout
for connections, or you can teach CAS to use a validity period that
is equal or less than the LDAP server session’s timeout.
Accepted values are:
<ul>
<li>{@code NONE}: No passivation takes place.</li>
<li>{@code BIND}: The default behavior which passivates a connection by performing a
bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li>
</ul>
# cas.monitor.ldap[].pool-passivator: BIND

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep
in the pool, including both idle and in-use connections.
# cas.monitor.ldap[].pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.
<p>
A value of zero specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
# cas.monitor.ldap[].pool.max-wait: PT2S

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed
to reach, including both idle and in-use connections.
# cas.monitor.ldap[].pool.min-size: 6

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed.
<p>
There is a performance impact when pool suspension is enabled.
Unless you need it (for a redundancy system for example) do not enable it.
# cas.monitor.ldap[].pool.suspension: 

# Required: false
# Type: long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the
pool will wait for a connection to be validated as alive.
# cas.monitor.ldap[].pool.timeout-millis: 1_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Removes connections from the pool based on how long they have been idle in the available queue.
Run the pruning process at the indicated interval.
# cas.monitor.ldap[].prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Duration of time to wait for responses.
# cas.monitor.ldap[].response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# SASL authorization id.
# cas.monitor.ldap[].sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The SASL mechanism.
# cas.monitor.ldap[].sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# SASL mutual auth is enabled?
# cas.monitor.ldap[].sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# SASL quality of protected.
# cas.monitor.ldap[].sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The SASL realm.
# cas.monitor.ldap[].sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# SASL security strength.
# cas.monitor.ldap[].sasl-security-strength: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Path of the trust certificates to use for the SSL connection.
Ignores keystore-related settings when activated and used.
# cas.monitor.ldap[].trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Trust Manager options.
Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,
and for deciding whether credentials presented by a peer should be accepted.
Accepted values are:
* <ul>
<li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li>
<li>{@code ANY}: Trust any client or server.</li>
</ul>
# cas.monitor.ldap[].trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Path to the keystore used to determine which certificates or
certificate authorities should be trusted.
Used when connecting to an LDAP server via LDAPS or startTLS connection.
If left blank, the default truststore for the Java runtime is used.
# cas.monitor.ldap[].trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Password needed to open the truststore.
# cas.monitor.ldap[].trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# The type of trust keystore that determines which certificates or certificate authorities are trusted.
Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}.
If left blank, defaults to the default keystore type indicated
by the underlying Java platform.
# cas.monitor.ldap[].trust-store-type: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether TLS should be used and enabled when establishing the connection.
# cas.monitor.ldap[].use-start-tls: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether connections should be validated when loaned out from the pool.
# cas.monitor.ldap[].validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Period at which pool should be validated.
# cas.monitor.ldap[].validate-period: PT5M

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Whether connections should be validated periodically when the pool is idle.
# cas.monitor.ldap[].validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.LdapMonitorProperties
# Module: cas-server-support-ldap-monitor
# Period at which validation operations may time out.
# cas.monitor.ldap[].validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.monitor.ldap[].validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.monitor.ldap[].validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.monitor.ldap[].validator.base-dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.monitor.ldap[].validator.dn: EMPTY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.monitor.ldap[].validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.monitor.ldap[].validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.

The following LDAP validators can be used to test connection health status:
<ul>
<li>{@code search}: Validates a connection is healthy by performing a search operation.
Validation is considered successful if the search result size is greater than zero.</li>
<li>{@code none}: No validation takes place.</li>
<li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li>
</ul>
# cas.monitor.ldap[].validator.type: search

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor eviction threshold where if reached, CAS might generate a warning status for health checks. The underlying data source and monitor (i.e. cache) must support the concept of evictions.
# cas.monitor.load.warn.eviction-threshold: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor threshold where if reached, CAS might generate a warning status for health checks.
# cas.monitor.load.warn.threshold: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set the daemon state of the IO thread (defaults to true).
# cas.monitor.memcached.daemon: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Failure mode. Acceptable values are {@code Redistribute,Retry,Cancel}.
# cas.monitor.memcached.failure-mode: Redistribute

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Hash algorithm. Acceptable values are {@code NATIVE_HASH,CRC_HASH,FNV1_64_HASH,FNV1A_64_HASH,FNV1_32_HASH,FNV1A_32_HASH,KETAMA_HASH}.
# cas.monitor.memcached.hash-algorithm: FNV1_64_HASH

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# If true, {@code reset} is called automatically after an entire object graph has been read or written. If false, {@code reset} must be called manually, which allows unregistered class names, references, and other information to span multiple object graphs.
# cas.monitor.memcached.kryo-auto-reset: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# If true, each appearance of an object in the graph after the first is stored as an integer ordinal. When set to true, {@code MapReferenceResolver} is used. This enables references to the same object and cyclic graphs to be serialized, but typically adds overhead of one byte per object.
# cas.monitor.memcached.kryo-objects-by-reference: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# If true, an exception is thrown when an unregistered class is encountered. <p> If false, when an unregistered class is encountered, its fully qualified class name will be serialized and the default serializer for the class used to serialize the object. Subsequent appearances of the class within the same object graph are serialized as an int id. Registered classes are serialized as an int id, avoiding the overhead of serializing the class name, but have the drawback of needing to know the classes to be serialized up front.  See {@code ComponentSerializationPlan} for help here. </p>
# cas.monitor.memcached.kryo-registration-required: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Locator mode. Acceptable values are {@code ARRAY_MOD, CONSISTENT, VBUCKET}.
# cas.monitor.memcached.locator-type: ARRAY_MOD

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set the value for the maxTotal configuration attribute for pools created with this configuration instance.
# cas.monitor.memcached.max-idle: 8

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set the maximum reconnect delay.
# cas.monitor.memcached.max-reconnect-delay: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Sets the cap on the number of objects that can be allocated by the pool (checked out to clients, or idle awaiting checkout) at a given time. Use a negative value for no limit.
# cas.monitor.memcached.max-total: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Get the value for the minIdle configuration attribute for pools created with this configuration instance.
# cas.monitor.memcached.min-idle: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set the default operation timeout in milliseconds.
# cas.monitor.memcached.op-timeout: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Protocol. Acceptable values are {@code TEXT, BINARY}.
# cas.monitor.memcached.protocol: TEXT

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Comma-separated list of memcached servers.
# cas.monitor.memcached.servers: localhost:11211

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set to false if the default operation optimization is not desirable.
# cas.monitor.memcached.should-optimize: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# The number of seconds to wait for connections to finish before shutting down the client.
# cas.monitor.memcached.shutdown-timeout-seconds: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set the maximum timeout exception threshold.
# cas.monitor.memcached.timeout-exception-threshold: 2

# Required: false
# Type: org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties$TranscoderTypes
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Indicate the transcoder type.
Available values are as follows:
<ul><li>{@code KRYO}: CAS transcoder implementation based on Kryo fast serialization framework
suited for efficient serialization of tickets. Provides pooling mechanisms
as well as control over object registration and sequences.</li><li>{@code SERIAL}: Kryp native transcoder that serializes and compresses objects.</li><li>{@code WHALIN}: Transcoder that provides compatibility with Greg Whalin's memcached client.</li><li>{@code WHALINV1}: Handles old whalin encoding: data type is in the first byte of the value.</li></ul>
# cas.monitor.memcached.transcoder: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# For transcoders other than kryo, determines the compression threshold. Does not apply to kryo.
# cas.monitor.memcached.transcoder-compression-threshold: 16384

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MemcachedMonitorProperties
# Module: cas-server-support-memcached-monitor
# Set to true if you'd like to enable the Nagle algorithm.
# cas.monitor.memcached.use-nagle-algorithm: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MemoryMonitorProperties
# Module: cas-server-core-monitor
# The free memory threshold for the memory monitor. If the amount of free memory available reaches this point the memory monitor will report back a warning status as a health check.
# cas.monitor.memory.free-mem-threshold: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Name of the database to use for authentication.
# cas.monitor.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.monitor.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database instance name.
# cas.monitor.mongo.database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.monitor.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database password for authentication.
# cas.monitor.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.monitor.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.monitor.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.monitor.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.monitor.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.monitor.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.monitor.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database port.
# cas.monitor.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.monitor.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.monitor.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.monitor.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Sets whether writes should be retried if they fail due to a network error.
# cas.monitor.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Whether the database socket connection should be tagged with keep-alive.
# cas.monitor.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Whether connections require SSL.
# cas.monitor.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database connection timeout.
# cas.monitor.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# MongoDb database user for authentication.
# cas.monitor.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.monitor.MongoDbMonitorProperties
# Module: cas-server-support-mongo-monitor
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.monitor.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor eviction threshold where if reached, CAS might generate a warning status for health checks. The underlying data source and monitor (i.e. cache) must support the concept of evictions.
# cas.monitor.st.warn.eviction-threshold: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor threshold where if reached, CAS might generate a warning status for health checks.
# cas.monitor.st.warn.threshold: 10

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor eviction threshold where if reached, CAS might generate a warning status for health checks. The underlying data source and monitor (i.e. cache) must support the concept of evictions.
# cas.monitor.tgt.warn.eviction-threshold: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor threshold where if reached, CAS might generate a warning status for health checks.
# cas.monitor.tgt.warn.threshold: 10

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor eviction threshold where if reached, CAS might generate a warning status for health checks. The underlying data source and monitor (i.e. cache) must support the concept of evictions.
# cas.monitor.warn.eviction-threshold: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.monitor.MonitorWarningProperties
# Module: cas-server-core-monitor
# The monitor threshold where if reached, CAS might generate a warning status for health checks.
# cas.monitor.warn.threshold: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Activated attribute repository identifiers that should be used for fetching attributes if attribute resolution is enabled. The list here may include identifiers separated by comma.
# cas.person-directory.active-attribute-repository-ids: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.person-directory.attribute-definition-store: 
# Deprecation Level: ERROR
# Deprecation Reason: Configuration of the attribute definition store is moved under attribute repositories.
# Deprecation Replacement: cas.authn.attribute-repository.attribute-definition-store

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Whether attribute repositories should be contacted to fetch person attributes. Defaults to true if not set.
# cas.person-directory.attribute-resolution-enabled: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Attribute name to use to indicate the identifier of the principal constructed. If the attribute is blank or has no values, the default principal id will be used determined by the underlying authentication engine. The principal id attribute usually is removed from the collection of attributes collected, though this behavior depends on the schematics of the underlying authentication strategy.
# cas.person-directory.principal-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# In the event that the principal resolution engine resolves more than one principal, (specially if such principals in the chain have different identifiers), this setting determines strategy by which the principal id would be chosen from the chain. Accepted values are: {@code last}, {@code first}.
# cas.person-directory.principal-resolution-conflict-strategy: last

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# When true, throws an error back indicating that principal resolution has failed and no principal can be found based on the authentication requirements. Otherwise, logs the condition as an error without raising a catastrophic error.
# cas.person-directory.principal-resolution-failure-fatal: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Return a null principal object if no attributes can be found for the principal.
# cas.person-directory.return-null: 

# Required: false
# Type: org.apereo.cas.util.model.TriStateBoolean
# Owner: org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties
# Module: cas-server-core-authentication
# Uses an existing principal id that may have already been established in order to run person directory queries. This is generally useful in situations where authentication is delegated to an external identity provider and a principal is first established to then query an attribute source.
# cas.person-directory.use-existing-principal-id: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.rest.attribute-name: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the services namespace.
# Deprecation Replacement: cas.rest.services.attribute-name

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.rest.attribute-value: 
# Deprecation Level: ERROR
# Deprecation Reason: Setting is now moved into the services namespace.
# Deprecation Replacement: cas.rest.services.attribute-value

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.rest.body-auth: 
# Deprecation Level: ERROR
# Deprecation Reason: Configuration setting is moved to the new replacement
# Deprecation Replacement: cas.rest.x509.body-auth

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.rest.header-auth: 
# Deprecation Level: ERROR
# Deprecation Reason: Configuration setting is moved to the new replacement
# Deprecation Replacement: cas.rest.x509.header-auth

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.rest.RestRegisteredServicesProperties
# Module: cas-server-support-rest
# Authorization attribute name required by the REST endpoint in order to allow for the requested operation. Attribute must be resolvable by the authenticated principal, or must have been already.
# cas.rest.services.attribute-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.rest.RestRegisteredServicesProperties
# Module: cas-server-support-rest
# Matching authorization attribute value, pulled from the attribute required by the REST endpoint in order to allow for the requested operation. The attribute value may also be constructed as a regex pattern.
# cas.rest.services.attribute-value: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.rest.tls-client-auth: 
# Deprecation Level: ERROR
# Deprecation Reason: Configuration setting is moved to the new replacement
# Deprecation Replacement: cas.rest.x509.tls-client-auth

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.rest.RestX509Properties
# Module: cas-server-support-rest-x509
# Flag that enables {@link java.security.cert.X509Certificate} extraction from the request body for authentication.
# cas.rest.x509.body-auth: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.rest.RestX509Properties
# Module: cas-server-support-rest-x509
# Flag that enables {@link java.security.cert.X509Certificate} extraction from the request headers for authentication.
# cas.rest.x509.header-auth: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.rest.RestX509Properties
# Module: cas-server-support-rest-x509
# Flag that enables TLS client {@link java.security.cert.X509Certificate} extraction from the servlet container for authentication.
# cas.rest.x509.tls-client-auth: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Attribute namespace to use when generating SAML1 responses.
# cas.saml-core.attribute-namespace: http://www.ja-sig.org/products/cas/

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Issue length that controls the validity period of the assertion.
# cas.saml-core.issue-length: 30

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Issuer of the assertion when generating SAML1 responses.
# cas.saml-core.issuer: localhost

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Qualified name of the security manager class used for creating a SAML parser pool.
# cas.saml-core.security-manager: org.apache.xerces.util.SecurityManager

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Skew allowance that controls the issue instance of the authentication.
# cas.saml-core.skew-allowance: PT30S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.SamlCoreProperties
# Module: cas-server-support-saml
# Whether ticket ids generated should be saml2 compliant when generating SAML1 responses.
# cas.saml-core.ticketid-saml2: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.saml.mdui.SamlMetadataUIProperties
# Module: cas-server-support-saml-mdui
# If specified, creates a validity filter on the metadata to check for metadata freshness based on the max validity. Value is specified in seconds.
# cas.saml-metadata-ui.max-validity: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.mdui.SamlMetadataUIProperties
# Module: cas-server-support-saml-mdui
# The parameter name that indicates the entity id of the service provider submitted to CAS.
# cas.saml-metadata-ui.parameter: entityId

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.mdui.SamlMetadataUIProperties
# Module: cas-server-support-saml-mdui
# When parsing metadata, whether the root element is required to be signed.
# cas.saml-metadata-ui.require-signed-root: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.mdui.SamlMetadataUIProperties
# Module: cas-server-support-saml-mdui
# Whether valid metadata is required when parsing metadata.
# cas.saml-metadata-ui.require-valid-metadata: true

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.mdui.SamlMetadataUIProperties
# Module: cas-server-support-saml-mdui
# Metadata resources to load and parse through based on the incoming entity id in order to locate MDUI. Resources can be classpath/file/http resources. If each metadata resource has a signing certificate, they can be added onto the resource with a {@code ::} separator. Example: {@code classpath:/sp-metadata.xml::classpath:/pub.key}.
# cas.saml-metadata-ui.resources: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.saml-metadata-ui.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.saml-metadata-ui.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.saml-metadata-ui.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.saml-metadata-ui.schedule.start-delay: PT15S

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.academic-health-plans.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.academic-health-plans.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.academic-health-plans.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.academic-health-plans.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.academic-health-plans.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.academic-health-plans.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.academic-health-plans.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.academic-health-plans.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.academic-health-plans.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicHealthPlans
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.academic-health-plans.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.academic-works.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.academic-works.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.academic-works.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.academic-works.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.academic-works.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.academic-works.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.academic-works.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.academic-works.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.academic-works.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AcademicWorks
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.academic-works.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.adobe-cloud.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.adobe-cloud.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.adobe-cloud.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.adobe-cloud.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.adobe-cloud.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.adobe-cloud.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.adobe-cloud.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.adobe-cloud.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.adobe-cloud.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AdobeCloud
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.adobe-cloud.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.amazon.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.amazon.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.amazon.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.amazon.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.amazon.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.amazon.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.amazon.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.amazon.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.amazon.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Amazon
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.amazon.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.app-dynamics.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.app-dynamics.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.app-dynamics.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.app-dynamics.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.app-dynamics.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.app-dynamics.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.app-dynamics.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.app-dynamics.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.app-dynamics.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.AppDynamics
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.app-dynamics.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.arc-g-i-s.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.arc-g-i-s.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.arc-g-i-s.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.arc-g-i-s.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.arc-g-i-s.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.arc-g-i-s.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.arc-g-i-s.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.arc-g-i-s.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.arc-g-i-s.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArcGIS
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.arc-g-i-s.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.arms-software.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.arms-software.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.arms-software.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.arms-software.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.arms-software.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.arms-software.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.arms-software.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.arms-software.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.arms-software.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ArmsSoftware
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.arms-software.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.asana.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.asana.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.asana.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.asana.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.asana.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.asana.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.asana.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.asana.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.asana.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Asana
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.asana.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.benefit-focus.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.benefit-focus.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.benefit-focus.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.benefit-focus.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.benefit-focus.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.benefit-focus.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.benefit-focus.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.benefit-focus.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.benefit-focus.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BenefitFocus
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.benefit-focus.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.black-baud.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.black-baud.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.black-baud.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.black-baud.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.black-baud.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.black-baud.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.black-baud.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.black-baud.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.black-baud.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.BlackBaud
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.black-baud.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.box.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.box.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.box.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.box.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.box.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.box.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.box.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.box.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.box.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Box
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.box.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.bynder.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.bynder.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.bynder.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.bynder.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.bynder.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.bynder.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.bynder.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.bynder.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.bynder.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Bynder
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.bynder.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.cccco.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.cccco.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.cccco.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.cccco.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.cccco.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.cccco.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.cccco.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.cccco.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.cccco.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CaliforniaCommunityColleges
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.cccco.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.cher-well.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.cher-well.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.cher-well.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.cher-well.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.cher-well.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.cher-well.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.cher-well.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.cher-well.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.cher-well.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CherWell
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.cher-well.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.concur-solutions.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.concur-solutions.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.concur-solutions.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.concur-solutions.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.concur-solutions.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.concur-solutions.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.concur-solutions.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.concur-solutions.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.concur-solutions.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ConcurSolutions
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.concur-solutions.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.confluence.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.confluence.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.confluence.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.confluence.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.confluence.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.confluence.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.confluence.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.confluence.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.confluence.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Confluence
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.confluence.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.cranium-cafe.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.cranium-cafe.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.cranium-cafe.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.cranium-cafe.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.cranium-cafe.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.cranium-cafe.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.cranium-cafe.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.cranium-cafe.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.cranium-cafe.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CraniumCafe
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.cranium-cafe.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.crash-plan.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.crash-plan.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.crash-plan.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.crash-plan.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.crash-plan.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.crash-plan.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.crash-plan.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.crash-plan.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.crash-plan.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.CrashPlan
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.crash-plan.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.docu-sign.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.docu-sign.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.docu-sign.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.docu-sign.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.docu-sign.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.docu-sign.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.docu-sign.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.docu-sign.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.docu-sign.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.DocuSign
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.docu-sign.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.dropbox.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.dropbox.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.dropbox.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.dropbox.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.dropbox.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.dropbox.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.dropbox.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.dropbox.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.dropbox.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Dropbox
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.dropbox.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.easy-iep.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.easy-iep.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.easy-iep.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.easy-iep.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.easy-iep.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.easy-iep.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.easy-iep.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.easy-iep.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.easy-iep.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EasyIep
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.easy-iep.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.egnyte.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.egnyte.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.egnyte.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.egnyte.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.egnyte.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.egnyte.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.egnyte.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.egnyte.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.egnyte.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Egnyte
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.egnyte.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.emma.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.emma.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.emma.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.emma.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.emma.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.emma.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.emma.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.emma.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.emma.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Emma
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.emma.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.ever-bridge.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.ever-bridge.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.ever-bridge.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.ever-bridge.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.ever-bridge.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.ever-bridge.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.ever-bridge.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.ever-bridge.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.ever-bridge.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.EverBridge
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.ever-bridge.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.evernote.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.evernote.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.evernote.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.evernote.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.evernote.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.evernote.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.evernote.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.evernote.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.evernote.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Evernote
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.evernote.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.famis.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.famis.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.famis.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.famis.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.famis.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.famis.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.famis.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.famis.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.famis.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Famis
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.famis.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.gartner.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.gartner.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.gartner.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.gartner.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.gartner.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.gartner.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.gartner.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.gartner.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.gartner.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gartner
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.gartner.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.gitlab.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.gitlab.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.gitlab.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.gitlab.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.gitlab.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.gitlab.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.gitlab.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.gitlab.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.gitlab.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Gitlab
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.gitlab.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.give-campus.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.give-campus.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.give-campus.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.give-campus.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.give-campus.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.give-campus.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.give-campus.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.give-campus.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.give-campus.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.GiveCampus
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.give-campus.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.hipchat.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.hipchat.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.hipchat.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.hipchat.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.hipchat.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.hipchat.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.hipchat.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.hipchat.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.hipchat.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Hipchat
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.hipchat.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.in-common.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.in-common.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.in-common.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.in-common.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.in-common.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.in-common.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.in-common.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.in-common.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.in-common.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InCommon
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.in-common.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.infinite-campus.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.infinite-campus.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.infinite-campus.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.infinite-campus.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.infinite-campus.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.infinite-campus.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.infinite-campus.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.infinite-campus.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.infinite-campus.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.InfiniteCampus
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.infinite-campus.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.jira.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.jira.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.jira.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.jira.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.jira.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.jira.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.jira.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.jira.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.jira.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Jira
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.jira.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.neo-gov.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.neo-gov.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.neo-gov.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.neo-gov.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.neo-gov.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.neo-gov.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.neo-gov.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.neo-gov.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.neo-gov.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NeoGov
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.neo-gov.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.net-partner.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.net-partner.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.net-partner.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.net-partner.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.net-partner.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.net-partner.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.net-partner.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.net-partner.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.net-partner.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NetPartner
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.net-partner.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.new-relic.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.new-relic.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.new-relic.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.new-relic.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.new-relic.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.new-relic.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.new-relic.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.new-relic.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.new-relic.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.NewRelic
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.new-relic.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.office365.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.office365.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.office365.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.office365.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.office365.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.office365.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.office365.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.office365.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.office365.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Office365
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.office365.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.open-athens.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.open-athens.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.open-athens.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.open-athens.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.open-athens.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.open-athens.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.open-athens.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.open-athens.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.open-athens.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.OpenAthens
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.open-athens.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.pager-duty.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.pager-duty.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.pager-duty.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.pager-duty.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.pager-duty.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.pager-duty.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.pager-duty.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.pager-duty.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.pager-duty.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PagerDuty
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.pager-duty.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.poll-everywhere.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.poll-everywhere.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.poll-everywhere.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.poll-everywhere.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.poll-everywhere.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.poll-everywhere.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.poll-everywhere.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.poll-everywhere.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.poll-everywhere.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.PollEverywhere
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.poll-everywhere.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.qualtrics.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.qualtrics.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.qualtrics.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.qualtrics.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.qualtrics.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.qualtrics.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.qualtrics.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.qualtrics.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.qualtrics.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Qualtrics
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.qualtrics.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.rocket-chat.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.rocket-chat.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.rocket-chat.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.rocket-chat.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.rocket-chat.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.rocket-chat.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.rocket-chat.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.rocket-chat.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.rocket-chat.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.RocketChat
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.rocket-chat.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.sa-manage.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.sa-manage.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.sa-manage.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.sa-manage.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.sa-manage.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.sa-manage.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.sa-manage.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.sa-manage.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.sa-manage.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SAManage
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.sa-manage.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.safari-online.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.safari-online.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.safari-online.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.safari-online.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.safari-online.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.safari-online.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.safari-online.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.safari-online.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.safari-online.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SafariOnline
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.safari-online.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.salesforce.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.salesforce.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.salesforce.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.salesforce.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.salesforce.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.salesforce.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.salesforce.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.salesforce.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.salesforce.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Salesforce
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.salesforce.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.sans-sth.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.sans-sth.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.sans-sth.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.sans-sth.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.sans-sth.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.sans-sth.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.sans-sth.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.sans-sth.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.sans-sth.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SecuringTheHuman
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.sans-sth.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.service-now.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.service-now.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.service-now.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.service-now.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.service-now.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.service-now.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.service-now.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.service-now.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.service-now.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.ServiceNow
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.service-now.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.slack.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.slack.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.slack.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.slack.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.slack.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.slack.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.slack.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.slack.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.slack.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Slack
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.slack.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.sserca.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.sserca.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.sserca.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.sserca.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.sserca.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.sserca.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.sserca.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.sserca.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.sserca.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.SunshineStateEdResearchAlliance
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.sserca.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.symplicity.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.symplicity.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.symplicity.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.symplicity.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.symplicity.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.symplicity.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.symplicity.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.symplicity.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.symplicity.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Symplicity
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.symplicity.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.tableau.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.tableau.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.tableau.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.tableau.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.tableau.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.tableau.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.tableau.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.tableau.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.tableau.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Tableau
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.tableau.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.top-hat.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.top-hat.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.top-hat.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.top-hat.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.top-hat.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.top-hat.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.top-hat.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.top-hat.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.top-hat.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.TopHat
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.top-hat.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.warp-wire.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.warp-wire.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.warp-wire.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.warp-wire.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.warp-wire.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.warp-wire.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.warp-wire.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.warp-wire.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.warp-wire.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WarpWire
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.warp-wire.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.web-advisor.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.web-advisor.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.web-advisor.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.web-advisor.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.web-advisor.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.web-advisor.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.web-advisor.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.web-advisor.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.web-advisor.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.WebAdvisor
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.web-advisor.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.webex.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.webex.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.webex.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.webex.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.webex.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.webex.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.webex.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.webex.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.webex.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Webex
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.webex.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.workday.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.workday.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.workday.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.workday.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.workday.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.workday.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.workday.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.workday.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.workday.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Workday
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.workday.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.yuja.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.yuja.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.yuja.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.yuja.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.yuja.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.yuja.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.yuja.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.yuja.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.yuja.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Yuja
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.yuja.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.zendesk.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.zendesk.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.zendesk.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.zendesk.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.zendesk.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.zendesk.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.zendesk.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.zendesk.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.zendesk.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zendesk
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.zendesk.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.zimbra.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.zimbra.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.zimbra.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.zimbra.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.zimbra.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.zimbra.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.zimbra.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.zimbra.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.zimbra.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zimbra
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.zimbra.signature-location: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Set up the attribute release policy for this service. Allow attributes that are to be released to this SP. Attributes should be separated by commas and can be virtually mapped and renamed.
# cas.saml-sp.zoom.attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Description of this service provider as it's stored in the registry.
# cas.saml-sp.zoom.description:  SAML SP Integration

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# List of entityIds allowed for this service provider. Multiple ids can be specified in the event that the metadata is an aggregate.
# cas.saml-sp.zoom.entity-ids: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# The location of the metadata for this service provider. Can be a URL or another form of resource.
# cas.saml-sp.zoom.metadata: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Name of this service provider.
# cas.saml-sp.zoom.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Attribute to use when generating nameids for this SP.
# cas.saml-sp.zoom.name-id-attribute: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# The forced nameId format to use when generating a response.
# cas.saml-sp.zoom.name-id-format: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Indicate whether assertions should be signed.
# cas.saml-sp.zoom.sign-assertions: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Indicate whether responses should be signed.
# cas.saml-sp.zoom.sign-responses: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.saml.sps.SamlServiceProviderProperties.Zoom
# Module: cas-server-support-saml-sp-integrations
# Signature location used to verify metadata.
# cas.saml-sp.zoom.signature-location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# Decide whether scim should be enabled.
# cas.scim.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# Authenticate into the SCIM server/service via a pre-generated OAuth token.
# cas.scim.oauth-token: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# Authenticate into the SCIM server with a pre-defined password.
# cas.scim.password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# The SCIM provisioning target URI.
# cas.scim.target: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# Authenticate into the SCIM server with a pre-defined username.
# cas.scim.username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.scim.ScimProperties
# Module: cas-server-support-scim
# Indicate what version of the scim protocol is and should be used.
# cas.scim.version: 2

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.server.basic-authn.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: cas.server.* moved to cas.server.tomcat.*.
# Deprecation Replacement: cas.server.tomcat.basic-authn.enabled

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.server.http-proxy.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: cas.server.* moved to cas.server.tomcat.*.
# Deprecation Replacement: cas.server.tomcat.http-proxy.enabled

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.server.http.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: cas.server.* moved to cas.server.tomcat.*.
# Deprecation Replacement: cas.server.tomcat.http.enabled

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.CasServerProperties
# Module: cas-server-core
# Full name of the CAS server. This is the public-facing address of the CAS deployment and not the individual node address, in the event that CAS is clustered.
# cas.server.name: https://cas.example.org:8443

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.CasServerProperties
# Module: cas-server-core
# A concatenation of the server name plus the CAS context path. Deployments at root likely need to blank out this value.
# cas.server.prefix: /cas

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.CasServerProperties
# Module: cas-server-core
# The CAS Server scope.
# cas.server.scope: example.org

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# A boolean value which can be used to enable or disable the TRACE HTTP method. If not specified, this attribute is set to false.
# cas.server.tomcat.ajp.allow-trace: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# The default timeout for asynchronous requests in milliseconds. If not specified, this attribute is set to 10000 (10 seconds).
# cas.server.tomcat.ajp.async-timeout: PT5S

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Additional attributes to be set on the AJP connector in form of key-value pairs. Examples include: <ul> <li>{@code tomcatAuthentication}: If set to true, the authentication will be done in Tomcat. Otherwise, the authenticated principal will be propagated from the native webserver and used for authorization in Tomcat. Note that this principal will have no roles associated with it. The default value is true.</li> <li>{@code maxThreads}: The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool.</li> <li>{@code keepAliveTimeout}: The number of milliseconds this Connector will wait for another AJP request before closing the connection. The default value is to use the value that has been set for the connectionTimeout attribute.</li> <li>{@code maxCookieCount}: The maximum number of cookies that are permitted for a request. A value of less than zero means no limit. If not specified, a default value of 200 will be used.</li> <li>{@code bufferSize}: The size of the output buffer to use. If less than or equal to zero, then output buffering is disabled. The default value is -1 (i.e. buffering disabled)</li> <li>{@code clientCertProvider}: When client certificate information is presented in a form other than instances of java.security.cert.X509Certificate it needs to be converted before it can be used and this property controls which JSSE provider is used to perform the conversion. For example it is used with the AJP connectors, the HTTP APR connector and with the org.apache.catalina.valves.SSLValve.If not specified, the default provider will be used.</li> <li>{@code connectionTimeout}: The number of milliseconds this Connector will wait, after accepting a connection, for the request URI line to be presented. The default value is infinite (i.e. no timeout).</li> <li>{@code address}: For servers with more than one IP address, this attribute specifies which address will be used for listening on the specified port. By default, this port will be used on all IP addresses associated with the server. A value of 127.0.0.1 indicates that the Connector will only listen on the loopback interface.</li> </ul> <p> See the Apache Tomcat documentation for a full list.
# cas.server.tomcat.ajp.attributes: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Set to true if you want calls to {@code request.getRemoteHost()} to perform DNS lookups in order to return the actual host name of the remote client. Set to false to skip the DNS lookup and return the IP address in String form instead (thereby improving performance). By default, DNS lookups are disabled.
# cas.server.tomcat.ajp.enable-lookups: false

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Enable AJP support in CAS for the embedded Apache Tomcat container.
# cas.server.tomcat.ajp.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# The maximum size in bytes of the POST which will be handled by the container FORM URL parameter parsing. The feature can be disabled by setting this attribute to a value less than or equal to 0. If not specified, this attribute is set to 2097152 (2 megabytes).
# cas.server.tomcat.ajp.max-post-size: 20971520

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# The TCP port number on which this Connector will create a server socket and await incoming connections. Your operating system will allow only one server application to listen to a particular port number on a particular IP address. If the special value of 0 (zero) is used, then Tomcat will select a free port at random to use for this connector. This is typically only useful in embedded and testing applications.
# cas.server.tomcat.ajp.port: 8009

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Sets the protocol to handle incoming traffic.
# cas.server.tomcat.ajp.protocol: AJP/1.3

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# If this Connector is being used in a proxy configuration, configure this attribute to specify the server port to be returned for calls to request.getServerPort().
# cas.server.tomcat.ajp.proxy-port: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# If this Connector is supporting non-SSL requests, and a request is received for which a matching {@code security-constraint} requires SSL transport, Catalina will automatically redirect the request to the port number specified here.
# cas.server.tomcat.ajp.redirect-port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Set this attribute to the name of the protocol you wish to have returned by calls to {@code request.getScheme()}. For example, you would set this attribute to {@code https} for an SSL Connector.
# cas.server.tomcat.ajp.scheme: http

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Set the secret that must be included with every request.
# cas.server.tomcat.ajp.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatAjpProperties
# Module: cas-server-webapp-tomcat
# Set this attribute to true if you wish to have calls to request.isSecure() to return true for requests received by this Connector (you would want this on an SSL Connector). The default value is false.
# cas.server.tomcat.ajp.secure: false

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# Enable APR mode.
# cas.server.tomcat.apr.enabled: false

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL CA certificate file.
# cas.server.tomcat.apr.ssl-ca-certificate-file: 

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL CA revocation file.
# cas.server.tomcat.apr.ssl-ca-revocation-file: 

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL certificate chain file.
# cas.server.tomcat.apr.ssl-certificate-chain-file: 

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL certificate file.
# cas.server.tomcat.apr.ssl-certificate-file: 

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL certificate key file.
# cas.server.tomcat.apr.ssl-certificate-key-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL cipher suite.
# cas.server.tomcat.apr.ssl-cipher-suite: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# Disable SSL compression.
# cas.server.tomcat.apr.ssl-disable-compression: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# Honor SSL cipher order.
# cas.server.tomcat.apr.ssl-honor-cipher-order: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# Name of the file that contains the concatenated certificates for the trusted certificate authorities. The format is PEM-encoded.
# cas.server.tomcat.apr.ssl-host-config.ca-certificate-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# Set to required if you want the SSL stack to require a valid certificate chain from the client before accepting a connection. Set to optional if you want the SSL stack to request a client Certificate, but not fail if one isn't presented. Set to optionalNoCA if you want client certificates to be optional and you don't want Tomcat to check them against the list of trusted CAs. If the TLS provider doesn't support this option (OpenSSL does, JSSE does not) it is treated as if optional was specified. A none value (which is the default) will not require a certificate chain unless the client requests a resource protected by a security constraint that uses CLIENT-CERT authentication.
# cas.server.tomcat.apr.ssl-host-config.certificate-verification: require

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# The maximum number of intermediate certificates that will be allowed when validating client certificates. If not specified, the default value of 10 will be used.
# cas.server.tomcat.apr.ssl-host-config.certificate-verification-depth: 10

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# List of certificates managed by the ssl host config.
# cas.server.tomcat.apr.ssl-host-config.certificates: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties
# Module: cas-server-webapp-tomcat
# Name of the file that contains the certificate chain associated with the
server certificate used. The format is PEM-encoded.
The certificate chain used for Tomcat should not include the server certificate as its first element.
Note that when using more than one certificate for different types, they all must use the same certificate chain.
# cas.server.tomcat.apr.ssl-host-config.certificates[].certificate-chain-file: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties
# Module: cas-server-webapp-tomcat
# Name of the file that contains the server certificate. The format is PEM-encoded.
In addition to the certificate, the file can also contain as optional elements DH
parameters and/or an EC curve name for ephemeral keys, as generated by openssl
dhparam and openssl ecparam, respectively. The output of the respective OpenSSL
command can be concatenated to the certificate file.
# cas.server.tomcat.apr.ssl-host-config.certificates[].certificate-file: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties
# Module: cas-server-webapp-tomcat
# Name of the file that contains the server private key. The format is PEM-encoded.
The default value is the value of certificateFile and in this case both
certificate and private key have to be in this file (NOT RECOMMENDED).
# cas.server.tomcat.apr.ssl-host-config.certificates[].certificate-key-file: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties
# Module: cas-server-webapp-tomcat
# The password used to access the private key associated with the
server certificate from the specified file.
# cas.server.tomcat.apr.ssl-host-config.certificates[].certificate-key-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigCertificateProperties
# Module: cas-server-webapp-tomcat
# The type of certificate. This is used to identify the ciphers that are compatible
with the certificate. It must be one of UNDEFINED, RSA, DSS or EC. If only one
Certificate is nested within a SSLHostConfig then this attribute is not required
and will default to UNDEFINED. If multiple Certificates are nested within a
SSLHostConfig then this attribute is required and each Certificate must have a unique type.
# cas.server.tomcat.apr.ssl-host-config.certificates[].type: UNDEFINED

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# Enable this host config.
# cas.server.tomcat.apr.ssl-host-config.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# The name of the SSL Host. This should either be the fully qualified domain name (e.g. tomcat.apache.org) or a wild card domain name (e.g. *.apache.org). If not specified, the default value of _default_ will be used.
# cas.server.tomcat.apr.ssl-host-config.host-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# OpenSSL only. Configures if insecure renegotiation is allowed. The default is false. If the OpenSSL version used does not support configuring if insecure renegotiation is allowed then the default for that OpenSSL version will be used.
# cas.server.tomcat.apr.ssl-host-config.insecure-renegotiation: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# The names of the protocols to support when communicating with clients. This should be a list of any combination of the following: <ul> <li>SSLv2Hello</li> <li>SSLv3</li> <li>TLSv1</li> <li>TLSv1.1</li> <li>TLSv1.2</li> <li>TLSv1.3</li> <li>all</li> </ul> Each token in the list can be prefixed with a plus sign ("+") or a minus sign ("-"). A plus sign adds the protocol, a minus sign removes it form the current list. The list is built starting from an empty list. The token all is an alias for SSLv2Hello,TLSv1,TLSv1.1,TLSv1.2,TLSv1.3. Note that TLSv1.3 is only supported for JSSE when using a JVM that implements TLSv1.3. Note that SSLv2Hello will be ignored for OpenSSL based secure connectors. If more than one protocol is specified for an OpenSSL based secure connector it will always support SSLv2Hello. If a single protocol is specified it will not support SSLv2Hello. Note that SSLv2 and SSLv3 are inherently unsafe. If not specified, the default value of all will be used.
# cas.server.tomcat.apr.ssl-host-config.protocols: all

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# Should the JSSE provider enable certificate revocation checks? This attribute is intended to enable revocation checks that have been configured for the current JSSE provider via other means. If not specified, a default of false is used.
# cas.server.tomcat.apr.ssl-host-config.revocation-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheSslHostConfigProperties
# Module: cas-server-webapp-tomcat
# The SSL protocol(s) to use (a single value may enable multiple protocols - see the JVM documentation for details). If not specified, the default is TLS. The permitted values may be obtained from the JVM documentation for the allowed values for algorithm when creating an SSLContext instance
# cas.server.tomcat.apr.ssl-host-config.ssl-protocol: TLS

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL password (if a cert is encrypted, and no password has been provided, a callback will ask for a password).
# cas.server.tomcat.apr.ssl-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL verify client.
# cas.server.tomcat.apr.ssl-protocol: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL verify client.
# cas.server.tomcat.apr.ssl-verify-client: require

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatApachePortableRuntimeProperties
# Module: cas-server-webapp-tomcat
# SSL verify depth.
# cas.server.tomcat.apr.ssl-verify-depth: 10

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatBasicAuthenticationProperties
# Module: cas-server-webapp-tomcat
# Add an authorization role, which is a role name that will be permitted access to the resources protected by this security constraint.
# cas.server.tomcat.basic-authn.auth-roles: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatBasicAuthenticationProperties
# Module: cas-server-webapp-tomcat
# Enable Basic authentication for Tomcat.
# cas.server.tomcat.basic-authn.enabled: false

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatBasicAuthenticationProperties
# Module: cas-server-webapp-tomcat
# Add a URL pattern to be part of this web resource collection.
# cas.server.tomcat.basic-authn.patterns: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatBasicAuthenticationProperties
# Module: cas-server-webapp-tomcat
# Security roles for the CAS application.
# cas.server.tomcat.basic-authn.security-roles: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# This option is used to set the flag that all messages sent through the SimpleTcpCluster uses. The flag decides how the messages are sent, and is a simple logical OR. <ul> <li>2: {@code SEND_OPTIONS_SYNCHRONIZED_ACK}</li> <li>4: {@code SEND_OPTIONS_USE_ACK}</li> <li>8: {@code SEND_OPTIONS_ASYNCHRONOUS}</li> </ul>
# cas.server.tomcat.clustering.channel-send-options: 8

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Cloud membership provider, values are case sensitive and only used with clusteringType {@code CLOUD}. The different providers rely on environment variables to discover other members of cluster via DNS lookups of the service name or querying kubernetes API. See code or Tomcat documentation for the environment variables that are used. <ul> <li> {@code kubernetes} will use org.apache.catalina.tribes.KubernetesMembershipProvider</li> <li> {@code dns} will use org.apache.catalina.tribes.DNSMembershipProvider</li> <li> Class implementing {@code org.apache.catalina.tribes.MembershipProvider}</li> </ul>
# cas.server.tomcat.clustering.cloud-membership-provider: dns

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Statically register members in the cluster. The syntax is: {@code address:port:index}
# cas.server.tomcat.clustering.cluster-members: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Accepted values are: {@code DEFAULT, CLOUD}. Type of clustering to use, set to {@code CLOUD} if using {@code CloudMembershipService}.
# cas.server.tomcat.clustering.clustering-type: DEFAULT

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Enable tomcat session clustering.
# cas.server.tomcat.clustering.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# When a web application is being shutdown, Tomcat issues an expire call to each session to notify all the listeners. If you wish for all sessions to expire on all nodes when a shutdown occurs on one node, set this value to true. Default value is false.
# cas.server.tomcat.clustering.expire-sessions-on-shutdown: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Accepted values are: {@code DELTA, BACKUP}. Enable all-to-all session replication using the DeltaManager to replicate session deltas. By all-to-all we mean that the session gets replicated to all the other nodes in the cluster. This works great for smaller cluster but we don't recommend it for larger clusters(a lot of Tomcat nodes). Also when using the delta manager it will replicate to all nodes, even nodes that don't have the application deployed. To get around this problem, you'll want to use the BackupManager. This manager only replicates the session data to one backup node, and only to nodes that have the application deployed. Downside of the BackupManager: not quite as battle tested as the delta manager.
# cas.server.tomcat.clustering.manager-type: DELTA

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Multicast address for membership. The multicast address that the membership will broadcast its presence and listen for other heartbeats on. The default value is 228.0.0.4 Make sure your network is enabled for multicast traffic. The multicast address, in conjunction with the port is what creates a cluster group. To divide up your farm into several different group, or to split up QA from production, change the port or the address
# cas.server.tomcat.clustering.membership-address: 228.0.0.4

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# The membership component will time out members and notify the Channel if a member fails to send a heartbeat within a give time. The default value is 3000 ms. This means, that if a heartbeat is not received from a member in that timeframe, the membership component will notify the cluster of this. On a high latency network you may wish to increase this value, to protect against false positives. Apache Tribes also provides a TcpFailureDetector that will verify a timeout using a TCP connection when a heartbeat timeout has occurred. This protects against false positives.
# cas.server.tomcat.clustering.membership-drop-time: 3000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# The frequency in milliseconds in which heartbeats are sent out. The default value is 500 ms. In most cases the default value is sufficient. Changing this value, changes the interval in between heartbeats.
# cas.server.tomcat.clustering.membership-frequency: 500

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Membership uses multicast, it will call java.net.MulticastSocket.setLoopbackMode(localLoopbackDisabled). When localLoopbackDisabled==true multicast messages will not reach other nodes on the same local machine. The default is false.
# cas.server.tomcat.clustering.membership-local-loopback-disabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Multicast port (the port and the address together determine cluster membership. The multicast port, the default value is 45564 The multicast port, in conjunction with the address is what creates a cluster group. To divide up your farm into several different group, or to split up QA from production, change the port or the address
# cas.server.tomcat.clustering.membership-port: 45564

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Membership uses multicast, it will call java.net.MulticastSocket.setLoopbackMode(localLoopbackDisabled). When localLoopbackDisabled==true multicast messages will not reach other nodes on the same local machine. The default is false.
# cas.server.tomcat.clustering.membership-recovery-counter: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# In case of a network failure, Java multicast socket don't transparently fail over, instead the socket will continuously throw {@code IOException} upon each receive request. When recovery-enabled is set to true, this will close the multicast socket and open a new socket with the same properties as defined above. The default is true.
# cas.server.tomcat.clustering.membership-recovery-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# The address (network interface) to listen for incoming traffic.
# cas.server.tomcat.clustering.receiver-address: auto

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Default value is 100. Use this value if you wish to automatically avoid port conflicts the cluster receiver will try to open a server socket on the port attribute port, and then work up autoBind number of times.
# cas.server.tomcat.clustering.receiver-auto-bind: 100

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Maximum threads configured for the listener. The maximum number of threads in the receiver thread pool. The default value is 6 Adjust this value relative to the number of nodes in the cluster, the number of messages being exchanged and the hardware you are running on. A higher value doesn't mean more efficiency, tune this value according to your own test results.
# cas.server.tomcat.clustering.receiver-max-threads: 6

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# The listen port for incoming data. The default value is {@code 4000}. To avoid port conflicts the receiver will automatically bind to a free port. So for example, if port is {@code 4000}, and autoBind is set to 10, then the receiver will open up a server socket on the first available port in the range 4000-4009.
# cas.server.tomcat.clustering.receiver-port: 4000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatClusteringProperties
# Module: cas-server-webapp-tomcat
# Listener timeout. The value in milliseconds for the polling timeout in the NioReceiver. On older versions of the JDK there have been bugs, that should all now be cleared out where the selector never woke up. The default value is a very high 5000 milliseconds.
# cas.server.tomcat.clustering.receiver-timeout: 5000

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatCsrfProperties
# Module: cas-server-webapp-tomcat
# Enable filter.
# cas.server.tomcat.csrf.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatExtendedAccessLogProperties
# Module: cas-server-webapp-tomcat
# Directory name for extended log.
# cas.server.tomcat.ext-access-log.directory: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatExtendedAccessLogProperties
# Module: cas-server-webapp-tomcat
# Flag to indicate whether extended log facility is enabled.
# cas.server.tomcat.ext-access-log.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatExtendedAccessLogProperties
# Module: cas-server-webapp-tomcat
# String representing extended log pattern.
# cas.server.tomcat.ext-access-log.pattern: c-ip s-ip cs-uri sc-status time x-threadname x-H(secure) x-H(remoteUser)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatExtendedAccessLogProperties
# Module: cas-server-webapp-tomcat
# File name prefix for extended log.
# cas.server.tomcat.ext-access-log.prefix: localhost_access_extended

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatExtendedAccessLogProperties
# Module: cas-server-webapp-tomcat
# File name suffix for extended log.
# cas.server.tomcat.ext-access-log.suffix: .log

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Custom attributes to set on the proxy connector.
# cas.server.tomcat.http-proxy.attributes: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Enable the container running in proxy mode.
# cas.server.tomcat.http-proxy.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Proxy protocol to use.
# cas.server.tomcat.http-proxy.protocol: AJP/1.3

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Proxy port for the proxy.
# cas.server.tomcat.http-proxy.proxy-port: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Redirect port for the proxy.
# cas.server.tomcat.http-proxy.redirect-port: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Scheme used for the proxy.
# cas.server.tomcat.http-proxy.scheme: https

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Set the secret that must be included with every request.
# cas.server.tomcat.http-proxy.secret: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProxyProperties
# Module: cas-server-webapp-tomcat
# Whether proxy should run in secure mode.
# cas.server.tomcat.http-proxy.secure: true

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProperties
# Module: cas-server-webapp-tomcat
# Additional attributes to be set on the connector.
# cas.server.tomcat.http.attributes: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProperties
# Module: cas-server-webapp-tomcat
# Enable a separate port for the embedded container for HTTP access.
# cas.server.tomcat.http.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProperties
# Module: cas-server-webapp-tomcat
# The HTTP port to use.
# cas.server.tomcat.http.port: 8080

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatHttpProperties
# Module: cas-server-webapp-tomcat
# HTTP protocol to use.
# cas.server.tomcat.http.protocol: org.apache.coyote.http11.Http11NioProtocol

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatRemoteAddressProperties
# Module: cas-server-webapp-tomcat
# A regular expression (using java.util.regex) that the remote client's IP address is compared to. If this attribute is specified, the remote address MUST match for this request to be accepted. If this attribute is not specified, all requests will be accepted UNLESS the remote address matches a deny pattern.
# cas.server.tomcat.remote-addr.allowed-client-ip-address-regex: .+

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatRemoteAddressProperties
# Module: cas-server-webapp-tomcat
# A regular expression (using java.util.regex) that the remote client's IP address is compared to. If this attribute is specified, the remote address MUST NOT match for this request to be accepted. If this attribute is not specified, request acceptance is governed solely by the accept attribute.
# cas.server.tomcat.remote-addr.denied-client-ip-address-regex: .+

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatRemoteAddressProperties
# Module: cas-server-webapp-tomcat
# Enable filter.
# cas.server.tomcat.remote-addr.enabled: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatRewriteValveProperties
# Module: cas-server-webapp-tomcat
# Location of a rewrite valve specifically by Apache Tomcat to activate URL rewriting.
# cas.server.tomcat.rewrite-valve.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatProperties
# Module: cas-server-webapp-tomcat
# Controls the {@code server} attribute of the tomcat connector.
# cas.server.tomcat.server-name: Apereo CAS

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# Each connection that is opened up in Tomcat get associated with a read ByteBuffer. This attribute controls the size of this buffer. By default this read buffer is sized at 8192 bytes. For lower concurrency, you can increase this to buffer more data. For an extreme amount of keep alive connections, decrease this number or increase your heap size.
# cas.server.tomcat.socket.app-read-buf-size: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# Each connection that is opened up in Tomcat get associated with a write ByteBuffer. This attribute controls the size of this buffer. By default this write buffer is sized at 8192 bytes. For low concurrency you can increase this to buffer more response data. For an extreme amount of keep alive connections, decrease this number or increase your heap size. The default value here is pretty low, you should up it if you are not dealing with tens of thousands concurrent connections.
# cas.server.tomcat.socket.app-write-buf-size: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# The NIO connector uses a class called NioChannel that holds elements linked to a socket. To reduce garbage collection, the NIO connector caches these channel objects. This value specifies the size of this cache. The default value is 500, and represents that the cache will hold 500 NioChannel objects. Other values are -1 for unlimited cache and 0 for no cache.
# cas.server.tomcat.socket.buffer-pool: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# An int expressing the relative importance of high bandwidth. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are compared, with larger values indicating stronger preferences. Negative values disable the setting. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2).
# cas.server.tomcat.socket.performance-bandwidth: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# An int expressing the relative importance of a short connection time. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are  compared, with larger values indicating stronger preferences. Negative values disable the setting. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2).
# cas.server.tomcat.socket.performance-connection-time: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSocketProperties
# Module: cas-server-webapp-tomcat
# An int expressing the relative importance of low latency. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are compared, with larger values indicating stronger preferences. Negative values disable the setting. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2).
# cas.server.tomcat.socket.performance-latency: -1

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSslValveProperties
# Module: cas-server-webapp-tomcat
# Enable the SSL valve for apache tomcat.
# cas.server.tomcat.ssl-valve.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSslValveProperties
# Module: cas-server-webapp-tomcat
# Allows setting a custom name for the ssl_cipher header. If not specified, the default of ssl_cipher is used.
# cas.server.tomcat.ssl-valve.ssl-cipher-header: ssl_cipher

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSslValveProperties
# Module: cas-server-webapp-tomcat
# Allows setting a custom name for the ssl_cipher_usekeysize header. If not specified, the default of ssl_cipher_usekeysize is used.
# cas.server.tomcat.ssl-valve.ssl-cipher-user-key-size-header: ssl_cipher_usekeysize

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSslValveProperties
# Module: cas-server-webapp-tomcat
# Allows setting a custom name for the ssl_client_cert header. If not specified, the default of ssl_client_cert is used.
# cas.server.tomcat.ssl-valve.ssl-client-cert-header: ssl_client_cert

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.tomcat.CasEmbeddedApacheTomcatSslValveProperties
# Module: cas-server-webapp-tomcat
# Allows setting a custom name for the ssl_session_id header. If not specified, the default of ssl_session_id is used.
# cas.server.tomcat.ssl-valve.ssl-session-id-header: ssl_session_id

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Client execution timeout.
# cas.service-registry.amazon-s3.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Connection timeout.
# cas.service-registry.amazon-s3.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Use access-key provided by AWS to authenticate.
# cas.service-registry.amazon-s3.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Use secret key provided by AWS to authenticate.
# cas.service-registry.amazon-s3.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# AWS custom endpoint.
# cas.service-registry.amazon-s3.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Local address.
# cas.service-registry.amazon-s3.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Maximum connections setting.
# cas.service-registry.amazon-s3.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Profile name to use.
# cas.service-registry.amazon-s3.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Profile path.
# cas.service-registry.amazon-s3.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Optionally specifies the proxy host to connect through.
# cas.service-registry.amazon-s3.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Optionally specifies the proxy password to connect through.
# cas.service-registry.amazon-s3.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Optionally specifies the proxy username to connect through.
# cas.service-registry.amazon-s3.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# AWS region used.
# cas.service-registry.amazon-s3.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.service-registry.amazon-s3.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Socket timeout.
# cas.service-registry.amazon-s3.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.aws.AmazonS3ServiceRegistryProperties
# Module: cas-server-support-aws-s3-service-registry
# Flag that indicates whether to use reaper.
# cas.service-registry.amazon-s3.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.services.ServiceRegistryCacheProperties
# Module: cas-server-core-services
# Services cache size specifies the maximum number of entries the cache may contain.
# cas.service-registry.cache.cache-size: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.services.ServiceRegistryCacheProperties
# Module: cas-server-core-services
# Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.
# cas.service-registry.cache.duration: PT15M

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.services.ServiceRegistryCacheProperties
# Module: cas-server-core-services
# Services cache capacity sets the minimum total size for the internal data structures.
# cas.service-registry.cache.initial-capacity: 2000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Query option consistency level. The consistency level set through this method will be use for queries that don't explicitly have a consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.service-registry.cassandra.consistency-level: LOCAL_QUORUM

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# The list of contact points to use for the new cluster.
# cas.service-registry.cassandra.contact-points: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Keyspace address to use where the cluster would connect.
# cas.service-registry.cassandra.keyspace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Used by a DC-ware round-robin load balancing policy. This policy provides round-robin queries over the node of the local data center. It also includes in the query plans returned a configurable number of hosts in the remote data centers, but those are always tried after the local nodes. In other words, this policy guarantees that no host in a remote data center will be queried unless no host in the local data center can be reached.
# cas.service-registry.cassandra.local-dc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Password to bind and establish a connection to cassandra.
# cas.service-registry.cassandra.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Query option serial consistency level. The serial consistency level set through this method will be use for queries that don't explicitly have a serial consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.service-registry.cassandra.serial-consistency-level: LOCAL_SERIAL

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# The request timeout. This defines how long the driver will wait for a given Cassandra node to answer a query.
# cas.service-registry.cassandra.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.serviceregistry.CassandraServiceRegistryProperties
# Module: cas-server-support-cassandra-service-registry
# Username to bind and establish a connection to cassandra.
# cas.service-registry.cassandra.username: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.service-registry.config.location: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed, use cas.service-registry.json.location instead.
# Deprecation Replacement: cas.service-registry.json.location

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.services.ServiceRegistryCoreProperties
# Module: cas-server-core-services
# Flag that indicates whether to initialise active service registry implementation with a default set of service definitions included with CAS by default in JSON format. The initialization generally tends to find JSON service definitions from {@link org.apereo.cas.configuration.model.support.services.json.JsonServiceRegistryProperties#getLocation()}.
# cas.service-registry.core.init-from-json: false

# Required: false
# Type: org.apereo.cas.configuration.model.core.services.ServiceRegistryCoreProperties$ServiceManagementTypes
# Owner: org.apereo.cas.configuration.model.core.services.ServiceRegistryCoreProperties
# Module: cas-server-core-services
# Determine how services are internally managed, queried, cached and reloaded by CAS. Accepted values are the following: <ul> <li>DEFAULT: Keep all services inside a concurrent map.</li> <li>DOMAIN: Group registered services by their domain having been explicitly defined.</li> </ul>
Available values are as follows:
<ul><li>{@code DOMAIN}: Group service definitions by their domain.</li><li>{@code DEFAULT}: Default option to keep definitions in a map as they arrive.</li></ul>
# cas.service-registry.core.management-type: DEFAULT

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Whether telemetry should be enabled by default.
# cas.service-registry.cosmos-db.allow-telemetry: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Collection to store CAS service definitions.
# cas.service-registry.cosmos-db.collection: CasCosmosDbServiceRegistry

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Document Db consistency level. Azure Cosmos DB is designed from the ground up with global distribution in mind for every data model. It is designed to offer predictable low latency guarantees, a 99.99% availability SLA, and multiple well-defined relaxed consistency models. Currently, Azure Cosmos DB provides five consistency levels: strong, bounded-staleness, session, consistent prefix, and eventual. Besides strong and eventual consistency models commonly offered by distributed databases, Azure Cosmos DB offers three more carefully codified and operationalized consistency models, and has validated their usefulness against real world use cases. These are the bounded staleness, session, and consistent prefix consistency levels. Collectively these five consistency levels enable you to make well-reasoned trade-offs between consistency, availability, and latency. Accepted values are: <ul> <li>{@code Strong}: Linearizability</li> <li>{@code Session}: Consistent Prefix. Monotonic reads, monotonic writes, read-your-writes, write-follows-reads</li> <li>{@code Eventual}: Out of order reads</li> <li>{@code BoundedStaleness}: Consistent Prefix. Reads lag behind writes by k prefixes or t interval</li> <li>{@code ConsistentPrefix}: Updates returned are some prefix of all the updates, with no gaps</li> </ul>
# cas.service-registry.cosmos-db.consistency-level: Session

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Database name.
# cas.service-registry.cosmos-db.database: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Whether collections should be dropped on startup and re-created.
# cas.service-registry.cosmos-db.drop-collection: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Specifies the supported indexing modes in the Azure Cosmos DB database service. Accepted values are: <ul> <li>{@code Consistent}: Index is updated synchronously with a create or update operation. With consistent indexing, query behavior is the same as the default consistency level for the collection. The index is always kept up to date with the data.</li> <li>{@code Lazy}: Index is updated asynchronously with respect to a create or update operation. With lazy indexing, queries are eventually consistent. The index is updated when the collection is idle. </li> <li>{@code None}: No index is provided. Setting IndexingMode to "None" drops the index. Use this if you don't want to maintain the index for a document collection, to save the storage cost or improve the write throughput. Your queries will degenerate to scans of the entire collection. </li> </ul>
# cas.service-registry.cosmos-db.indexing-mode: None

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Document Db master key.
# cas.service-registry.cosmos-db.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Database throughput usually between 400 or 100,000.
# cas.service-registry.cosmos-db.throughput: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cosmosdb.CosmosDbServiceRegistryProperties
# Module: cas-server-support-cosmosdb-service-registry
# Document Db host address (i.e. https://localhost:8081).
# cas.service-registry.cosmos-db.uri: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Use a local cache to reduce fetches..
# cas.service-registry.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Remove idle connections from pool.
# cas.service-registry.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# TCP connection timeout.
# cas.service-registry.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Create the database if it doesn't exist.
# cas.service-registry.couch-db.create-if-not-exists: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Database name.
# cas.service-registry.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Use TLS. Only needed if not specified by URL.
# cas.service-registry.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Max entries in local cache.
# cas.service-registry.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Maximum connections to CouchDB.
# cas.service-registry.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Largest allowable serialized object.
# cas.service-registry.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Password for connection.
# cas.service-registry.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Proxy host.
# cas.service-registry.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# proxy port.
# cas.service-registry.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Relax TLS settingsâ€“like certificate verification.
# cas.service-registry.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Retries for update conflicts.
# cas.service-registry.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Socket idle timeout.
# cas.service-registry.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Connection url.
# cas.service-registry.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Expect HTTP 100 Continue during connection.
# cas.service-registry.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.serviceregistry.CouchDbServiceRegistryProperties
# Module: cas-server-support-couchdb-service-registry
# Username for connection.
# cas.service-registry.couch-db.username: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Node addresses.
# cas.service-registry.couchbase.addresses: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Bucket name.
# cas.service-registry.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Cluster password.
# cas.service-registry.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Cluster username.
# cas.service-registry.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of connection timeout.
# cas.service-registry.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of idle connection timeout.
# cas.service-registry.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of KV timeout.
# cas.service-registry.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Maximum number of connections made to the cluster.
# cas.service-registry.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.service-registry.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Maximum number of parallel threads made for queries.
# cas.service-registry.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of query threshold.
# cas.service-registry.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of query timeout.
# cas.service-registry.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.service-registry.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of scan timeout.
# cas.service-registry.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of search timeout.
# cas.service-registry.couchbase.search-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.serviceregistry.CouchbaseServiceRegistryProperties
# Module: cas-server-support-couchbase-service-registry
# String representation of view timeout.
# cas.service-registry.couchbase.view-timeout: PT30S

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.service-registry.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Client execution timeout.
# cas.service-registry.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Connection timeout.
# cas.service-registry.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Use access-key provided by AWS to authenticate.
# cas.service-registry.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Use secret key provided by AWS to authenticate.
# cas.service-registry.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to drop tables on start up.
# cas.service-registry.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# AWS custom endpoint.
# cas.service-registry.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Local address.
# cas.service-registry.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.service-registry.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Maximum connections setting.
# cas.service-registry.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to prevent CAS from creating tables.
# cas.service-registry.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Profile name to use.
# cas.service-registry.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Profile path.
# cas.service-registry.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy host to connect through.
# cas.service-registry.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy password to connect through.
# cas.service-registry.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Optionally specifies the proxy username to connect through.
# cas.service-registry.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Read capacity.
# cas.service-registry.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# AWS region used.
# cas.service-registry.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.service-registry.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Socket timeout.
# cas.service-registry.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# The table name used and created by CAS to hold service definitions in DynamoDb.
# cas.service-registry.dynamo-db.table-name: DynamoDbCasServices

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Time offset.
# cas.service-registry.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Flag that indicates whether to use reaper.
# cas.service-registry.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbServiceRegistryProperties
# Module: cas-server-support-dynamodb-service-registry
# Write capacity.
# cas.service-registry.dynamo-db.write-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# The branch to checkout and activate, defaults to {@code master}.
# cas.service-registry.git.active-branch: master

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# If the repository is to be cloned, this will allow a select list of branches to be fetched. List the branch names separated by commas or use {@code *} to clone all branches. Defaults to all branches.
# cas.service-registry.git.branches-to-clone: *

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# When establishing an ssh session, determine if default identities loaded on the machine should be excluded/removed and identity should only be limited to those loaded from given keys.
# cas.service-registry.git.clear-existing-identities: false

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.service-registry.git.clone-directory.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Determine whether service definitions in the git repository should be located/stored in groups and separate folder structures based on the service type. @see #getRootDirectory()
# cas.service-registry.git.group-by-type: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.git.services.BaseGitProperties$HttpClientTypes
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Implementation of HTTP client to use when doing git operations via http/https. The jgit library sets the connection factory statically (globally) so this property should be set to the same value for all git repositories (services, saml, etc). Not doing so might result in one connection factory being used for clone and another for subsequent fetches.
Available values are as follows:
<ul><li>{@code JDK}: Built-in JDK http/https client.</li><li>{@code HTTP_CLIENT}: Apache HTTP Client http/https client.</li></ul>
# cas.service-registry.git.http-client-type: JDK

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Password used to access or push to the repository.
# cas.service-registry.git.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Password for the SSH private key.
# cas.service-registry.git.private-key-passphrase: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.service-registry.git.private-key-path: 
# Deprecation Level: ERROR
# Deprecation Reason: Type changed from File to Resource, but still needs to resolve to File.
# Deprecation Replacement: cas.service-registry.git.private-key.location

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.SpringResourceProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.service-registry.git.private-key.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Decide whether changes should be pushed back into the remote repository.
# cas.service-registry.git.push-changes: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# The address of the git repository. Could be a URL or a file-system path.
# cas.service-registry.git.repository-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Root directory in the git repository structure to track service definition files. This might be most useful if the git repository is tasked with other types of files and configurations and allowing a separate root directory for service definitions provide a clean separation between services files and everything else. This setting may work in concert with {@link #isGroupByType()}. If left blank, the root folder of the git repository itself is used as the root directory for service definitions.
# cas.service-registry.git.root-directory: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Whether or not commits should be signed.
# cas.service-registry.git.sign-commits: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# As with using SSH with public keys, an SSH session with {@code ssh://user@example.com/repo.git} must be specified to use password-secured SSH connections.
# cas.service-registry.git.ssh-session-password: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Whether on not to turn on strict host key checking. true will be "yes", false will be "no", "ask" not supported.
# cas.service-registry.git.strict-host-key-checking: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Timeout for git operations such as push and pull in seconds.
# cas.service-registry.git.timeout: PT10S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.git.services.GitServiceRegistryProperties
# Module: cas-server-support-git-service-registry
# Username used to access or push to the repository.
# cas.service-registry.git.username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.service-registry.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.service-registry.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.service-registry.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.service-registry.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.service-registry.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.service-registry.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.service-registry.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The JDBC driver used to connect to the database.
# cas.service-registry.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.service-registry.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Used to specify number of rows to be fetched in a select query.
# cas.service-registry.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Allow hibernate to generate query statistics.
# cas.service-registry.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The SQL query to be executed to test the validity of connections.
# cas.service-registry.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.service-registry.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.service-registry.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.service-registry.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.service-registry.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The database connection password.
# cas.service-registry.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.service-registry.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.service-registry.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.service-registry.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.service-registry.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.service-registry.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.service-registry.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.service-registry.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.service-registry.jpa.properties: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The database connection URL.
# cas.service-registry.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.serviceregistry.JpaServiceRegistryProperties
# Module: cas-server-support-jpa-service-registry
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.service-registry.jpa.user: sa

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.services.json.JsonServiceRegistryProperties
# Module: cas-server-support-json-service-registry
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.service-registry.json.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.services.json.JsonServiceRegistryProperties
# Module: cas-server-support-json-service-registry
# Flag indicating whether a background watcher thread is enabled for the purposes of live reloading of service registry data changes from persistent data store.
# cas.service-registry.json.watcher-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether search/query results are allowed to match on multiple DNs, or whether a single unique DN is expected for the result.
# cas.service-registry.ldap.allow-multiple-dns: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Set if multiple Entries are allowed.
# cas.service-registry.ldap.allow-multiple-entries: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Base DN to use. There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than duplicating the LDAP configuration block for each individual base-dn, each entry can be specified and joined together using a special delimiter character. The user DN is retrieved using the combination of all base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the first DN found is returned. Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.
# cas.service-registry.ldap.base-dn: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Indicate the collection of attributes that are to be tagged and processed as binary attributes by the underlying search resolver.
# cas.service-registry.ldap.binary-attributes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The bind credential to use when connecting to LDAP.
# cas.service-registry.ldap.bind-credential: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The bind DN to use when connecting to LDAP. LDAP connection configuration injected into the LDAP connection pool can be initialized with the following parameters: <ul> <li>{@code bindDn/bindCredential} provided - Use the provided credentials to bind when initializing connections.</li> <li>{@code bindDn/bindCredential}  set to {@code *} - Use a fast-bind strategy to initialize the pool.</li> <li>{@code bindDn/bindCredential}  set to blank - Skip connection initializing; perform operations anonymously. </li> <li>SASL mechanism provided - Use the given SASL mechanism to bind when initializing connections. </li> </ul>
# cas.service-registry.ldap.bind-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The length of time the pool will block. By default the pool will block indefinitely and there is no guarantee that waiting threads will be serviced in the order in which they made their request. This option should be used with a blocking connection pool when you need to control the exact number of connections that can be created
# cas.service-registry.ldap.block-wait-time: PT3S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Sets the maximum amount of time that connects will block.
# cas.service-registry.ldap.connect-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# If multiple URLs are provided as the ldapURL this describes how each URL will be processed. <ul> <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be used.</li> <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li> <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li> <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li> </ul>
# cas.service-registry.ldap.connection-strategy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether to use a pooled connection factory in components.
# cas.service-registry.ldap.disable-pooling: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Attempt to populate the connection pool early on startup and fail quickly if something goes wrong.
# cas.service-registry.ldap.fail-fast: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Set if search referrals should be followed.
# cas.service-registry.ldap.follow-referrals: true

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties$LdapHostnameVerifierOptions
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Hostname verification options.
Available values are as follows:
<ul><li>{@code DEFAULT}: Default option, forcing verification.</li><li>{@code ANY}: Skip hostname verification and allow all.</li></ul>
# cas.service-registry.ldap.hostname-verifier: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# ID attribute used for the registered service entry in LDAP to keep track of the service numeric identifier.
# cas.service-registry.ldap.id-attribute: uid

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Removes connections from the pool based on how long they have been idle in the available queue. Prunes connections that have been idle for more than the indicated amount.
# cas.service-registry.ldap.idle-time: PT10M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Path to the keystore used for SSL connections. Typically contains SSL certificates for the LDAP server.
# cas.service-registry.ldap.keystore: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Keystore password.
# cas.service-registry.ldap.keystore-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The type of keystore. {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.service-registry.ldap.keystore-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The LDAP url to the server. More than one may be specified, separated by space and/or comma.
# cas.service-registry.ldap.ldap-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The load filter used to load entries by the {@link #objectClass}. This is typically used to load all definitions that might be mapped to a service definition. The search filter used to load entries by the {@link #idAttribute}. This is typically used to load a specific service definition by its id during search operations.
# cas.service-registry.ldap.load-filter: (objectClass&#61;%s)

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Maximum LDAP connection pool size which the pool can use to grow.
# cas.service-registry.ldap.max-pool-size: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Minimum LDAP connection pool size. Size the pool should be initialized to and pruned to
# cas.service-registry.ldap.min-pool-size: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Name of the LDAP handler.
# cas.service-registry.ldap.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Object class used for the registered service entry in LDAP.
# cas.service-registry.ldap.object-class: casRegisteredService

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Request that the server return results in batches of a specific size. See <a href="http://www.ietf.org/rfc/rfc2696.txt">RFC 2696</a>. This control is often used to work around server result size limits. A negative/zero value disables paged requests.
# cas.service-registry.ldap.page-size: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# You may receive unexpected LDAP failures, when CAS is configured to authenticate using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous binds/searches. Every second attempt with a given LDAP connection from the pool would fail if it was on the same connection as a failed login attempt, and the regular connection validator would similarly fail. When a connection is returned back to a pool, it still may contain the principal and credentials from the previous attempt. Before the next bind attempt using that connection, the validator tries to validate the connection again but fails because itâ€™s no longer trying with the configured bind credentials but with whatever user DN was used in the previous step. Given the validation failure, the connection is closed and CAS would deny access by default. Passivators attempt to reconnect to LDAP with the configured bind credentials, effectively resetting the connection to what it should be after each bind request. Furthermore if you are seeing errors in the logs that resemble a 'Operation exception encountered, reopening connection' type of message, this usually is an indication that the connection poolâ€™s validation timeout established and created by CAS is greater than the timeout configured in the LDAP server, or more likely, in the load balancer in front of the LDAP servers. You can adjust the LDAP server sessionâ€™s timeout for connections, or you can teach CAS to use a validity period that is equal or less than the LDAP server sessionâ€™s timeout. Accepted values are: <ul> <li>{@code NONE}: No passivation takes place.</li> <li>{@code BIND}: The default behavior which passivates a connection by performing a bind operation on it. This option requires the availability of bind credentials when establishing connections to LDAP.</li> </ul>
# cas.service-registry.ldap.pool-passivator: BIND

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Removes connections from the pool based on how long they have been idle in the available queue. Run the pruning process at the indicated interval.
# cas.service-registry.ldap.prune-period: PT2H

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Duration of time to wait for responses.
# cas.service-registry.ldap.response-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# SASL authorization id.
# cas.service-registry.ldap.sasl-authorization-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The SASL mechanism.
# cas.service-registry.ldap.sasl-mechanism: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# SASL mutual auth is enabled?
# cas.service-registry.ldap.sasl-mutual-auth: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# SASL quality of protected.
# cas.service-registry.ldap.sasl-quality-of-protection: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The SASL realm.
# cas.service-registry.ldap.sasl-realm: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# SASL security strength.
# cas.service-registry.ldap.sasl-security-strength: 

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties>
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Search handlers.
# cas.service-registry.ldap.search-entry-handlers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute name case change.
# cas.service-registry.ldap.search-entry-handlers[].case-change.attribute-name-case-change: 

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.service-registry.ldap.search-entry-handlers[].case-change.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute value case change.
# cas.service-registry.ldap.search-entry-handlers[].case-change.attribute-value-case-change: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.CaseChangeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn case change.
# cas.service-registry.ldap.search-entry-handlers[].case-change.dn-case-change: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Add if exists.
# cas.service-registry.ldap.search-entry-handlers[].dn-attribute.add-if-exists: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.DnAttributeSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Dn attribute name.
# cas.service-registry.ldap.search-entry-handlers[].dn-attribute.dn-attribute-name: entryDN

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Attribute names.
# cas.service-registry.ldap.search-entry-handlers[].merge-attribute.attribute-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.MergeAttributesSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attribute name.
# cas.service-registry.ldap.search-entry-handlers[].merge-attribute.merge-attribute-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Base dn.
# cas.service-registry.ldap.search-entry-handlers[].primary-group-id.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.PrimaryGroupIdSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Group filter.
# cas.service-registry.ldap.search-entry-handlers[].primary-group-id.group-filter: (&amp;(objectClass&#61;group)(objectSid&#61;{0}))

# Required: false
# Type: java.util.List<String>
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Merge attributes.
# cas.service-registry.ldap.search-entry-handlers[].recursive.merge-attributes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.RecursiveSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The Search attribute.
# cas.service-registry.ldap.search-entry-handlers[].recursive.search-attribute: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties.SearchEntryHandlerTypes
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapSearchEntryHandlersProperties
# Module: cas-server-support-ldap
# The type of search entry handler to choose.
Available values are as follows:
<ul><li>{@code ACTIVE_DIRECTORY}: Process the entry results fetched from active directory and
check for account status controls for disabled/expired accounts, etc.</li><li>{@code OBJECT_GUID}: Object guid search entry handler.
Handles the {@code objectGUID} attribute fetching and conversion.</li><li>{@code OBJECT_SID}: Object sid search entry handler.
Handles the {@code objectSid} attribute fetching and conversion.</li><li>{@code CASE_CHANGE}: Case change search entry handler.
Provides the ability to modify the case of search entry DNs, attribute names, and attribute values.</li><li>{@code DN_ATTRIBUTE_ENTRY}: DN attribute entry handler.
Adds the entry DN as an attribute to the result set. Provides
a client side implementation of RFC 5020.</li><li>{@code MERGE}: Merge search entry handler.
Merges the values of one or more attributes into a single attribute.</li><li>{@code PRIMARY_GROUP}: Primary group search handler.
Constructs the primary group SID and then searches for
that group and puts it's DN in the {@code memberOf} attribute of the original search entry.</li><li>{@code RANGE_ENTRY}: Range entry search handler.
Rewrites attributes returned from Active Directory to
include all values by performing additional searches.</li><li>{@code RECURSIVE_ENTRY}: Recursive entry search handler.
This recursively searches based on a supplied
attribute and merges those results into the original entry.</li></ul>
# cas.service-registry.ldap.search-entry-handlers[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# User filter to use for searching. Syntax is {@code cn={user}} or {@code cn={0}}.  You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy} to fully build the final filter template dynamically.
# cas.service-registry.ldap.search-filter: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Service definition attribute used for the registered service entry in LDAP to keep a representation of the service body.
# cas.service-registry.ldap.service-definition-attribute: description

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether subtree searching is allowed.
# cas.service-registry.ldap.subtree-search: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Path of the trust certificates to use for the SSL connection. Ignores keystore-related settings when activated and used.
# cas.service-registry.ldap.trust-certificates: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Trust Manager options. Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions, and for deciding whether credentials presented by a peer should be accepted. Accepted values are: * <ul> <li>{@code DEFAULT}: Enable and force the default JVM trust managers.</li> <li>{@code ANY}: Trust any client or server.</li> </ul>
# cas.service-registry.ldap.trust-manager: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Path to the keystore used to determine which certificates or certificate authorities should be trusted. Used when connecting to an LDAP server via LDAPS or startTLS connection. If left blank, the default truststore for the Java runtime is used.
# cas.service-registry.ldap.trust-store: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Password needed to open the truststore.
# cas.service-registry.ldap.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# The type of trust keystore that determines which certificates or certificate authorities are trusted. Types depend on underlying java platform, typically {@code PKCS12} or {@code JKS}. If left blank, defaults to the default keystore type indicated by the underlying Java platform.
# cas.service-registry.ldap.trust-store-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether TLS should be used and enabled when establishing the connection.
# cas.service-registry.ldap.use-start-tls: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether connections should be validated when loaned out from the pool.
# cas.service-registry.ldap.validate-on-checkout: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Period at which pool should be validated.
# cas.service-registry.ldap.validate-period: PT5M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Whether connections should be validated periodically when the pool is idle.
# cas.service-registry.ldap.validate-periodically: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.serviceregistry.LdapServiceRegistryProperties
# Module: cas-server-support-ldap-service-registry
# Period at which validation operations may time out.
# cas.service-registry.ldap.validate-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute name to use for the compare validator.
# cas.service-registry.ldap.validator.attribute-name: objectClass

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Attribute values to use for the compare validator.
# cas.service-registry.ldap.validator.attribute-value: top

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Base DN to use for the search request of the search validator.
# cas.service-registry.ldap.validator.base-dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# DN to compare to use for the compare validator.
# cas.service-registry.ldap.validator.dn: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search scope to use for the search request of the search validator.
# cas.service-registry.ldap.validator.scope: OBJECT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Search filter to use for the search request of the search validator.
# cas.service-registry.ldap.validator.search-filter: (objectClass&#61;*)

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ldap.LdapValidatorProperties
# Module: cas-server-support-ldap
# Determine the LDAP validator type.  The following LDAP validators can be used to test connection health status: <ul> <li>{@code search}: Validates a connection is healthy by performing a search operation. Validation is considered successful if the search result size is greater than zero.</li> <li>{@code none}: No validation takes place.</li> <li>{@code compare}: Validates a connection is healthy by performing a compare operation.</li> </ul>
# cas.service-registry.ldap.validator.type: search

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination email address for this message. The attribute must already be resolved and available to the CAS principal.
# cas.service-registry.mail.attribute-name: mail

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email BCC address, if any.
# cas.service-registry.mail.bcc: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email CC address, if any.
# cas.service-registry.mail.cc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email from address.
# cas.service-registry.mail.from: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Indicate whether the message body should be evaluated as HTML text.
# cas.service-registry.mail.html: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email Reply-To address, if any.
# cas.service-registry.mail.reply-to: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email subject line.
# cas.service-registry.mail.subject: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Email message body. Could be plain text or a reference to an external file that would serve as a template. If specified as a path to an external file with an extension {@code .gtemplate}, then the email message body would be processed using the Groovy template engine. The template engine uses JSP style &lt;% %&gt; script and &lt;%= %&gt; expression syntax or GString style expressions. The variable {@code out} is bound to the writer that the template is being written to.
# cas.service-registry.mail.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.email.EmailProperties
# Module: cas-server-core-util
# Set whether to validate all addresses which get passed to this helper.
# cas.service-registry.mail.validate-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Name of the database to use for authentication.
# cas.service-registry.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.service-registry.mongo.client-uri: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database collection name to fetch and/or create.
# cas.service-registry.mongo.collection: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database instance name.
# cas.service-registry.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Whether collections should be dropped on startup and re-created.
# cas.service-registry.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.service-registry.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database password for authentication.
# cas.service-registry.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.service-registry.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.service-registry.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.service-registry.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.service-registry.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.service-registry.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.service-registry.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database port.
# cas.service-registry.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.service-registry.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.service-registry.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.service-registry.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Sets whether writes should be retried if they fail due to a network error.
# cas.service-registry.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Whether the database socket connection should be tagged with keep-alive.
# cas.service-registry.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Whether connections require SSL.
# cas.service-registry.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database connection timeout.
# cas.service-registry.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# MongoDb database user for authentication.
# cas.service-registry.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.serviceregistry.MongoDbServiceRegistryProperties
# Module: cas-server-support-mongo-service-registry
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.service-registry.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.service-registry.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.service-registry.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.service-registry.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.service-registry.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.service-registry.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.service-registry.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.service-registry.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.service-registry.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.service-registry.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.service-registry.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.service-registry.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.service-registry.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Connection timeout.
# cas.service-registry.redis.connect-timeout: PT10S

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Database index used by the connection factory.
# cas.service-registry.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Whether the module is enabled or not, defaults to true.
# cas.service-registry.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Redis server host.
# cas.service-registry.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Login password of the redis server.
# cas.service-registry.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.service-registry.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.service-registry.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.service-registry.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.service-registry.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.service-registry.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.service-registry.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.service-registry.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.service-registry.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.service-registry.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.service-registry.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.service-registry.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.service-registry.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.service-registry.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.service-registry.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Redis server port.
# cas.service-registry.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.service-registry.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.service-registry.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.service-registry.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Command timeout.
# cas.service-registry.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisServiceRegistryProperties
# Module: cas-server-support-redis-service-registry
# Whether or not to use SSL for connection factory.
# cas.service-registry.redis.use-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.services.RestfulServiceRegistryProperties
# Module: cas-server-support-rest-service-registry
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.service-registry.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.services.RestfulServiceRegistryProperties
# Module: cas-server-support-rest-service-registry
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.service-registry.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.services.RestfulServiceRegistryProperties
# Module: cas-server-support-rest-service-registry
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.service-registry.rest.headers: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.services.RestfulServiceRegistryProperties
# Module: cas-server-support-rest-service-registry
# The endpoint URL to contact and retrieve attributes.
# cas.service-registry.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.service-registry.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.service-registry.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.service-registry.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.service-registry.schedule.start-delay: PT15S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# Principal attribute name that indicates the destination phone number for this SMS message. The attribute must already be resolved and available to the CAS principal.
# cas.service-registry.sms.attribute-name: phone

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The from address for the message.
# cas.service-registry.sms.from: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.SmsProperties
# Module: cas-server-core-util
# The body of the SMS message.
# cas.service-registry.sms.text: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.services.stream.StreamingServiceRegistryProperties
# Module: cas-server-support-service-registry-stream
# Whether service registry events should be streamed and published across a CAS cluster. One typical workflow is to enable the publisher on one master node and have others consume definitions and changes from the upstream master node in order to avoid overrides and timing issues as changes may step over each other if the service registry schedule is not timed correctly.
# cas.service-registry.stream.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports both synchronous and asynchronous backups. By default, backup operations are synchronous. In this case, backup operations block operations until backups are successfully copied to backup members (or deleted from backup members in case of remove) and acknowledgements are received. Therefore, backups are updated before a put operation is completed, provided that the cluster is stable. Asynchronous backups, on the other hand, do not block operations. They are fire and forget and do not require acknowledgements; the backup operations are performed at some point in time.
# cas.service-registry.stream.hazelcast.config.cluster.core.async-backup-count: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Used when replication is turned on with {@link #isReplicated()}. <p> If a new member joins the cluster, there are two ways you can handle the initial provisioning that is executed to replicate all existing values to the new member. Each involves how you configure the async fill up. <ul> <li>First, you can configure async fill up to true, which does not block reads while the fill up operation is underway. That way, you have immediate access on the new member, but it will take time until all the values are eventually accessible. Not yet replicated values are returned as non-existing (null). </li> <li>Second, you can configure for a synchronous initial fill up (by configuring the async fill up to false), which blocks every read or write access to the map until the fill up operation is finished. Use this with caution since it might block your application from operating.</li> </ul>
# cas.service-registry.stream.hazelcast.config.cluster.core.async-fillup: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# To provide data safety, Hazelcast allows you to specify the number of backup copies you want to have. That way, data on a cluster member will be copied onto other member(s). To create synchronous backups, select the number of backup copies. When this count is 1, a map entry will have its backup on one other member in the cluster. If you set it to 2, then a map entry will have its backup on two other members. You can set it to 0 if you do not want your entries to be backed up, e.g., if performance is more important than backing up. The maximum value for the backup count is 6. Sync backup operations have a blocking cost which may lead to latency issues.
# cas.service-registry.stream.hazelcast.config.cluster.core.backup-count: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. Its data structures are CP with respect to the CAP principle, i.e., they always maintain linearizability and prefer consistency over availability during network partitions. Besides network partitions, CP Subsystem withstands server and client failures. All members of a Hazelcast cluster do not necessarily take part in CP Subsystem. The number of Hazelcast members that take part in CP Subsystem is specified here. CP Subsystem must have at least 3 CP members.
# cas.service-registry.stream.hazelcast.config.cluster.core.cp-member-count: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports policy-based eviction for distributed maps. Currently supported policies are LRU (Least Recently Used) and LFU (Least Frequently Used) and NONE. See <a href="http://docs.hazelcast.org/docs/latest-development/manual/html/Distributed_Data_Structures/Map/Map_Eviction.html">this</a> for more info.
# cas.service-registry.stream.hazelcast.config.cluster.core.eviction-policy: LRU

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# The instance name.
# cas.service-registry.stream.hazelcast.config.cluster.core.instance-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast has a flexible logging configuration and doesn't depend on any logging framework except JDK logging. It has in-built adaptors for a number of logging frameworks and also supports custom loggers by providing logging interfaces. To use built-in adaptors you should set this setting to one of predefined types below. <ul> <li>{@code jdk}: JDK logging</li> <li>{@code log4j}: Log4j</li> <li>{@code slf4j}: Slf4j</li> <li>{@code none}: Disable logging</li> </ul>
# cas.service-registry.stream.hazelcast.config.cluster.core.logging-type: slf4j

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Define how data items in Hazelcast maps are merged together from source to destination. By default, merges map entries from source to destination if they don't exist in the destination map. Accepted values are: <ul>     <li>{@code PUT_IF_ABSENT}: Merges data structure entries from source to destination if they don't exist in the destination data structure.</li>     <li>{@code HIGHER_HITS}:  * Merges data structure entries from source to destination data structure if the source entry     has more hits than the destination one.</li>     <li>{@code DISCARD}: Merges only entries from the destination data structure and discards all entries from the source data structure. </li>     <li>{@code PASS_THROUGH}: Merges data structure entries from source to destination directly unless the merging entry is null</li>     <li>{@code EXPIRATION_TIME}: Merges data structure entries from source to destination data structure if the source entry     will expire later than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_UPDATE}:  Merges data structure entries from source to destination data structure if the source entry was     updated more frequently than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_ACCESS}: Merges data structure entries from source to destination data structure if the source entry     has been accessed more recently than the destination entry. This policy can only be used if the clocks of the nodes are in sync.</li> </ul>
# cas.service-registry.stream.hazelcast.config.cluster.core.map-merge-policy: PUT_IF_ABSENT

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Max timeout of heartbeat in seconds for a node to assume it is dead.
# cas.service-registry.stream.hazelcast.config.cluster.core.max-no-heartbeat-seconds: 300

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the maximum size of the map.
# cas.service-registry.stream.hazelcast.config.cluster.core.max-size: 85

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# <ul> <li>{@code FREE_HEAP_PERCENTAGE}: Policy based on minimum free JVM heap memory percentage per JVM.</li> <li>{@code FREE_HEAP_SIZE}: Policy based on minimum free JVM heap memory in megabytes per JVM.</li> <li>{@code FREE_NATIVE_MEMORY_PERCENTAGE}: Policy based on minimum free native memory percentage per Hazelcast instance.</li> <li>{@code FREE_NATIVE_MEMORY_SIZE}: Policy based on minimum free native memory in megabytes per Hazelcast instance.</li> <li>{@code PER_NODE}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code PER_PARTITION}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each partition.</li> <li>{@code USED_HEAP_PERCENTAGE}: Policy based on maximum used JVM heap memory percentage per data structure (map, cache etc) on each Hazelcast instance .</li> <li>{@code USED_HEAP_SIZE}: Policy based on maximum used JVM heap memory in megabytes per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_PERCENTAGE}: Policy based on maximum used native memory percentage per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_SIZE}: Policy based on maximum used native memory in megabytes per data structure (map, cache etc) on each Hazelcast instance .</li> </ul>
# cas.service-registry.stream.hazelcast.config.cluster.core.max-size-policy: USED_HEAP_PERCENTAGE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# With {@code PartitionGroupConfig}, you can control how primary and backup partitions are mapped to physical Members. Hazelcast will always place partitions on different partition groups so as to provide redundancy. Accepted value are: {@code PER_MEMBER, HOST_AWARE, CUSTOM, ZONE_AWARE, SPI}. In all cases a partition will never be created on the same group. If there are more partitions defined than there are partition groups, then only those partitions, up to the number of partition groups, will be created. For example, if you define 2 backups, then with the primary, that makes 3. If you have only two partition groups only two will be created. <ul> <li>{@code}PER_MEMBER Partition Groups}: This is the default partition scheme and is used if no other scheme is defined. Each Member is in a group of its own.</li> <li>{@code}HOST_AWARE Partition Groups}: In this scheme, a group corresponds to a host, based on its IP address. Partitions will not be written to any other members on the same host. This scheme provides good redundancy when multiple instances are being run on the same host.</li> <li>{@code}CUSTOM Partition Groups}: In this scheme, IP addresses, or IP address ranges, are allocated to groups. Partitions are not written to the same group. This is very useful for ensuring partitions are written to different racks or even availability zones.</li> <li>{@code}ZONE_AWARE Partition Groups}: In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group. This is very useful for ensuring partitions are written to availability zones or different racks without providing the IP addresses to the config ahead.</li> <li>{@code}SPI Partition Groups}:  In this scheme, groups are allocated according to the implementation provided by Discovery SPI.</li> </ul>
# cas.service-registry.stream.hazelcast.config.cluster.core.partition-member-group-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# A Replicated Map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high speed access. A Replicated Map does not partition data (it does not spread data to different cluster members); instead, it replicates the data to all members. Replication leads to higher memory consumption. However, a Replicated Map has faster read and write access since the data is available on all members. Writes could take place on local/remote members in order to provide write-order, eventually being replicated to all other members. <br><p> If you have a large cluster or very high occurrences of updates, the Replicated Map may not scale linearly as expected since it has to replicate update operations to all members in the cluster. Since the replication of updates is performed in an asynchronous manner, Hazelcast recommends you enable back pressure in case your system has high occurrences of updates. Note that Replicated Map does not guarantee eventual consistency because there are some edge cases that fail to provide consistency. <br><p> Replicated Map uses the internal partition system of Hazelcast in order to serialize updates happening on the same key at the same time. This happens by sending updates of the same key to the same Hazelcast member in the cluster. <br><p> Due to the asynchronous nature of replication, a Hazelcast member could die before successfully replicating a "write" operation to other members after sending the "write completed" response to its caller during the write process. In this scenario, Hazelcastâ€™s internal partition system promotes one of the replicas of the partition as the primary one. The new primary partition does not have the latest "write" since the dead member could not successfully replicate the update.
# cas.service-registry.stream.hazelcast.config.cluster.core.replicated: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Connection timeout in seconds for the TCP/IP config and members joining the cluster.
# cas.service-registry.stream.hazelcast.config.cluster.core.timeout: 5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS access key.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.access-key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# The maximum amount of time Hazelcast will try to connect to a well known member before giving up. Setting this value too low could mean that a member is not able to connect to a cluster. Setting the value too high means that member startup could slow down because of longer timeouts (for example, when a well known member is not up). Increasing this value is recommended if you have many IPs listed and the members cannot properly build up the cluster. Its default value is 5.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.connection-timeout-seconds: 5

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Host header. i.e. {@code ec2.amazonaws.com}. The URL that is the entry point for a web service.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.host-header: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If you do not want to use access key and secret key, you can specify iam-role. Hazelcast fetches your credentials by using your IAM role. This setting only affects deployments on Amazon EC2. If you are deploying CAS in an Amazon ECS environment, the role should not be specified. The role is fetched from the task definition that is assigned to run CAS.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.iam-role: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Hazelcast port. Typically may be set to {@code 5701}. You can set searching for other ports rather than 5701 if you've members on different ports.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS region. i.e. {@code us-east-1}. The region where your members are running.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.region: us-east-1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS secret key.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.secret-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a security group is configured, only instances within that security group are selected.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.security-group-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.tag-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.aws.tag-value: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client ID.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.client-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client secret.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.client-secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The name of the tag on the hazelcast vm resources. With every Hazelcast Virtual Machine you deploy in your resource group, you need to ensure that each VM is tagged with the value of cluster-id defined in your Hazelcast configuration. The only requirement is that every VM can access each other either by private or public IP address.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.cluster-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure resource group name of the cluster. You can find this in the Azure portal or CLI.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.group-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure subscription ID.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.subscription-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory tenant ID.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.azure.tenant-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.dns-provider.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma separated list of docker services and associated ports to be considered peers of this service. Note, this must include itself (the definition of serviceName and servicePort) if the service is to cluster with other instances of this service.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.dns-provider.peer-services: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Name of the docker service that this instance is running in.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.dns-provider.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Internal port that hazelcast is listening on.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.dns-provider.service-port: 5701

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of Docker network names to discover matching services on.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.docker-network-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service label=values to find tasks/containers on the networks.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.docker-service-labels: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service names to find tasks/containers on the networks.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.docker-service-names: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# The raw port that hazelcast is listening on. IMPORTANT: This is NOT a docker "published" port, nor is it necessarily a EXPOSEd port. It is the hazelcast port that the service is configured with, this must be the same for all matched containers in order to work, and just using the default of 5701 is the simplest way to go.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.hazelcast-peer-port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# If Swarm Mgr URI is SSL, to enable skip-verify for it.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.skip-verify-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Swarm Manager URI (overrides DOCKER_HOST).
# cas.service-registry.stream.hazelcast.config.cluster.discovery.docker-swarm.member-provider.swarm-mgr-uri: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDiscoveryProperties
# Module: cas-server-support-hazelcast-core
# Whether discovery should be enabled via the configured strategies below.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider credential, can be thought of as a password for cloud services.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.credential: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for cloud providers which require an extra JSON or P12 key file. This denotes the path of that file. Only tested with Google Compute Engine. (Required if Google Compute Engine is used.)
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.credential-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines the endpoint for a generic API such as OpenStack or CloudStack (optional).
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters instance groups (optional). When used with AWS it maps to security group.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.group: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider identity, can be thought of as a user name for cloud services.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.identity: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Port which the hazelcast instance service uses on the cluster member. Default value is 5701. (optional)
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.port: -1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# String value that is used to identify ComputeService provider. For example, "google-compute-engine" is used for Google Cloud services. See <a href="https://jclouds.apache.org/reference/providers/#compute">here</a> for more info.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.provider: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines region for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.regions: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for IAM role support specific to AWS (optional, but if defined, no identity or credential should be defined in the configuration).
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.role-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional). Can be used with comma separated values for multiple values.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.tag-keys: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional) Can be used with comma separated values for multiple values.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.tag-values: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines zone for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.jclouds.zones: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the number of retries to Kubernetes API. Defaults to: 3.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.api-retries: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an oauth token for the kubernetes client to access the kubernetes REST API. Defaults to reading the token from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/token}.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.api-token: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# CA Authority certificate from Kubernetes Master. Defaults to reading the certificate from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/ca.crt}.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.ca-certificate: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an alternative address for the kubernetes master. Defaults to: {@code https://kubernetes.default.svc}
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.kubernetes-master: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the namespace of the application POD through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.namespace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label to lookup through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.pod-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.pod-label-value: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if not ready addresses should be evaluated to be discovered on startup.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.resolve-not-ready-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup domain. This is defined as something similar to {@code my-svc.my-namespace.svc.cluster.local}.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-dns: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup timeout in seconds. Defaults to 5 secs.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-dns-timeout: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label to lookup through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-label-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service name of the POD to lookup through the Service Discovery REST API of Kubernetes.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# If specified with a value greater than 0, its value defines the endpoint port of the service (overriding the default).
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.service-port: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if the node name should be used as external address, instead of looking up the external IP using the {@code /nodes} resource. Default is false.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.kubernetes.use-node-name-as-external-address: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Enables a multicast configuration using a group address and port. Contains the configuration for the multicast discovery mechanism. With the multicast discovery mechanism Hazelcast allows Hazelcast members to find each other using multicast. So Hazelcast members do not need to know concrete addresses of members, they just multicast to everyone listening. It depends on your environment if multicast is possible or allowed; otherwise you need to have a look at the tcp/ip cluster
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast group address used for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.group: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast port used for discovery.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.port: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Gets the time to live for the multicast package in seconds. This is the default time-to-live for multicast packets sent out on the socket
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.time-to-live: 32

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# specifies the time in seconds that a member should wait for a valid multicast response from another member running in the network before declaring itself the leader member (the first member joined to the cluster) and creating its own cluster. This only applies to the startup of members where no leader has been assigned yet. If you specify a high value, such as 60 seconds, it means that until a leader is selected, each member will wait 60 seconds before moving on. Be careful when providing a high value. Also, be careful not to set the value too low, or the members might give up too early and create their own cluster.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.timeout: 2

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Multicast trusted interfaces for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.service-registry.stream.hazelcast.config.cluster.discovery.multicast.trusted-interfaces: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# IPv6 support has been switched off by default, since some platforms have issues in use of IPv6 stack. And some other platforms such as Amazon AWS have no support at all. To enable IPv6 support set this setting to false.
# cas.service-registry.stream.hazelcast.config.cluster.network.ipv4-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# If this property is set, then this is the address where the server socket is bound to.
# cas.service-registry.stream.hazelcast.config.cluster.network.local-address: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the well known members. If members is empty, calling this method will have the same effect as calling clear(). A member can be a comma separated string, e..g '10.11.12.1,10.11.12.2' which indicates multiple members are going to be added.
# cas.service-registry.stream.hazelcast.config.cluster.network.members: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify which network interfaces that Hazelcast should use. Servers mostly have more than one network interface, so you may want to list the valid IPs. Range characters ('*' and '-') can be used for simplicity. For instance, 10.3.10.* refers to IPs between 10.3.10.0 and 10.3.10.255. Interface 10.3.10.4-18 refers to IPs between 10.3.10.4 and 10.3.10.18 (4 and 18 included). If network interface configuration is enabled (it is disabled by default) and if Hazelcast cannot find an matching interface, then it will print a message on the console and will not start on that node. Interfaces can be separated by a comma.
# cas.service-registry.stream.hazelcast.config.cluster.network.network-interfaces: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The outbound ports for the Hazelcast configuration.
# cas.service-registry.stream.hazelcast.config.cluster.network.outbound-ports: 

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify the ports which Hazelcast will use to communicate between cluster members. The name of the parameter for this is port and its default value is 5701. By default, Hazelcast will try 100 ports to bind. Meaning that, if you set the value of port as 5701, as members are joining to the cluster, Hazelcast tries to find ports between 5701 and 5801.
# cas.service-registry.stream.hazelcast.config.cluster.network.port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You may also want to choose to use only one port. In that case, you can disable the auto-increment feature of port.
# cas.service-registry.stream.hazelcast.config.cluster.network.port-auto-increment: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The default public address to be advertised to other cluster members and clients.
# cas.service-registry.stream.hazelcast.config.cluster.network.public-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Enable TCP/IP config. Contains the configuration for the Tcp/Ip join mechanism. The Tcp/Ip join mechanism relies on one or more well known members. So when a new member wants to join a cluster, it will try to connect to one of the well known members. If it is able to connect, it will now about all members in the cluster and doesn't rely on these well known members anymore.
# cas.service-registry.stream.hazelcast.config.cluster.network.tcpip-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Whether WAN should be enabled.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Name of this replication group.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.replication-name: apereo-cas

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# List of target clusters to be used for synchronization and replication.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
    <li>{@code ACK_ON_RECEIPT}: ACK after WAN operation is received by the target cluster (without waiting the result of actual operation invocation).</li>
    <li>{@code ACK_ON_OPERATION_COMPLETE}: Wait till the operation is complete on target cluster.</li>
</ul>
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].acknowledge-type: ACK_ON_OPERATION_COMPLETE

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum amount of time, in milliseconds, to be waited before
sending a batch of events in case batch.size is not reached.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].batch-maximum-delay-milliseconds: 1000

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum size of events that are sent to the target cluster in a single batch.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].batch-size: 500

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the cluster name used as an endpoint group password for authentication
on the target endpoint.
If there is no separate publisher ID property defined, this cluster name
will also be used as a WAN publisher ID. This ID is then used for
identifying the publisher.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].cluster-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Strategy for checking the consistency of data between replicas.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].consistency-check-strategy: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Comma separated list of endpoints in this replication group.
IP addresses and ports of the cluster members for which the WAN replication is implemented. These endpoints are not necessarily
the entire target cluster and WAN does not perform the discovery of other members in the target cluster. It only expects
that these IP addresses (or at least some of them) are available.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].endpoints: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The number of threads that the replication executor will have. The executor is used to send WAN
events to the endpoints and ideally you want to have one thread per endpoint. If this property is omitted
and you have specified the endpoints property, this will be the case. If necessary you can manually define
the number of threads that the executor will use. Once the executor has been initialized there is thread
affinity between the discovered endpoints and the executor threads - all events for a single endpoint will
go through a single executor thread, preserving event order. It is important to determine which number of
executor threads is a good value. Failure to do so can lead to performance issues - either contention on a
too small number of threads or wasted threads that will not be performing any work.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].executor-thread-count: 2

# Required: false
# Type: java.util.Map<String,Comparable>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The WAN publisher properties.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].properties: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Publisher class name for WAN replication.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].publisher-class-name: com.hazelcast.enterprise.wan.replication.WanBatchReplication

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Returns the publisher ID used for identifying the publisher.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].publisher-id: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# For huge clusters or high data mutation rates, you might need to increase the replication queue size.
The default queue size for replication queues is 10,000. This means, if you have heavy put/update/remove
rates, you might exceed the queue size so that the oldest, not yet replicated, updates might get
lost.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].queue-capacity: 10_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
<li>{@code THROW_EXCEPTION}: Instruct WAN replication implementation to throw an exception and doesn't allow further processing.</li>
<li>{@code DISCARD_AFTER_MUTATION}: Instruct WAN replication implementation to drop new events when WAN event queues are full.</li>
<li>{@code THROW_EXCEPTION_ONLY_IF_REPLICATION_ACTIVE}: Similar to {@code THROW_EXCEPTION} but only throws exception when WAN replication is active.
* Discards the new events if WAN replication is stopped.</li>
</ul>
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].queue-full-behavior: THROW_EXCEPTION

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Time, in milliseconds, to be waited for the acknowledgment of a sent WAN event to target cluster.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].response-timeout-milliseconds: 60_000

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# When set to true, only the latest events (based on key) are selected and sent in a batch.
# cas.service-registry.stream.hazelcast.config.cluster.wan-replication.targets[].snapshot-enabled: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables compression when default java serialization is used.
# cas.service-registry.stream.hazelcast.config.core.enable-compression: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables scripting from Management Center.
# cas.service-registry.stream.hazelcast.config.core.enable-management-center-scripting: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast enterprise license key.
# cas.service-registry.stream.hazelcast.config.core.license-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.services.stream.hazelcast.StreamServicesHazelcastProperties
# Module: cas-server-support-service-registry-stream-hazelcast
# Duration that indicates how long should items be kept in the hazelcast cache. Note that generally this number needs to be short as once an item is delivered to a target, it is explicitly removed from the cache/queue. This duration needs to be adjusted if the latency between the CAS nodes in the cluster is too large. Having too short a value will cause the record to expire before it reaches other members of the cluster.
# cas.service-registry.stream.hazelcast.duration: PT1M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.services.stream.hazelcast.StreamServicesKafkaProperties
# Module: cas-server-support-service-registry-stream-kafka
# Kafka bootstrapping server address (i.e. localhost:9092).
# cas.service-registry.stream.kafka.bootstrap-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.kafka.KafkaSingleTopicProperties
# Module: cas-server-support-kafka-core
# Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ({@code 'gzip', 'snappy', 'lz4', 'zstd'}). It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.
# cas.service-registry.stream.kafka.topic.compression-type: gzip

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.kafka.KafkaSingleTopicProperties
# Module: cas-server-support-kafka-core
# Additional configuration options, as pointed out by {@code TopicConfig}.
# cas.service-registry.stream.kafka.topic.config: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.kafka.KafkaSingleTopicProperties
# Module: cas-server-support-kafka-core
# Set the name of the topic.
# cas.service-registry.stream.kafka.topic.name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.kafka.KafkaSingleTopicProperties
# Module: cas-server-support-kafka-core
# Set the number of partitions (default 1).
# cas.service-registry.stream.kafka.topic.partitions: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.kafka.KafkaSingleTopicProperties
# Module: cas-server-support-kafka-core
# Set the number of replicas (default 1).
# cas.service-registry.stream.kafka.topic.replicas: 1

# Required: false
# Type: org.apereo.cas.configuration.model.support.services.stream.StreamingServiceRegistryProperties$ReplicationModes
# Owner: org.apereo.cas.configuration.model.support.services.stream.StreamingServiceRegistryProperties
# Module: cas-server-support-service-registry-stream
# Indicates the replication mode. Accepted values are: <ul> <li>{@code ACTIVE_ACTIVE}: All CAS nodes sync copies of definitions and keep them locally.</li> <li>{@code ACTIVE_PASSIVE}: One master node keeps definitions and streams changes to other passive nodes</li> </ul>
Available values are as follows:
<ul><li>{@code ACTIVE_ACTIVE}: In this replication mode, all CAS nodes will try to sync copies
of service definition files individually on each node.</li><li>{@code ACTIVE_PASSIVE}: In this replication mode, one CAS service is designated to be the master
that contains all service definition files locally, and will stream changes
to other CAS passive nodes. Passive CAS nodes only access the replication
cache to retrieve services, and will not individually keep copies of the
service definition files on disk.</li></ul>
# cas.service-registry.stream.replication-mode: true

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.services.yaml.YamlServiceRegistryProperties
# Module: cas-server-support-yaml-service-registry
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.service-registry.yaml.location: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.services.yaml.YamlServiceRegistryProperties
# Module: cas-server-support-yaml-service-registry
# Flag indicating whether a background watcher thread is enabled for the purposes of live reloading of service registry data changes from persistent data store.
# cas.service-registry.yaml.watcher-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.service.registry.init-from-json: 
# Deprecation Level: ERROR
# Deprecation Reason: init-from-json setting is now moved into the core namespace.
# Deprecation Replacement: cas.service.registry.core.init-from-json

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# A regular expression pattern that indicates the set of allowed IP addresses, when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc), the cookie can still be considered valid if the new IP address matches the pattern specified here.
# cas.session-replication.cookie.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# Decide if cookie paths should be automatically configured based on the application context path, when the cookie path is not configured.
# cas.session-replication.cookie.auto-configure-cookie-path: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.session-replication.cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.session-replication.cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.session-replication.cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.session-replication.cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.session-replication.cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.session-replication.cookie.path: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# When generating cookie values, determine whether the value should be compounded and signed with the properties of the current session, such as IP address, user-agent, etc.
# cas.session-replication.cookie.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.session-replication.cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.replication.CookieSessionReplicationProperties
# Module: cas-server-support-pac4j-api
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.session-replication.cookie.secure: true

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.session-replication.session-cookie-name: 
# Deprecation Level: ERROR
# Deprecation Reason: Cookie settings are moved to a new cookie namespace under cas.session-replication.
# Deprecation Replacement: cas.session-replication.cookie.name

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.slo.SingleLogOutProperties
# Module: cas-server-core-authentication
# Whether SLO callbacks should be done in an asynchronous manner via the HTTP client. When true, CAS will not wait for the operation to fully complete and will resume control to carry on.
# cas.slo.asynchronous: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.slo.SingleLogOutProperties
# Module: cas-server-core-authentication
# Whether SLO should be entirely disabled globally for the CAS deployment.
# cas.slo.disabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.ClickatellProperties
# Module: cas-server-support-sms-clickatell
# URL to contact and send messages.
# cas.sms-provider.clickatell.server-url: https://platform.clickatell.com/messages

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.ClickatellProperties
# Module: cas-server-support-sms-clickatell
# Secure token used to establish a handshake with the service.
# cas.sms-provider.clickatell.token: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.sms.GroovySmsProperties
# Module: cas-server-core-util
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.sms-provider.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.NexmoProperties
# Module: cas-server-support-sms-nexmo
# Nexmo API secret obtained from Nexmo.
# cas.sms-provider.nexmo.api-secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.NexmoProperties
# Module: cas-server-support-sms-nexmo
# Nexmo API token obtained from Nexmo.
# cas.sms-provider.nexmo.api-token: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.NexmoProperties
# Module: cas-server-support-sms-nexmo
# Nexmo Signature secret obtained from Nexmo.
# cas.sms-provider.nexmo.signature-secret: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.RestfulSmsProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.sms-provider.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.RestfulSmsProperties
# Module: cas-server-core-util
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.sms-provider.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.sms.RestfulSmsProperties
# Module: cas-server-core-util
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.sms-provider.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.RestfulSmsProperties
# Module: cas-server-core-util
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.sms-provider.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.RestfulSmsProperties
# Module: cas-server-core-util
# The endpoint URL to contact and retrieve attributes.
# cas.sms-provider.rest.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Client execution timeout.
# cas.sms-provider.sns.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Connection timeout.
# cas.sms-provider.sns.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Use access-key provided by AWS to authenticate.
# cas.sms-provider.sns.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Use secret key provided by AWS to authenticate.
# cas.sms-provider.sns.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# AWS custom endpoint.
# cas.sms-provider.sns.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Local address.
# cas.sms-provider.sns.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Maximum connections setting.
# cas.sms-provider.sns.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# The maximum amount in USD that you are willing to spend to send the SMS message. Amazon SNS will not send the message if it determines that doing so would incur a cost that exceeds the maximum price. This attribute has no effect if your month-to-date SMS costs have already exceeded the limit set for the MonthlySpendLimit attribute, which you set by using the SetSMSAttributes request. If you are sending the message to an Amazon SNS topic, the maximum price applies to each message delivery to each phone number that is subscribed to the topic.
# cas.sms-provider.sns.max-price: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Profile name to use.
# cas.sms-provider.sns.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Profile path.
# cas.sms-provider.sns.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Optionally specifies the proxy host to connect through.
# cas.sms-provider.sns.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Optionally specifies the proxy password to connect through.
# cas.sms-provider.sns.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Optionally specifies the proxy username to connect through.
# cas.sms-provider.sns.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# AWS region used.
# cas.sms-provider.sns.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.sms-provider.sns.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# A custom ID that contains up to 11 alphanumeric characters, including at least one letter and no spaces.  The sender ID is displayed as the message sender on the receiving device. For example, you can use your business brand to make the message source easier to recognize. Support for sender IDs varies by country and/or region. For example, messages delivered to U.S. phone numbers will not display the sender ID. If you do not specify a sender ID, the message will display a long code as the sender ID in supported countries and regions. For countries or regions that require an alphabetic sender ID, the message displays NOTICE as the sender ID.
# cas.sms-provider.sns.sender-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# The type of message that you are sending. <ul> <li>Promotional - Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.</li> <li>Transactional â€“ Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability. </li> </ul>
# cas.sms-provider.sns.sms-type: Transactional

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Socket timeout.
# cas.sms-provider.sns.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.sms.AmazonSnsProperties
# Module: cas-server-support-sms-aws-sns
# Flag that indicates whether to use reaper.
# cas.sms-provider.sns.use-reaper: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# set API key value for the first API key authentication.
# cas.sms-provider.text-magic.api-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# set API key prefix for the first API key authentication.
# cas.sms-provider.text-magic.api-key-prefix: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# connect timeout (in milliseconds).
# cas.sms-provider.text-magic.connect-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# Check that whether debugging is enabled for this API client.
# cas.sms-provider.text-magic.debugging: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# set password for the first HTTP basic authentication.
# cas.sms-provider.text-magic.password: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# read timeout (in milliseconds).
# cas.sms-provider.text-magic.read-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# Secure token used to establish a handshake.
# cas.sms-provider.text-magic.token: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# Set the User-Agent header's value (by adding to the default header map).
# cas.sms-provider.text-magic.user-agent: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# Username authorized to use the service as the bind account.
# cas.sms-provider.text-magic.username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# Should SSL connections be verified?
# cas.sms-provider.text-magic.verifying-ssl: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.sms.TextMagicProperties
# Module: cas-server-support-sms-textmagic
# write timeout (in milliseconds).
# cas.sms-provider.text-magic.write-timeout: 0

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TwilioProperties
# Module: cas-server-support-sms-twilio
# Twilio account identifier used for authentication.
# cas.sms-provider.twilio.account-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.sms.TwilioProperties
# Module: cas-server-support-sms-twilio
# Twilio secret token used for authentication.
# cas.sms-provider.twilio.token: 

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.spring.cloud.aws.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Client execution timeout.
# cas.spring.cloud.aws.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Connection timeout.
# cas.spring.cloud.aws.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.spring.cloud.aws.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.spring.cloud.aws.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.spring.cloud.aws.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# AWS custom endpoint.
# cas.spring.cloud.aws.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Local address.
# cas.spring.cloud.aws.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.spring.cloud.aws.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Maximum connections setting.
# cas.spring.cloud.aws.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.spring.cloud.aws.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Profile name to use.
# cas.spring.cloud.aws.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Profile path.
# cas.spring.cloud.aws.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.spring.cloud.aws.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.spring.cloud.aws.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.spring.cloud.aws.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Read capacity.
# cas.spring.cloud.aws.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# AWS region used.
# cas.spring.cloud.aws.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.spring.cloud.aws.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Socket timeout.
# cas.spring.cloud.aws.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Time offset.
# cas.spring.cloud.aws.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to use reaper.
# cas.spring.cloud.aws.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Write capacity.
# cas.spring.cloud.aws.dynamo-db.write-capacity: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Bucket name that holds the settings.
# cas.spring.cloud.aws.s3.bucket-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Client execution timeout.
# cas.spring.cloud.aws.s3.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Connection timeout.
# cas.spring.cloud.aws.s3.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Use access-key provided by AWS to authenticate.
# cas.spring.cloud.aws.s3.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Use secret key provided by AWS to authenticate.
# cas.spring.cloud.aws.s3.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# AWS custom endpoint.
# cas.spring.cloud.aws.s3.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Local address.
# cas.spring.cloud.aws.s3.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Maximum connections setting.
# cas.spring.cloud.aws.s3.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Profile name to use.
# cas.spring.cloud.aws.s3.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Profile path.
# cas.spring.cloud.aws.s3.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Optionally specifies the proxy host to connect through.
# cas.spring.cloud.aws.s3.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Optionally specifies the proxy password to connect through.
# cas.spring.cloud.aws.s3.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Optionally specifies the proxy username to connect through.
# cas.spring.cloud.aws.s3.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# AWS region used.
# cas.spring.cloud.aws.s3.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.spring.cloud.aws.s3.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Socket timeout.
# cas.spring.cloud.aws.s3.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonS3
# Module: cas-server-support-configuration-cloud-aws-s3
# Flag that indicates whether to use reaper.
# cas.spring.cloud.aws.s3.use-reaper: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Client execution timeout.
# cas.spring.cloud.aws.secrets-manager.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Connection timeout.
# cas.spring.cloud.aws.secrets-manager.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Use access-key provided by AWS to authenticate.
# cas.spring.cloud.aws.secrets-manager.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Use secret key provided by AWS to authenticate.
# cas.spring.cloud.aws.secrets-manager.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# AWS custom endpoint.
# cas.spring.cloud.aws.secrets-manager.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Local address.
# cas.spring.cloud.aws.secrets-manager.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Maximum connections setting.
# cas.spring.cloud.aws.secrets-manager.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Profile name to use.
# cas.spring.cloud.aws.secrets-manager.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Profile path.
# cas.spring.cloud.aws.secrets-manager.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Optionally specifies the proxy host to connect through.
# cas.spring.cloud.aws.secrets-manager.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Optionally specifies the proxy password to connect through.
# cas.spring.cloud.aws.secrets-manager.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Optionally specifies the proxy username to connect through.
# cas.spring.cloud.aws.secrets-manager.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# AWS region used.
# cas.spring.cloud.aws.secrets-manager.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.spring.cloud.aws.secrets-manager.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Socket timeout.
# cas.spring.cloud.aws.secrets-manager.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSecretsManager
# Module: cas-server-support-configuration-cloud-aws-secretsmanager
# Flag that indicates whether to use reaper.
# cas.spring.cloud.aws.secrets-manager.use-reaper: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Client execution timeout.
# cas.spring.cloud.aws.ssm.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Connection timeout.
# cas.spring.cloud.aws.ssm.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Use access-key provided by AWS to authenticate.
# cas.spring.cloud.aws.ssm.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Use secret key provided by AWS to authenticate.
# cas.spring.cloud.aws.ssm.credential-secret-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# AWS custom endpoint.
# cas.spring.cloud.aws.ssm.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Local address.
# cas.spring.cloud.aws.ssm.local-address: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Maximum connections setting.
# cas.spring.cloud.aws.ssm.max-connections: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Profile name to use.
# cas.spring.cloud.aws.ssm.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Profile path.
# cas.spring.cloud.aws.ssm.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Optionally specifies the proxy host to connect through.
# cas.spring.cloud.aws.ssm.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Optionally specifies the proxy password to connect through.
# cas.spring.cloud.aws.ssm.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Optionally specifies the proxy username to connect through.
# cas.spring.cloud.aws.ssm.proxy-username: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# AWS region used.
# cas.spring.cloud.aws.ssm.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.spring.cloud.aws.ssm.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Socket timeout.
# cas.spring.cloud.aws.ssm.socket-timeout: 5000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonSystemsManagerParameterStore
# Module: cas-server-support-configuration-cloud-aws-ssm
# Flag that indicates whether to use reaper.
# cas.spring.cloud.aws.ssm.use-reaper: false

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.spring.cloud.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Client execution timeout.
# cas.spring.cloud.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Connection timeout.
# cas.spring.cloud.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Use access-key provided by AWS to authenticate.
# cas.spring.cloud.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Use secret key provided by AWS to authenticate.
# cas.spring.cloud.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to drop tables on start up.
# cas.spring.cloud.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# AWS custom endpoint.
# cas.spring.cloud.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Local address.
# cas.spring.cloud.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.spring.cloud.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Maximum connections setting.
# cas.spring.cloud.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to prevent CAS from creating tables.
# cas.spring.cloud.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Profile name to use.
# cas.spring.cloud.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Profile path.
# cas.spring.cloud.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy host to connect through.
# cas.spring.cloud.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy password to connect through.
# cas.spring.cloud.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Optionally specifies the proxy username to connect through.
# cas.spring.cloud.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Read capacity.
# cas.spring.cloud.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# AWS region used.
# cas.spring.cloud.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.spring.cloud.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Socket timeout.
# cas.spring.cloud.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Time offset.
# cas.spring.cloud.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Flag that indicates whether to use reaper.
# cas.spring.cloud.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.AmazonDynamoDb
# Module: cas-server-support-configuration-cloud-dynamodb
# Write capacity.
# cas.spring.cloud.dynamo-db.write-capacity: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Jdbc
# Module: cas-server-support-configuration-cloud-jdbc
# Driver class name.
# cas.spring.cloud.jdbc.driver-class: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Jdbc
# Module: cas-server-support-configuration-cloud-jdbc
# Database password.
# cas.spring.cloud.jdbc.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Jdbc
# Module: cas-server-support-configuration-cloud-jdbc
# SQL statement.
# cas.spring.cloud.jdbc.sql: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Jdbc
# Module: cas-server-support-configuration-cloud-jdbc
# Database url.
# cas.spring.cloud.jdbc.url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Jdbc
# Module: cas-server-support-configuration-cloud-jdbc
# Database user.
# cas.spring.cloud.jdbc.user: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.MongoDb
# Module: cas-server-support-configuration-cloud-mongo
# Mongodb URI.
# cas.spring.cloud.mongo.uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Rest
# Module: cas-server-support-configuration-cloud-rest
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.spring.cloud.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Rest
# Module: cas-server-support-configuration-cloud-rest
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.spring.cloud.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Rest
# Module: cas-server-support-configuration-cloud-rest
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.spring.cloud.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Rest
# Module: cas-server-support-configuration-cloud-rest
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.spring.cloud.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.cloud.SpringCloudConfigurationProperties.Rest
# Module: cas-server-support-configuration-cloud-rest
# The endpoint URL to contact and retrieve attributes.
# cas.spring.cloud.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# Flag that indicates whether to allow SSO session with a missing target service.
# cas.sso.allow-missing-service-parameter: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# Flag that indicates whether to create SSO session on re-newed authentication event.
# cas.sso.create-sso-cookie-on-renew-authn: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# Indicates whether CAS proxy authentication/tickets are supported by this server implementation.
# cas.sso.proxy-authn-enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# Indicates whether this server implementation should globally support CAS protocol authentication requests that are tagged with "renew=true".
# cas.sso.renew-authn-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# A regular expression pattern that represents an application which must have established a session with CAS already before access to other applications can be allowed by CAS. This is the initial mandatory/required application with which the user must start before going anywhere else. Services that establish a session with CAS typically do so by receiving a service ticket from CAS.
# cas.sso.required-service-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties
# Module: cas-server-core-authentication
# Indicate whether single sign-on should be turned on and supported globally for the server.
# cas.sso.sso-enabled: true

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationProperties
# Module: cas-server-core-configuration
# Describes a directory path where CAS configuration may be found.
# cas.standalone.configuration-directory: 

# Required: false
# Type: java.io.File
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationProperties
# Module: cas-server-core-configuration
# Describes a file path where that contains the CAS properties in a single file.
# cas.standalone.configuration-file: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationSecurityProperties
# Module: cas-server-core-configuration
# Algorithm to use when deciphering settings. Default algorithm is {@code PBEWithMD5AndTripleDES}.
# cas.standalone.configuration-security.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationSecurityProperties
# Module: cas-server-core-configuration
# An initialization vector is required for {@code PBEWithDigestAndAES} algorithms that aren't BouncyCastle. Enabling an initialization vector will break passwords encrypted without one. Toggling this value will make pre-existing non-{@code PBEWithDigestAndAES} encrypted passwords not work. For non-BouncyCastle {@code PBEWithDigestAndAES} algorithms that require an initialization vector, one will be used regardless of this setting since backwards compatibility with existing passwords using those algorithms is not an issue (since they didn't work in previous CAS versions). The default value is false so as not to break existing encrypted passwords. In general the use of an initialization vector will increase the encrypted text's length.
# cas.standalone.configuration-security.initialization-vector: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationSecurityProperties
# Module: cas-server-core-configuration
# Total number of iterations to use when deciphering settings. Default value comes from Jasypt {@value StandardPBEByteEncryptor#DEFAULT_KEY_OBTENTION_ITERATIONS}
# cas.standalone.configuration-security.iteration: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationSecurityProperties
# Module: cas-server-core-configuration
# Security provider to use when deciphering settings. Leave blank for Java, {@code BC} for BouncyCastle. This property can be set as a Java system property: {@code cas.standalone.configuration-security.provider}.
# cas.standalone.configuration-security.provider: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.config.standalone.StandaloneConfigurationSecurityProperties
# Module: cas-server-core-configuration
# Secret key/password to use when deciphering settings. This property can be set as a Java system property: {@code cas.standalone.configuration-security.psw}.
# cas.standalone.configuration-security.psw: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# A regular expression pattern that indicates the set of allowed IP addresses, when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc), the cookie can still be considered valid if the new IP address matches the pattern specified here.
# cas.tgc.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# Decide if cookie paths should be automatically configured based on the application context path, when the cookie path is not configured.
# cas.tgc.auto-configure-cookie-path: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.tgc.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.tgc.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.tgc.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.tgc.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.tgc.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.tgc.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.tgc.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.tgc.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.tgc.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.tgc.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.tgc.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.tgc.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.tgc.path: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# When generating cookie values, determine whether the value should be compounded and signed with the properties of the current session, such as IP address, user-agent, etc.
# cas.tgc.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# If remember-me is enabled, specifies the maximum age of the cookie.
# cas.tgc.remember-me-max-age: P14D

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.tgc.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.TicketGrantingCookieProperties
# Module: cas-server-core-cookie
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.tgc.secure: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.themes.ThemeProperties
# Module: cas-server-support-themes
# The default theme name of this CAS deployment.
# cas.theme.default-theme-name: cas-theme-default

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.themes.ThemeProperties
# Module: cas-server-support-themes
# The parameter name used to switch themes.
# cas.theme.param-name: theme

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.crypto.alg: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key is a JWT whose length is defined by the encryption key size setting.
# cas.ticket.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtCryptoProperties
# Module: cas-server-core-util
# The encryption key size.
# cas.ticket.crypto.encryption.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Control the cipher sequence of operations. The accepted values are: <ul>     <li>{@code ENCRYPT_AND_SIGN}: Encrypt the value first, and then sign.</li>     <li>{@code SIGN_AND_ENCRYPT}: Sign the value first, and then encrypt.</li> </ul>
# cas.ticket.crypto.strategy-type: ENCRYPT_AND_SIGN

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.ProxyGrantingTicketProperties
# Module: cas-server-core-tickets
# Maximum length of the proxy granting ticket, when generating one.
# cas.ticket.pgt.max-length: 50

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.ProxyTicketProperties
# Module: cas-server-core-tickets
# Number of uses allowed.
# cas.ticket.pt.number-of-uses: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.ProxyTicketProperties
# Module: cas-server-core-tickets
# Number of seconds after which this ticket becomes invalid.
# cas.ticket.pt.time-to-kill-in-seconds: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Query option consistency level. The consistency level set through this method will be use for queries that don't explicitly have a consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.ticket.registry.cassandra.consistency-level: LOCAL_QUORUM

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# The list of contact points to use for the new cluster.
# cas.ticket.registry.cassandra.contact-points: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.cassandra.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.cassandra.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.cassandra.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.cassandra.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.cassandra.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.cassandra.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Flag that indicates whether to drop tables on start up.
# cas.ticket.registry.cassandra.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Keyspace address to use where the cluster would connect.
# cas.ticket.registry.cassandra.keyspace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Used by a DC-ware round-robin load balancing policy. This policy provides round-robin queries over the node of the local data center. It also includes in the query plans returned a configurable number of hosts in the remote data centers, but those are always tried after the local nodes. In other words, this policy guarantees that no host in a remote data center will be queried unless no host in the local data center can be reached.
# cas.ticket.registry.cassandra.local-dc: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Password to bind and establish a connection to cassandra.
# cas.ticket.registry.cassandra.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Query option serial consistency level. The serial consistency level set through this method will be use for queries that don't explicitly have a serial consistency level. Accepted values are:{@code ALL, ANY, EACH_QUORUM, LOCAL_ONE, LOCAL_QUORUM, LOCAL_SERIAL, ONE, QUORUM, SERIAL, THREE, TWO}.
# cas.ticket.registry.cassandra.serial-consistency-level: LOCAL_SERIAL

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# The request timeout. This defines how long the driver will wait for a given Cassandra node to answer a query.
# cas.ticket.registry.cassandra.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cassandra.ticketregistry.CassandraTicketRegistryProperties
# Module: cas-server-support-cassandra-ticket-registry
# Username to bind and establish a connection to cassandra.
# cas.ticket.registry.cassandra.username: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Whether scheduler should be enabled to schedule the job to run.
# cas.ticket.registry.cleaner.schedule.enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# Overrides {@link SchedulingProperties#enabled} property value of true if this property does not match hostname of CAS server. This can be useful if deploying CAS with an image in a statefulset where all names are predictable but where having different configurations for different servers is hard. The value can be an exact hostname or a regular expression that will be used to match the hostname.
# cas.ticket.registry.cleaner.schedule.enabled-on-host: .*

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a repeat interval of re-loading data for an data store implementation. This is the timeout between consecutive jobâ€™s executions.
# cas.ticket.registry.cleaner.schedule.repeat-interval: PT2M

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.quartz.SchedulingProperties
# Module: cas-server-core-util
# String representation of a start delay of loading data for a data store implementation. This is the delay between scheduler startup and first jobâ€™s execution
# cas.ticket.registry.cleaner.schedule.start-delay: PT15S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Use a local cache to reduce fetches..
# cas.ticket.registry.couch-db.caching: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Remove idle connections from pool.
# cas.ticket.registry.couch-db.cleanup-idle-connections: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# TCP connection timeout.
# cas.ticket.registry.couch-db.connection-timeout: 1000

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Create the database if it doesn't exist.
# cas.ticket.registry.couch-db.create-if-not-exists: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.couch-db.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.couch-db.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.couch-db.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.couch-db.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.couch-db.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.couch-db.crypto.signing.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Database name.
# cas.ticket.registry.couch-db.db-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Use TLS. Only needed if not specified by URL.
# cas.ticket.registry.couch-db.enable-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Max entries in local cache.
# cas.ticket.registry.couch-db.max-cache-entries: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Maximum connections to CouchDB.
# cas.ticket.registry.couch-db.max-connections: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Largest allowable serialized object.
# cas.ticket.registry.couch-db.max-object-size-bytes: 8192

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Password for connection.
# cas.ticket.registry.couch-db.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Proxy host.
# cas.ticket.registry.couch-db.proxy-host: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# proxy port.
# cas.ticket.registry.couch-db.proxy-port: -1

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Relax TLS settingsâ€“like certificate verification.
# cas.ticket.registry.couch-db.relaxed-ssl-settings: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Retries for update conflicts.
# cas.ticket.registry.couch-db.retries: 5

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Socket idle timeout.
# cas.ticket.registry.couch-db.socket-timeout: 10000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Connection url.
# cas.ticket.registry.couch-db.url: http://localhost:5984

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Expect HTTP 100 Continue during connection.
# cas.ticket.registry.couch-db.use-expect-continue: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchdb.ticketregistry.CouchDbTicketRegistryProperties
# Module: cas-server-support-couchdb-ticket-registry
# Username for connection.
# cas.ticket.registry.couch-db.username: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Node addresses.
# cas.ticket.registry.couchbase.addresses: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Bucket name.
# cas.ticket.registry.couchbase.bucket: testbucket

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Cluster password.
# cas.ticket.registry.couchbase.cluster-password: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Cluster username.
# cas.ticket.registry.couchbase.cluster-username: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of connection timeout.
# cas.ticket.registry.couchbase.connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.couchbase.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.couchbase.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.couchbase.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.couchbase.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.couchbase.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.couchbase.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of idle connection timeout.
# cas.ticket.registry.couchbase.idle-connection-timeout: PT60S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of KV timeout.
# cas.ticket.registry.couchbase.kv-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Maximum number of connections made to the cluster.
# cas.ticket.registry.couchbase.max-http-connections: 5

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Allows to customize the maximum number of requests allowed in the retry timer.
# cas.ticket.registry.couchbase.max-num-requests-in-retry: 32768

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Maximum number of parallel threads made for queries.
# cas.ticket.registry.couchbase.max-parallelism: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of query threshold.
# cas.ticket.registry.couchbase.query-threshold: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of query timeout.
# cas.ticket.registry.couchbase.query-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# Query scan consistency. By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called {@code NOT_BOUNDED}). If you need to include everything that has just been written, a different scan consistency must be chosen. If {@code REQUEST_PLUS} is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible. Accepted values are: {@code NOT_BOUNDED, REQUEST_PLUS}.
# cas.ticket.registry.couchbase.scan-consistency: NOT_BOUNDED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of scan timeout.
# cas.ticket.registry.couchbase.scan-wait-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of search timeout.
# cas.ticket.registry.couchbase.search-timeout: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.couchbase.ticketregistry.CouchbaseTicketRegistryProperties
# Module: cas-server-support-couchbase-ticket-registry
# String representation of view timeout.
# cas.ticket.registry.couchbase.view-timeout: PT30S

# Required: false
# Type: org.apereo.cas.configuration.model.support.dynamodb.AbstractDynamoDbProperties$BillingMode
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Billing mode specifies how you are charged for read and write throughput and how you manage capacity.
Available values are as follows:
<ul><li>{@code PROVISIONED}: Provisioned mode means that you specify the number of reads
and writes per second that you expect your
application to use.
Provisioned mode is a good option if any of the following are true:

<ul>
 <li>You have predictable application traffic.</li>
 <li>You run applications whose traffic is consistent or ramps gradually.</li>
 <li>You can forecast capacity requirements to control costs.</li>
</ul>
You can use auto scaling to automatically adjust
capacity based on the specified utilization rate
to ensure application performance while reducing costs.</li><li>{@code PAY_PER_REQUEST}: Pay-per-request or on-demand billing means that you're charged for only the read/write
requests that you use.
On-demand mode is a good option if any of the following are true:
<ul>
    <li>You create new tables with unknown workloads.</li>
    <li>You have unpredictable application traffic.</li>
    <li>You prefer the ease of paying for only what you use.</li>
</ul>
Tables using on-demand mode support all DynamoDB
features (such as encryption at rest, point-in-time recovery, global
tables, and so on) with the exception of auto scaling,
which is not applicable with this mode.</li></ul>
# cas.ticket.registry.dynamo-db.billing-mode: PROVISIONED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Client execution timeout.
# cas.ticket.registry.dynamo-db.client-execution-timeout: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Connection timeout.
# cas.ticket.registry.dynamo-db.connection-timeout: 5000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Use access-key provided by AWS to authenticate.
# cas.ticket.registry.dynamo-db.credential-access-key: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Use secret key provided by AWS to authenticate.
# cas.ticket.registry.dynamo-db.credential-secret-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.dynamo-db.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.dynamo-db.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.dynamo-db.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.dynamo-db.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.dynamo-db.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.dynamo-db.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Flag that indicates whether to drop tables on start up.
# cas.ticket.registry.dynamo-db.drop-tables-on-startup: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# AWS custom endpoint.
# cas.ticket.registry.dynamo-db.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Local address.
# cas.ticket.registry.dynamo-db.local-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Indicates that the database instance is local to the deployment that does not require or use any credentials or other configuration other than host and region. This is mostly used during development and testing.
# cas.ticket.registry.dynamo-db.local-instance: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Maximum connections setting.
# cas.ticket.registry.dynamo-db.max-connections: 10

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Flag that indicates whether to prevent CAS from creating tables.
# cas.ticket.registry.dynamo-db.prevent-table-creation-on-startup: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Profile name to use.
# cas.ticket.registry.dynamo-db.profile-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Profile path.
# cas.ticket.registry.dynamo-db.profile-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# The table name used and created by CAS to hold proxy ticket granting tickets in DynamoDb.
# cas.ticket.registry.dynamo-db.proxy-granting-tickets-table-name: proxyGrantingTicketsTable

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Optionally specifies the proxy host to connect through.
# cas.ticket.registry.dynamo-db.proxy-host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Optionally specifies the proxy password to connect through.
# cas.ticket.registry.dynamo-db.proxy-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# The table name used and created by CAS to hold proxy tickets in DynamoDb.
# cas.ticket.registry.dynamo-db.proxy-tickets-table-name: proxyTicketsTable

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Optionally specifies the proxy username to connect through.
# cas.ticket.registry.dynamo-db.proxy-username: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Read capacity.
# cas.ticket.registry.dynamo-db.read-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# AWS region used.
# cas.ticket.registry.dynamo-db.region: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Outline the requested retry mode. Accepted values are {@code STANDARD, LEGACY}.
# cas.ticket.registry.dynamo-db.retry-mode: STANDARD

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# The table name used and created by CAS to hold service tickets in DynamoDb.
# cas.ticket.registry.dynamo-db.service-tickets-table-name: serviceTicketsTable

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Socket timeout.
# cas.ticket.registry.dynamo-db.socket-timeout: 5000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# The table name used and created by CAS to hold ticket granting tickets in DynamoDb.
# cas.ticket.registry.dynamo-db.ticket-granting-tickets-table-name: ticketGrantingTicketsTable

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Time offset.
# cas.ticket.registry.dynamo-db.time-offset: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# The table name used and created by CAS to hold transient session ticket tickets in DynamoDb.
# cas.ticket.registry.dynamo-db.transient-session-tickets-table-name: transientSessionTicketsTable

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Flag that indicates whether to use reaper.
# cas.ticket.registry.dynamo-db.use-reaper: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.dynamodb.DynamoDbTicketRegistryProperties
# Module: cas-server-support-dynamodb-ticket-registry
# Write capacity.
# cas.ticket.registry.dynamo-db.write-capacity: 10

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# The name of the cache manager instance. @deprecated Since 6.2
# cas.ticket.registry.ehcache.cache-manager-name: ticketRegistryCacheManager
# Deprecation Level: ERROR

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml". Default is "ehcache.xml" in the root of the class path, or if not found, "ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization). @deprecated Since 6.2
# cas.ticket.registry.ehcache.config-location: 
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.ehcache.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.ehcache.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.ehcache.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.ehcache.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.ehcache.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.ehcache.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# The interval in seconds between runs of the disk expiry thread. @deprecated Since 6.2
# cas.ticket.registry.ehcache.disk-expiry-thread-interval-seconds: 0
# Deprecation Level: ERROR

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Enabled allows this registry to be disabled on startup (so registry choice can be made at runtime). @deprecated Since 6.2
# cas.ticket.registry.ehcache.enabled: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Sets whether elements are eternal. If eternal, timeouts are ignored and the element is never expired. False by default. @deprecated Since 6.2
# cas.ticket.registry.ehcache.eternal: false
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether to load the cache bootstrapper asynchronously. @deprecated Since 6.2
# cas.ticket.registry.ehcache.loader-async: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# The maximum serialized size of the elements to request from a remote cache peer during bootstrap. @deprecated Since 6.2
# cas.ticket.registry.ehcache.max-chunk-size: 5000000
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Builder which sets the maximum number entries in cache. @deprecated Since 6.2
# cas.ticket.registry.ehcache.max-elements-in-cache: 0
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Builder that sets the maximum objects to be held in memory (0 = no limit). @deprecated Since 6.2
# cas.ticket.registry.ehcache.max-elements-in-memory: 10000
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Builder which sets the maximum number elements on Disk. 0 means unlimited. @deprecated Since 6.2
# cas.ticket.registry.ehcache.max-elements-on-disk: 0
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Maximum batch size for replication ops. @deprecated Since 6.2
# cas.ticket.registry.ehcache.maximum-batch-size: 100
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Builder which Sets the eviction policy. An invalid argument will set it to null. <ul> <li>LRU - least recently used</li> <li>LFU - least frequently used</li> <li>FIFO - first in first out, the oldest element by creation time</li> </ul> @deprecated Since 6.2
# cas.ticket.registry.ehcache.memory-store-eviction-policy: LRU
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Sets the persistence strategy. Acceptable values are: <ul> <li>LOCALTEMPSWAP: Standard open source (non fault-tolerant) on-disk persistence.</li> <li>DISTRIBUTED: Terracotta clustered persistence (requires a Terracotta clustered cache)</li> <li>LOCALRESTARTABLE: Enterprise fault tolerant persistence</li> <li>NONE: No persistence</li> </ul> @deprecated Since 6.2
# cas.ticket.registry.ehcache.persistence: NONE
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether to replicate puts. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replicate-puts: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether a put should replicated by copy or by invalidation, (a remove). By copy is best when the entry is expensive to produce. By invalidation is best when we are really trying to force other caches to sync back to a canonical source like a database. An example of a latter usage would be a read/write cache being used in Hibernate. This setting only has effect if #replicateUpdates is true. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replicate-puts-via-copy: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether to replicate removes. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replicate-removals: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether to replicate updates. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replicate-updates: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Whether an update (a put) should be by copy or by invalidation, (a remove). By copy is best when the entry is expensive to produce. By invalidation is best when we are really trying to force other caches to sync back to a canonical source like a database. An example of a latter usage would be a read/write cache being used in Hibernate. This setting only has effect if #replicateUpdates is true. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replicate-updates-via-copy: true
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# The replication interval in milliseconds for the cache replicator. @deprecated Since 6.2
# cas.ticket.registry.ehcache.replication-interval: PT10S
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Set whether the EhCache CacheManager should be shared (as a singleton at the ClassLoader level) or independent (typically local within the application). Default is "false", creating an independent local instance. NOTE: This feature allows for sharing this EhCacheManagerFactoryBean's CacheManager with any code calling CacheManager.create() in the same ClassLoader space, with no need to agree on a specific CacheManager name. However, it only supports a single EhCacheManagerFactoryBean involved which will control the lifecycle of the underlying CacheManager (in particular, its shutdown). @deprecated Since 6.2
# cas.ticket.registry.ehcache.shared: false
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Sets the persistence write mode. @deprecated Since 6.2
# cas.ticket.registry.ehcache.synchronous-writes: false
# Deprecation Level: ERROR

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.ehcache.EhcacheProperties
# Module: cas-server-support-ehcache-ticket-registry
# Allows system properties to be set prior to ehcache.xml parsing. EhCache will interpolate system properties in the ehcache xml config file e.g. ${ehCacheMulticastAddress}. @deprecated Since 6.2
# cas.ticket.registry.ehcache.system-props: 
# Deprecation Level: ERROR

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Timeout when connecting to Terracotta cluster.
# cas.ticket.registry.ehcache3.cluster-connection-timeout: 150

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Timeout when reading or writing to/from Terracotta cluster.
# cas.ticket.registry.ehcache3.cluster-read-write-timeout: 5

# Required: false
# Type: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties$Consistency
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Cluster consistency may be STRONG or EVENTUAL.
Available values are as follows:
<ul><li>{@code EVENTUAL}: Indicates that the visibility of mutative operations is not guaranteed on operation completion.</li><li>{@code STRONG}: Indicates that the visibility of mutative operations is guaranteed on operation completion.</li></ul>
# cas.ticket.registry.ehcache3.clustered-cache-consistency: STRONG

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.ehcache3.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.ehcache3.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.ehcache3.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.ehcache3.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.ehcache3.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.ehcache3.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Name of default server resource on Terracotta cluster.
# cas.ticket.registry.ehcache3.default-server-resource: main

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Sets whether JMX management beans are enabled for all caches.
# cas.ticket.registry.ehcache3.enable-management: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Sets whether statistics are enabled for all caches.
# cas.ticket.registry.ehcache3.enable-statistics: true

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Enabled allows this registry to be disabled on startup (so registry choice can be made at runtime).
# cas.ticket.registry.ehcache3.enabled: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Sets whether elements are eternal. If eternal, timeouts are ignored and the element is never expired. False by default. Functionality brought over from Ehcache 2, document use case.
# cas.ticket.registry.ehcache3.eternal: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Builder that sets the maximum objects to be held in memory (0 = no limit).
# cas.ticket.registry.ehcache3.max-elements-in-memory: 10000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Per cache size of disk cache.
# cas.ticket.registry.ehcache3.per-cache-size-on-disk: 20MB

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Persist data on disk when jvm is shut down if not using terracotta cluster.
# cas.ticket.registry.ehcache3.persist-on-disk: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Name of resource pool to use on Terracotta cluster.
# cas.ticket.registry.ehcache3.resource-pool-name: cas-ticket-pool

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Size of resource pool on terracotta cluster.
# cas.ticket.registry.ehcache3.resource-pool-size: 15MB

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# Root directory to store data if not using terracotta cluster.
# cas.ticket.registry.ehcache3.root-directory: /tmp/cas/ehcache3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ehcache.Ehcache3Properties
# Module: cas-server-support-ehcache3-ticket-registry
# URI in format something like "terracotta://host1.company.org:9410,host2.company.org:9410/cas-application". Default port for terracotta (9410) is used if not specified in URI.
# cas.ticket.registry.ehcache3.terracotta-cluster-uri: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports both synchronous and asynchronous backups. By default, backup operations are synchronous. In this case, backup operations block operations until backups are successfully copied to backup members (or deleted from backup members in case of remove) and acknowledgements are received. Therefore, backups are updated before a put operation is completed, provided that the cluster is stable. Asynchronous backups, on the other hand, do not block operations. They are fire and forget and do not require acknowledgements; the backup operations are performed at some point in time.
# cas.ticket.registry.hazelcast.cluster.core.async-backup-count: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Used when replication is turned on with {@link #isReplicated()}. <p> If a new member joins the cluster, there are two ways you can handle the initial provisioning that is executed to replicate all existing values to the new member. Each involves how you configure the async fill up. <ul> <li>First, you can configure async fill up to true, which does not block reads while the fill up operation is underway. That way, you have immediate access on the new member, but it will take time until all the values are eventually accessible. Not yet replicated values are returned as non-existing (null). </li> <li>Second, you can configure for a synchronous initial fill up (by configuring the async fill up to false), which blocks every read or write access to the map until the fill up operation is finished. Use this with caution since it might block your application from operating.</li> </ul>
# cas.ticket.registry.hazelcast.cluster.core.async-fillup: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# To provide data safety, Hazelcast allows you to specify the number of backup copies you want to have. That way, data on a cluster member will be copied onto other member(s). To create synchronous backups, select the number of backup copies. When this count is 1, a map entry will have its backup on one other member in the cluster. If you set it to 2, then a map entry will have its backup on two other members. You can set it to 0 if you do not want your entries to be backed up, e.g., if performance is more important than backing up. The maximum value for the backup count is 6. Sync backup operations have a blocking cost which may lead to latency issues.
# cas.ticket.registry.hazelcast.cluster.core.backup-count: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. Its data structures are CP with respect to the CAP principle, i.e., they always maintain linearizability and prefer consistency over availability during network partitions. Besides network partitions, CP Subsystem withstands server and client failures. All members of a Hazelcast cluster do not necessarily take part in CP Subsystem. The number of Hazelcast members that take part in CP Subsystem is specified here. CP Subsystem must have at least 3 CP members.
# cas.ticket.registry.hazelcast.cluster.core.cp-member-count: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast supports policy-based eviction for distributed maps. Currently supported policies are LRU (Least Recently Used) and LFU (Least Frequently Used) and NONE. See <a href="http://docs.hazelcast.org/docs/latest-development/manual/html/Distributed_Data_Structures/Map/Map_Eviction.html">this</a> for more info.
# cas.ticket.registry.hazelcast.cluster.core.eviction-policy: LRU

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# The instance name.
# cas.ticket.registry.hazelcast.cluster.core.instance-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast has a flexible logging configuration and doesn't depend on any logging framework except JDK logging. It has in-built adaptors for a number of logging frameworks and also supports custom loggers by providing logging interfaces. To use built-in adaptors you should set this setting to one of predefined types below. <ul> <li>{@code jdk}: JDK logging</li> <li>{@code log4j}: Log4j</li> <li>{@code slf4j}: Slf4j</li> <li>{@code none}: Disable logging</li> </ul>
# cas.ticket.registry.hazelcast.cluster.core.logging-type: slf4j

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Define how data items in Hazelcast maps are merged together from source to destination. By default, merges map entries from source to destination if they don't exist in the destination map. Accepted values are: <ul>     <li>{@code PUT_IF_ABSENT}: Merges data structure entries from source to destination if they don't exist in the destination data structure.</li>     <li>{@code HIGHER_HITS}:  * Merges data structure entries from source to destination data structure if the source entry     has more hits than the destination one.</li>     <li>{@code DISCARD}: Merges only entries from the destination data structure and discards all entries from the source data structure. </li>     <li>{@code PASS_THROUGH}: Merges data structure entries from source to destination directly unless the merging entry is null</li>     <li>{@code EXPIRATION_TIME}: Merges data structure entries from source to destination data structure if the source entry     will expire later than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_UPDATE}:  Merges data structure entries from source to destination data structure if the source entry was     updated more frequently than the destination entry. This policy can only be used if the clocks of the nodes are in sync. </li>     <li>{@code LATEST_ACCESS}: Merges data structure entries from source to destination data structure if the source entry     has been accessed more recently than the destination entry. This policy can only be used if the clocks of the nodes are in sync.</li> </ul>
# cas.ticket.registry.hazelcast.cluster.core.map-merge-policy: PUT_IF_ABSENT

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Max timeout of heartbeat in seconds for a node to assume it is dead.
# cas.ticket.registry.hazelcast.cluster.core.max-no-heartbeat-seconds: 300

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the maximum size of the map.
# cas.ticket.registry.hazelcast.cluster.core.max-size: 85

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# <ul> <li>{@code FREE_HEAP_PERCENTAGE}: Policy based on minimum free JVM heap memory percentage per JVM.</li> <li>{@code FREE_HEAP_SIZE}: Policy based on minimum free JVM heap memory in megabytes per JVM.</li> <li>{@code FREE_NATIVE_MEMORY_PERCENTAGE}: Policy based on minimum free native memory percentage per Hazelcast instance.</li> <li>{@code FREE_NATIVE_MEMORY_SIZE}: Policy based on minimum free native memory in megabytes per Hazelcast instance.</li> <li>{@code PER_NODE}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code PER_PARTITION}: Policy based on maximum number of entries stored per data structure (map, cache etc) on each partition.</li> <li>{@code USED_HEAP_PERCENTAGE}: Policy based on maximum used JVM heap memory percentage per data structure (map, cache etc) on each Hazelcast instance .</li> <li>{@code USED_HEAP_SIZE}: Policy based on maximum used JVM heap memory in megabytes per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_PERCENTAGE}: Policy based on maximum used native memory percentage per data structure (map, cache etc) on each Hazelcast instance.</li> <li>{@code USED_NATIVE_MEMORY_SIZE}: Policy based on maximum used native memory in megabytes per data structure (map, cache etc) on each Hazelcast instance .</li> </ul>
# cas.ticket.registry.hazelcast.cluster.core.max-size-policy: USED_HEAP_PERCENTAGE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# With {@code PartitionGroupConfig}, you can control how primary and backup partitions are mapped to physical Members. Hazelcast will always place partitions on different partition groups so as to provide redundancy. Accepted value are: {@code PER_MEMBER, HOST_AWARE, CUSTOM, ZONE_AWARE, SPI}. In all cases a partition will never be created on the same group. If there are more partitions defined than there are partition groups, then only those partitions, up to the number of partition groups, will be created. For example, if you define 2 backups, then with the primary, that makes 3. If you have only two partition groups only two will be created. <ul> <li>{@code}PER_MEMBER Partition Groups}: This is the default partition scheme and is used if no other scheme is defined. Each Member is in a group of its own.</li> <li>{@code}HOST_AWARE Partition Groups}: In this scheme, a group corresponds to a host, based on its IP address. Partitions will not be written to any other members on the same host. This scheme provides good redundancy when multiple instances are being run on the same host.</li> <li>{@code}CUSTOM Partition Groups}: In this scheme, IP addresses, or IP address ranges, are allocated to groups. Partitions are not written to the same group. This is very useful for ensuring partitions are written to different racks or even availability zones.</li> <li>{@code}ZONE_AWARE Partition Groups}: In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group. This is very useful for ensuring partitions are written to availability zones or different racks without providing the IP addresses to the config ahead.</li> <li>{@code}SPI Partition Groups}:  In this scheme, groups are allocated according to the implementation provided by Discovery SPI.</li> </ul>
# cas.ticket.registry.hazelcast.cluster.core.partition-member-group-type: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# A Replicated Map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high speed access. A Replicated Map does not partition data (it does not spread data to different cluster members); instead, it replicates the data to all members. Replication leads to higher memory consumption. However, a Replicated Map has faster read and write access since the data is available on all members. Writes could take place on local/remote members in order to provide write-order, eventually being replicated to all other members. <br><p> If you have a large cluster or very high occurrences of updates, the Replicated Map may not scale linearly as expected since it has to replicate update operations to all members in the cluster. Since the replication of updates is performed in an asynchronous manner, Hazelcast recommends you enable back pressure in case your system has high occurrences of updates. Note that Replicated Map does not guarantee eventual consistency because there are some edge cases that fail to provide consistency. <br><p> Replicated Map uses the internal partition system of Hazelcast in order to serialize updates happening on the same key at the same time. This happens by sending updates of the same key to the same Hazelcast member in the cluster. <br><p> Due to the asynchronous nature of replication, a Hazelcast member could die before successfully replicating a "write" operation to other members after sending the "write completed" response to its caller during the write process. In this scenario, Hazelcastâ€™s internal partition system promotes one of the replicas of the partition as the primary one. The new primary partition does not have the latest "write" since the dead member could not successfully replicate the update.
# cas.ticket.registry.hazelcast.cluster.core.replicated: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreClusterProperties
# Module: cas-server-support-hazelcast-core
# Connection timeout in seconds for the TCP/IP config and members joining the cluster.
# cas.ticket.registry.hazelcast.cluster.core.timeout: 5

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS access key.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.access-key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# The maximum amount of time Hazelcast will try to connect to a well known member before giving up. Setting this value too low could mean that a member is not able to connect to a cluster. Setting the value too high means that member startup could slow down because of longer timeouts (for example, when a well known member is not up). Increasing this value is recommended if you have many IPs listed and the members cannot properly build up the cluster. Its default value is 5.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.connection-timeout-seconds: 5

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Host header. i.e. {@code ec2.amazonaws.com}. The URL that is the entry point for a web service.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.host-header: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If you do not want to use access key and secret key, you can specify iam-role. Hazelcast fetches your credentials by using your IAM role. This setting only affects deployments on Amazon EC2. If you are deploying CAS in an Amazon ECS environment, the role should not be specified. The role is fetched from the task definition that is assigned to run CAS.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.iam-role: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# Hazelcast port. Typically may be set to {@code 5701}. You can set searching for other ports rather than 5701 if you've members on different ports.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS region. i.e. {@code us-east-1}. The region where your members are running.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.region: us-east-1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# AWS secret key.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.secret-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a security group is configured, only instances within that security group are selected.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.security-group-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.tag-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAwsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-aws
# If a tag key/value is set, only instances with that tag key/value will be selected.
# cas.ticket.registry.hazelcast.cluster.discovery.aws.tag-value: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client ID.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.client-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory Service Principal client secret.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.client-secret: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The name of the tag on the hazelcast vm resources. With every Hazelcast Virtual Machine you deploy in your resource group, you need to ensure that each VM is tagged with the value of cluster-id defined in your Hazelcast configuration. The only requirement is that every VM can access each other either by private or public IP address.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.cluster-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure resource group name of the cluster. You can find this in the Azure portal or CLI.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.group-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure subscription ID.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.subscription-id: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastAzureDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-azure
# The Azure Active Directory tenant ID.
# cas.ticket.registry.hazelcast.cluster.discovery.azure.tenant-id: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.dns-provider.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma separated list of docker services and associated ports to be considered peers of this service. Note, this must include itself (the definition of serviceName and servicePort) if the service is to cluster with other instances of this service.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.dns-provider.peer-services: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Name of the docker service that this instance is running in.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.dns-provider.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.DnsRProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Internal port that hazelcast is listening on.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.dns-provider.service-port: 5701

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of Docker network names to discover matching services on.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-network-names: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service label=values to find tasks/containers on the networks.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-service-labels: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Comma delimited list of relevant Docker service names to find tasks/containers on the networks.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.docker-service-names: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Enable provider.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.enabled: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# The raw port that hazelcast is listening on. IMPORTANT: This is NOT a docker "published" port, nor is it necessarily a EXPOSEd port. It is the hazelcast port that the service is configured with, this must be the same for all matched containers in order to work, and just using the default of 5701 is the simplest way to go.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.hazelcast-peer-port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# If Swarm Mgr URI is SSL, to enable skip-verify for it.
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.skip-verify-ssl: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDockerSwarmDiscoveryProperties.MemberAddressProvider
# Module: cas-server-support-hazelcast-discovery-swarm
# Swarm Manager URI (overrides DOCKER_HOST).
# cas.ticket.registry.hazelcast.cluster.discovery.docker-swarm.member-provider.swarm-mgr-uri: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastDiscoveryProperties
# Module: cas-server-support-hazelcast-core
# Whether discovery should be enabled via the configured strategies below.
# cas.ticket.registry.hazelcast.cluster.discovery.enabled: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider credential, can be thought of as a password for cloud services.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.credential: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for cloud providers which require an extra JSON or P12 key file. This denotes the path of that file. Only tested with Google Compute Engine. (Required if Google Compute Engine is used.)
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.credential-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines the endpoint for a generic API such as OpenStack or CloudStack (optional).
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.endpoint: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters instance groups (optional). When used with AWS it maps to security group.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.group: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Cloud Provider identity, can be thought of as a user name for cloud services.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.identity: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Port which the hazelcast instance service uses on the cluster member. Default value is 5701. (optional)
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.port: -1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# String value that is used to identify ComputeService provider. For example, "google-compute-engine" is used for Google Cloud services. See <a href="https://jclouds.apache.org/reference/providers/#compute">here</a> for more info.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.provider: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines region for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.regions: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Used for IAM role support specific to AWS (optional, but if defined, no identity or credential should be defined in the configuration).
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.role-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional). Can be used with comma separated values for multiple values.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.tag-keys: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Filters cloud instances with tags (optional) Can be used with comma separated values for multiple values.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.tag-values: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastJCloudsDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-jclouds
# Defines zone for a cloud service (optional). Can be used with comma separated values for multiple values.
# cas.ticket.registry.hazelcast.cluster.discovery.jclouds.zones: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the number of retries to Kubernetes API. Defaults to: 3.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.api-retries: 3

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an oauth token for the kubernetes client to access the kubernetes REST API. Defaults to reading the token from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/token}.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.api-token: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# CA Authority certificate from Kubernetes Master. Defaults to reading the certificate from the auto-injected file at: {@code /var/run/secrets/kubernetes.io/serviceaccount/ca.crt}.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.ca-certificate: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines an alternative address for the kubernetes master. Defaults to: {@code https://kubernetes.default.svc}
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.kubernetes-master: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the namespace of the application POD through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.namespace: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label to lookup through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.pod-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the pod label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.pod-label-value: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if not ready addresses should be evaluated to be discovered on startup.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.resolve-not-ready-addresses: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup domain. This is defined as something similar to {@code my-svc.my-namespace.svc.cluster.local}.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-dns: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the DNS service lookup timeout in seconds. Defaults to 5 secs.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-dns-timeout: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label to lookup through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-label-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service label value to lookup through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-label-value: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines the service name of the POD to lookup through the Service Discovery REST API of Kubernetes.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-name: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# If specified with a value greater than 0, its value defines the endpoint port of the service (overriding the default).
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.service-port: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.discovery.HazelcastKubernetesDiscoveryProperties
# Module: cas-server-support-hazelcast-discovery-kubernetes
# Defines if the node name should be used as external address, instead of looking up the external IP using the {@code /nodes} resource. Default is false.
# cas.ticket.registry.hazelcast.cluster.discovery.kubernetes.use-node-name-as-external-address: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Enables a multicast configuration using a group address and port. Contains the configuration for the multicast discovery mechanism. With the multicast discovery mechanism Hazelcast allows Hazelcast members to find each other using multicast. So Hazelcast members do not need to know concrete addresses of members, they just multicast to everyone listening. It depends on your environment if multicast is possible or allowed; otherwise you need to have a look at the tcp/ip cluster
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast group address used for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.group: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# The multicast port used for discovery.
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.port: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Gets the time to live for the multicast package in seconds. This is the default time-to-live for multicast packets sent out on the socket
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.time-to-live: 32

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# specifies the time in seconds that a member should wait for a valid multicast response from another member running in the network before declaring itself the leader member (the first member joined to the cluster) and creating its own cluster. This only applies to the startup of members where no leader has been assigned yet. If you specify a high value, such as 60 seconds, it means that until a leader is selected, each member will wait 60 seconds before moving on. Be careful when providing a high value. Also, be careful not to set the value too low, or the members might give up too early and create their own cluster.
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.timeout: 2

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastClusterMulticastProperties
# Module: cas-server-support-hazelcast-core
# Multicast trusted interfaces for discovery. With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, as they just multicast to all the other members for listening. Whether multicast is possible or allowed depends on your environment.
# cas.ticket.registry.hazelcast.cluster.discovery.multicast.trusted-interfaces: 

# Required: false
# Type: java.lang.String
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.instance-name: 
# Deprecation Level: ERROR
# Deprecation Reason: instance-name setting is now moved into the network namespace.
# Deprecation Replacement: cas.ticket.registry.hazelcast.cluster.network.instance-name

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.max-heap-size-percentage: 
# Deprecation Level: ERROR
# Deprecation Reason: Property renamed to new&quot;cas.ticket.registry.hazelcast.cluster.max-size.
# Deprecation Replacement: cas.ticket.registry.hazelcast.cluster.max-size

# Required: false
# Type: java.util.List
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.members: 
# Deprecation Level: ERROR
# Deprecation Reason: members setting is now moved into the network namespace.
# Deprecation Replacement: cas.ticket.registry.hazelcast.cluster.network.members

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# IPv6 support has been switched off by default, since some platforms have issues in use of IPv6 stack. And some other platforms such as Amazon AWS have no support at all. To enable IPv6 support set this setting to false.
# cas.ticket.registry.hazelcast.cluster.network.ipv4-enabled: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# If this property is set, then this is the address where the server socket is bound to.
# cas.ticket.registry.hazelcast.cluster.network.local-address: 

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the well known members. If members is empty, calling this method will have the same effect as calling clear(). A member can be a comma separated string, e..g '10.11.12.1,10.11.12.2' which indicates multiple members are going to be added.
# cas.ticket.registry.hazelcast.cluster.network.members: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify which network interfaces that Hazelcast should use. Servers mostly have more than one network interface, so you may want to list the valid IPs. Range characters ('*' and '-') can be used for simplicity. For instance, 10.3.10.* refers to IPs between 10.3.10.0 and 10.3.10.255. Interface 10.3.10.4-18 refers to IPs between 10.3.10.4 and 10.3.10.18 (4 and 18 included). If network interface configuration is enabled (it is disabled by default) and if Hazelcast cannot find an matching interface, then it will print a message on the console and will not start on that node. Interfaces can be separated by a comma.
# cas.ticket.registry.hazelcast.cluster.network.network-interfaces: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The outbound ports for the Hazelcast configuration.
# cas.ticket.registry.hazelcast.cluster.network.outbound-ports: 

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You can specify the ports which Hazelcast will use to communicate between cluster members. The name of the parameter for this is port and its default value is 5701. By default, Hazelcast will try 100 ports to bind. Meaning that, if you set the value of port as 5701, as members are joining to the cluster, Hazelcast tries to find ports between 5701 and 5801.
# cas.ticket.registry.hazelcast.cluster.network.port: 5701

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# You may also want to choose to use only one port. In that case, you can disable the auto-increment feature of port.
# cas.ticket.registry.hazelcast.cluster.network.port-auto-increment: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# The default public address to be advertised to other cluster members and clients.
# cas.ticket.registry.hazelcast.cluster.network.public-address: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastNetworkClusterProperties
# Module: cas-server-support-hazelcast-core
# Enable TCP/IP config. Contains the configuration for the Tcp/Ip join mechanism. The Tcp/Ip join mechanism relies on one or more well known members. So when a new member wants to join a cluster, it will try to connect to one of the well known members. If it is able to connect, it will now about all members in the cluster and doesn't rely on these well known members anymore.
# cas.ticket.registry.hazelcast.cluster.network.tcpip-enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.port: 
# Deprecation Level: ERROR
# Deprecation Reason: port setting is now moved into the network namespace.
# Deprecation Replacement: cas.ticket.registry.hazelcast.cluster.network.port

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.port-auto-increment: 
# Deprecation Level: ERROR
# Deprecation Reason: port-auto-increment setting is now moved into the network namespace.
# Deprecation Replacement: cas.ticket.registry.hazelcast.cluster.network.port-auto-increment

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Whether WAN should be enabled.
# cas.ticket.registry.hazelcast.cluster.wan-replication.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# Name of this replication group.
# cas.ticket.registry.hazelcast.cluster.wan-replication.replication-name: apereo-cas

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationProperties
# Module: cas-server-support-hazelcast-core
# List of target clusters to be used for synchronization and replication.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets: 

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[0].group-name: 
# Deprecation Level: ERROR
# Deprecation Reason: Property is removed in Hazelcast 4

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
    <li>{@code ACK_ON_RECEIPT}: ACK after WAN operation is received by the target cluster (without waiting the result of actual operation invocation).</li>
    <li>{@code ACK_ON_OPERATION_COMPLETE}: Wait till the operation is complete on target cluster.</li>
</ul>
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].acknowledge-type: ACK_ON_OPERATION_COMPLETE

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum amount of time, in milliseconds, to be waited before
sending a batch of events in case batch.size is not reached.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].batch-maximum-delay-milliseconds: 1000

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Maximum size of events that are sent to the target cluster in a single batch.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].batch-size: 500

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Sets the cluster name used as an endpoint group password for authentication
on the target endpoint.
If there is no separate publisher ID property defined, this cluster name
will also be used as a WAN publisher ID. This ID is then used for
identifying the publisher.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].cluster-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Strategy for checking the consistency of data between replicas.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].consistency-check-strategy: NONE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Comma separated list of endpoints in this replication group.
IP addresses and ports of the cluster members for which the WAN replication is implemented. These endpoints are not necessarily
the entire target cluster and WAN does not perform the discovery of other members in the target cluster. It only expects
that these IP addresses (or at least some of them) are available.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].endpoints: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The number of threads that the replication executor will have. The executor is used to send WAN
events to the endpoints and ideally you want to have one thread per endpoint. If this property is omitted
and you have specified the endpoints property, this will be the case. If necessary you can manually define
the number of threads that the executor will use. Once the executor has been initialized there is thread
affinity between the discovered endpoints and the executor threads - all events for a single endpoint will
go through a single executor thread, preserving event order. It is important to determine which number of
executor threads is a good value. Failure to do so can lead to performance issues - either contention on a
too small number of threads or wasted threads that will not be performing any work.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].executor-thread-count: 2

# Required: false
# Type: java.util.Map<String,Comparable>
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# The WAN publisher properties.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].properties: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Publisher class name for WAN replication.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].publisher-class-name: com.hazelcast.enterprise.wan.replication.WanBatchReplication

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Returns the publisher ID used for identifying the publisher.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].publisher-id: 

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# For huge clusters or high data mutation rates, you might need to increase the replication queue size.
The default queue size for replication queues is 10,000. This means, if you have heavy put/update/remove
rates, you might exceed the queue size so that the oldest, not yet replicated, updates might get
lost.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].queue-capacity: 10_000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Accepted values are:
<ul>
<li>{@code THROW_EXCEPTION}: Instruct WAN replication implementation to throw an exception and doesn't allow further processing.</li>
<li>{@code DISCARD_AFTER_MUTATION}: Instruct WAN replication implementation to drop new events when WAN event queues are full.</li>
<li>{@code THROW_EXCEPTION_ONLY_IF_REPLICATION_ACTIVE}: Similar to {@code THROW_EXCEPTION} but only throws exception when WAN replication is active.
* Discards the new events if WAN replication is stopped.</li>
</ul>
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].queue-full-behavior: THROW_EXCEPTION

# Required: false
# Type: int
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# Time, in milliseconds, to be waited for the acknowledgment of a sent WAN event to target cluster.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].response-timeout-milliseconds: 60_000

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastWANReplicationTargetClusterProperties
# Module: cas-server-support-hazelcast-core
# When set to true, only the latest events (based on key) are selected and sent in a batch.
# cas.ticket.registry.hazelcast.cluster.wan-replication.targets[].snapshot-enabled: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables compression when default java serialization is used.
# cas.ticket.registry.hazelcast.core.enable-compression: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Enables scripting from Management Center.
# cas.ticket.registry.hazelcast.core.enable-management-center-scripting: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastCoreProperties
# Module: cas-server-support-hazelcast-core
# Hazelcast enterprise license key.
# cas.ticket.registry.hazelcast.core.license-key: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.hazelcast.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.hazelcast.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.hazelcast.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.hazelcast.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.hazelcast.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.hazelcast.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.hazelcast.HazelcastTicketRegistryProperties
# Module: cas-server-support-hazelcast-ticket-registry
# Page size is used by a special Predicate which helps to get a page-by-page result of a query.
# cas.ticket.registry.hazelcast.page-size: 500

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets timeout for receiving acknowledgement for sent message. If acknowledgement is not received within this timeout, sending is considered as failed and SPI tries to repeat message sending.
# cas.ticket.registry.ignite.ack-timeout: PT2S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Start in client mode. If true the local node is started as a client.
# cas.ticket.registry.ignite.client-mode: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.ignite.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.ignite.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.ignite.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.ignite.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.ignite.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.ignite.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Ignite native persistence is a distributed ACID and SQL-compliant disk store that transparently integrates with Ignite's durable memory. Ignite persistence is optional and can be turned on and off. When turned off Ignite becomes a pure in-memory store. With the native persistence enabled, Ignite always stores a superset of data on disk, and as much as it can in RAM based on the capacity of the latter. For example, if there are 100 entries and RAM has the capacity to store only 20, then all 100 will be stored on disk and only 20 will be cached in RAM for better performance. Also, it is worth mentioning that as with a pure in-memory use case, when the persistence is turned on, every individual cluster node persists only a subset of the data, only including partitions for which the node is either primary or backup. Collectively, the whole cluster contains the full data set.
# cas.ticket.registry.ignite.default-persistence-enabled: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# By default, Ignite nodes consume up to 20% of the RAM available locally, and in most cases, â€‹this is the only parameter you might need to change. Using the below setting allows you to change the default region memory size.
# cas.ticket.registry.ignite.default-region-max-size: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets force server mode flag. If true {@code TcpDiscoverySpi} is started in server mode regardless of {@code IgniteConfiguration.isClientMode()}.
# cas.ticket.registry.ignite.force-server-mode: false

# Required: true
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Used by {@code TcpDiscoveryVmIpFinder} which is an IP Finder which works only with pre-configured list of IP addresses specified via this setting. By default, this IP finder is not shared, which means that all grid nodes have to be configured with the same list of IP addresses when this IP finder is used. Parses provided values and initializes the internal collection of addresses. Addresses may be represented as follows: <ul> <li>IP address (e.g. 127.0.0.1, 9.9.9.9, etc);</li> <li>IP address and port (e.g. 127.0.0.1:47500, 9.9.9.9:47501, etc);</li> <li>IP address and port range (e.g. 127.0.0.1:47500..47510, 9.9.9.9:47501..47504, etc);</li> <li>Hostname (e.g. host1.com, host2, etc);</li> <li>Hostname and port (e.g. host1.com:47500, host2:47502, etc).</li> <li>Hostname and port range (e.g. host1.com:47500..47510, host2:47502..47508, etc).</li> </ul> If port is 0 or not provided then default port will be used (depends on discovery SPI configuration). If port range is provided (e.g. host:port1..port2) the following should be considered: <ul> <li>port1 &lt; port2 should be true;</li> <li>Both port1 and port2 should be greater than 0.</li> </ul>
# cas.ticket.registry.ignite.ignite-address: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets join timeout. If non-shared IP finder is used and node fails to connect to any address from IP finder, node keeps trying to join within this timeout. If all addresses are still unresponsive, exception is thrown and node startup fails.
# cas.ticket.registry.ignite.join-timeout: PT1S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# The key algorithm to use when creating SSL context.
# cas.ticket.registry.ignite.key-algorithm: SunX509

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Keystore file path used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.key-store-file-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Keystore password used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.key-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Keystore type used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.key-store-type: JKS

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets local host IP address that discovery SPI uses. If not provided, by default a first found non-loopback address will be used. If there is no non-loopback address available, then {@code InetAddress.getLocalHost()} will be used.
# cas.ticket.registry.ignite.local-address: 

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets local port to listen to.
# cas.ticket.registry.ignite.local-port: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets maximum network timeout to use for network operations.
# cas.ticket.registry.ignite.network-timeout: PT5S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# SSL protocol used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.protocol: TLS

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets socket operations timeout. This timeout is used to limit connection time and write-to-socket time. Note that when running Ignite on Amazon EC2, socket timeout must be set to a value significantly greater than the default (e.g. to 30000).
# cas.ticket.registry.ignite.socket-timeout: PT5S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Sets thread priority. All threads within SPI will be started with it.
# cas.ticket.registry.ignite.thread-priority: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache
# Module: cas-server-support-ignite-ticket-registry
# Specifies the atomicity mode. <ul> <li>{@code ATOMIC}: Specifies atomic-only cache behaviour. In this mode distributed transactions and distributed locking are not supported. Disabling transactions and locking allows to achieve much higher performance and throughput ratios. In addition to transactions and locking, one of the main differences in ATOMIC mode is that bulk writes, such as putAll(...), removeAll(...), and transformAll(...) methods, become simple batch operations which can partially fail. In case of partial failure CachePartialUpdateCheckedException will be thrown which will contain a list of keys for which the update failed. It is recommended that bulk writes are used whenever multiple keys need to be inserted or updated in cache, as they reduce number of network trips and provide better performance. Note that even without locking and transactions, ATOMIC mode still provides full consistency guarantees across all cache nodes. Also note that all data modifications in ATOMIC mode are guaranteed to be atomic and consistent with writes to the underlying persistent store, if one is configured.</li> <li>{@code TRANSACTIONAL}: Specifies fully ACID-compliant transactional cache behavior.</li> </ul>
# cas.ticket.registry.ignite.tickets-cache.atomicity-mode: TRANSACTIONAL

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache
# Module: cas-server-support-ignite-ticket-registry
# Specified the caching mode. <ul> <li>{@code LOCAL}: Specifies local-only cache behaviour. In this mode caches residing on different grid nodes will not know about each other. Other than distribution, local caches still have all the caching features, such as eviction, expiration, swapping, querying, etc... This mode is very useful when caching read-only data or data that automatically expires at a certain interval and then automatically reloaded from persistence store.</li> <li> {@code REPLICATED}: Specifies fully replicated cache behavior. In this mode all the keys are distributed to all participating nodes. User still has affinity control over subset of nodes for any given key via AffinityFunction configuration. </li> <li> {@code PARTITIONED}: Specifies partitioned cache behaviour. In this mode the overall key set will be divided into partitions and all partitions will be split equally between participating nodes. User has affinity control over key assignment via AffinityFunction configuration. Note that partitioned cache is always fronted by local 'near' cache which stores most recent data. You can configure the size of near cache via NearCacheConfiguration.getNearEvictionPolicy() configuration property. </li> </ul>
# cas.ticket.registry.ignite.tickets-cache.cache-mode: REPLICATED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache
# Module: cas-server-support-ignite-ticket-registry
# Mode indicating how Ignite should wait for write replies from other nodes. Default value is FULL_ASYNC}, which means that Ignite will not wait for responses from participating nodes. This means that by default remote nodes may get their state updated slightly after any of the cache write methods complete, or after Transaction.commit() method completes. <ul> <li> {@code FULL_ASYNC}: Flag indicating that Ignite will not wait for write or commit responses from participating nodes, which means that remote nodes may get their state updated a bit after any of the cache write methods complete, or after {@code Transaction.commit()} method completes. </li> <li> {@code FULL_SYNC}: Flag indicating that Ignite should wait for write or commit replies from all nodes. This behavior guarantees that whenever any of the atomic or transactional writes complete, all other participating nodes which cache the written data have been updated. </li> <li> {@code PRIMARY_SYNC}: This flag only makes sense for CacheMode.PARTITIONED mode. When enabled, Ignite will wait for write or commit to complete on primary node, but will not wait for backups to be updated. </li> </ul>
# cas.ticket.registry.ignite.tickets-cache.write-synchronization-mode: FULL_SYNC

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Truststore file path used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.trust-store-file-path: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Truststore password used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.trust-store-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ignite.IgniteProperties
# Module: cas-server-support-ignite-ticket-registry
# Truststore type used to create a SSL context for the ticket registry.
# cas.ticket.registry.ignite.trust-store-type: JKS

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.ticket.registry.InMemoryTicketRegistryProperties
# Module: cas-server-core-tickets
# Allow the ticket registry to cache ticket items for period of time and auto-evict and clean up, removing the need to running a ticket registry cleaner in the background.
# cas.ticket.registry.in-memory.cache: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.registry.InMemoryTicketRegistryProperties
# Module: cas-server-core-tickets
# The estimated number of concurrently updating threads. The implementation performs internal sizing to try to accommodate this many threads.
# cas.ticket.registry.in-memory.concurrency: 20

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.in-memory.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.in-memory.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.in-memory.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.in-memory.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.in-memory.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.in-memory.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.registry.InMemoryTicketRegistryProperties
# Module: cas-server-core-tickets
# The initial capacity of the underlying memory store. The implementation performs internal sizing to accommodate this many elements.
# cas.ticket.registry.in-memory.initial-capacity: 1000

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.registry.InMemoryTicketRegistryProperties
# Module: cas-server-core-tickets
# The load factor threshold, used to control resizing. Resizing may be performed when the average number of elements per bin exceeds this threshold.
# cas.ticket.registry.in-memory.load-factor: 1

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.infinispan.InfinispanProperties
# Module: cas-server-support-infinispan-ticket-registry
# Cache name to create and hold tickets in.
# cas.ticket.registry.infinispan.cache-name: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.support.infinispan.InfinispanProperties
# Module: cas-server-support-infinispan-ticket-registry
# Path to the infinispan XML configuration file.
# cas.ticket.registry.infinispan.config-location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.infinispan.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.infinispan.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.infinispan.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.infinispan.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.infinispan.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.infinispan.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.jms.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.jms.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.jms.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.jms.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.jms.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.jms.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jms.JmsTicketRegistryProperties
# Module: cas-server-support-jms-ticket-registry
# Identifier for this CAS server node that tags the sender/receiver in the JMS queue and avoid processing of inbound calls. If left blank, an identifier is generated automatically and kept in memory.
# cas.ticket.registry.jms.queue-identifier: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The default auto-commit behavior of connections in the pool. Determined whether queries such as update/insert should be immediately executed without waiting for an underlying transaction.
# cas.ticket.registry.jpa.autocommit: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30.
# cas.ticket.registry.jpa.batch-size: 100

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.jpa.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.jpa.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.jpa.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.jpa.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.jpa.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.jpa.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Attempts to do a JNDI data source look up for the data source name specified. Will attempt to locate the data source object as is.
# cas.ticket.registry.jpa.data-source-name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Hibernate feature to automatically validate and exports DDL to the schema. By default, creates and drops the schema automatically when a session is starts and ends. Setting the value to {@code validate} or {@code none} may be more desirable for production, but any of the following options can be used: <ul>     <li>{@code validate}: Validate the schema, but make no changes to the database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}: Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li> </ul> <p> Note that during a version migration where any schema has changed {@code create-drop} will result in the loss of all data as soon as CAS is started. For transient data like tickets this is probably not an issue, but in cases like the audit table important data could be lost. Using `update`, while safe for data, is confirmed to result in invalid database state. {@code validate} or {@code none} settings are likely the only safe options for production use. </p> For more info, <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api">see this</a>.
# cas.ticket.registry.jpa.ddl-auto: update

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Qualifies unqualified table names with the given catalog in generated SQL.
# cas.ticket.registry.jpa.default-catalog: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Qualify unqualified table names with the given schema/tablespace in generated SQL.
# cas.ticket.registry.jpa.default-schema: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc) which allows such software to translate its generic SQL statements into vendor specific DDL, DML.
# cas.ticket.registry.jpa.dialect: org.hibernate.dialect.HSQLDialect

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The JDBC driver used to connect to the database.
# cas.ticket.registry.jpa.driver-class: org.hsqldb.jdbcDriver

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Set the pool initialization failure timeout. <ul> <li>Any value greater than zero will be treated as a timeout for pool initialization. The calling thread will be blocked from continuing until a successful connection to the database, or until the timeout is reached.  If the timeout is reached, then a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero will <i>not</i>  prevent the pool from starting in the case that a connection cannot be obtained. However, upon start the pool will attempt to obtain a connection and validate that the {@code connectionTestQuery} and {@code connectionInitSql} are valid.  If those validations fail, an exception will be thrown.  If a connection cannot be obtained, the validation is skipped and the the pool will start and continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> <li>A value less than zero will <i>not</i> bypass any connection attempt and validation during startup, and therefore the pool will start immediately.  The pool will continue to try to obtain connections in the background. This can mean that callers to {@code DataSource#getConnection()} may encounter exceptions. </li> </ul> Note that if this timeout value is greater than or equal to zero (0), and therefore an initial connection validation is performed, this timeout does not override the {@code connectionTimeout} or {@code validationTimeout}; they will be honored before this timeout is applied.  The default value is one millisecond.
# cas.ticket.registry.jpa.fail-fast-timeout: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Used to specify number of rows to be fetched in a select query.
# cas.ticket.registry.jpa.fetch-size: 100

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Allow hibernate to generate query statistics.
# cas.ticket.registry.jpa.generate-statistics: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The SQL query to be executed to test the validity of connections.
# cas.ticket.registry.jpa.health-query: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# cas.ticket.registry.jpa.idle-timeout: PT10M

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# This property determines whether data source isolates internal pool queries, such as the connection alive test, in their own transaction. <p> Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if {@link #autocommit} is disabled.
# cas.ticket.registry.jpa.isolate-internal-queries: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.ticket.registry.jpa.isolation-level-name: ISOLATION_READ_COMMITTED

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Indicates the lock duration when one is about to be acquired by the cleaner.
# cas.ticket.registry.jpa.jpa-locking-timeout: PT1H

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak.
# cas.ticket.registry.jpa.leak-threshold: 3000

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The database connection password.
# cas.ticket.registry.jpa.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Fully-qualified name of the class that can control the physical naming strategy of hibernate.
# cas.ticket.registry.jpa.physical-naming-strategy-class-name: org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the maximum number of connections to keep in the pool, including both idle and in-use connections.
# cas.ticket.registry.jpa.pool.max-size: 18

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Sets the maximum time in seconds that this data source will wait while attempting to connect to a database. <p> A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout.
# cas.ticket.registry.jpa.pool.max-wait: PT2S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Controls the minimum size that the pool is allowed to reach, including both idle and in-use connections.
# cas.ticket.registry.jpa.pool.min-size: 6

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# Whether or not pool suspension is allowed. <p> There is a performance impact when pool suspension is enabled. Unless you need it (for a redundancy system for example) do not enable it.
# cas.ticket.registry.jpa.pool.suspension: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.ConnectionPoolingProperties
# Module: cas-server-core-util
# The maximum number of milliseconds that the pool will wait for a connection to be validated as alive.
# cas.ticket.registry.jpa.pool.timeout-millis: 1000

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition
# cas.ticket.registry.jpa.propagation-behavior-name: PROPAGATION_REQUIRED

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Additional settings provided by Hibernate in form of key-value pairs.
# cas.ticket.registry.jpa.properties: 

# Required: false
# Type: javax.persistence.LockModeType
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# Ticket locking type. Acceptable values are {@code READ,WRITE,OPTIMISTIC,OPTIMISTIC_FORCE_INCREMENT,PESSIMISTIC_READ, PESSIMISTIC_WRITE,PESSIMISTIC_FORCE_INCREMENT,NONE}.
# cas.ticket.registry.jpa.ticket-lock-type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The database connection URL.
# cas.ticket.registry.jpa.url: jdbc:hsqldb:mem:cas-hsql-database

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.jpa.ticketregistry.JpaTicketRegistryProperties
# Module: cas-server-support-jpa-ticket-registry
# The database user. <p> The database user must have sufficient permissions to be able to handle schema changes and updates, when needed.
# cas.ticket.registry.jpa.user: sa

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.memcached.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.memcached.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.memcached.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.memcached.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.memcached.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.memcached.crypto.signing.key-size: 512

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set the daemon state of the IO thread (defaults to true).
# cas.ticket.registry.memcached.daemon: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Failure mode. Acceptable values are {@code Redistribute,Retry,Cancel}.
# cas.ticket.registry.memcached.failure-mode: Redistribute

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Hash algorithm. Acceptable values are {@code NATIVE_HASH,CRC_HASH,FNV1_64_HASH,FNV1A_64_HASH,FNV1_32_HASH,FNV1A_32_HASH,KETAMA_HASH}.
# cas.ticket.registry.memcached.hash-algorithm: FNV1_64_HASH

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# If true, {@code reset} is called automatically after an entire object graph has been read or written. If false, {@code reset} must be called manually, which allows unregistered class names, references, and other information to span multiple object graphs.
# cas.ticket.registry.memcached.kryo-auto-reset: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# If true, each appearance of an object in the graph after the first is stored as an integer ordinal. When set to true, {@code MapReferenceResolver} is used. This enables references to the same object and cyclic graphs to be serialized, but typically adds overhead of one byte per object.
# cas.ticket.registry.memcached.kryo-objects-by-reference: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# If true, an exception is thrown when an unregistered class is encountered. <p> If false, when an unregistered class is encountered, its fully qualified class name will be serialized and the default serializer for the class used to serialize the object. Subsequent appearances of the class within the same object graph are serialized as an int id. Registered classes are serialized as an int id, avoiding the overhead of serializing the class name, but have the drawback of needing to know the classes to be serialized up front.  See {@code ComponentSerializationPlan} for help here. </p>
# cas.ticket.registry.memcached.kryo-registration-required: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Locator mode. Acceptable values are {@code ARRAY_MOD, CONSISTENT, VBUCKET}.
# cas.ticket.registry.memcached.locator-type: ARRAY_MOD

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set the value for the maxTotal configuration attribute for pools created with this configuration instance.
# cas.ticket.registry.memcached.max-idle: 8

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set the maximum reconnect delay.
# cas.ticket.registry.memcached.max-reconnect-delay: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Sets the cap on the number of objects that can be allocated by the pool (checked out to clients, or idle awaiting checkout) at a given time. Use a negative value for no limit.
# cas.ticket.registry.memcached.max-total: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Get the value for the minIdle configuration attribute for pools created with this configuration instance.
# cas.ticket.registry.memcached.min-idle: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set the default operation timeout in milliseconds.
# cas.ticket.registry.memcached.op-timeout: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Protocol. Acceptable values are {@code TEXT, BINARY}.
# cas.ticket.registry.memcached.protocol: TEXT

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Comma-separated list of memcached servers.
# cas.ticket.registry.memcached.servers: localhost:11211

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set to false if the default operation optimization is not desirable.
# cas.ticket.registry.memcached.should-optimize: false

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# The number of seconds to wait for connections to finish before shutting down the client.
# cas.ticket.registry.memcached.shutdown-timeout-seconds: -1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set the maximum timeout exception threshold.
# cas.ticket.registry.memcached.timeout-exception-threshold: 2

# Required: false
# Type: org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties$TranscoderTypes
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Indicate the transcoder type.
Available values are as follows:
<ul><li>{@code KRYO}: CAS transcoder implementation based on Kryo fast serialization framework
suited for efficient serialization of tickets. Provides pooling mechanisms
as well as control over object registration and sequences.</li><li>{@code SERIAL}: Kryp native transcoder that serializes and compresses objects.</li><li>{@code WHALIN}: Transcoder that provides compatibility with Greg Whalin's memcached client.</li><li>{@code WHALINV1}: Handles old whalin encoding: data type is in the first byte of the value.</li></ul>
# cas.ticket.registry.memcached.transcoder: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# For transcoders other than kryo, determines the compression threshold. Does not apply to kryo.
# cas.ticket.registry.memcached.transcoder-compression-threshold: 16384

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.memcached.MemcachedTicketRegistryProperties
# Module: cas-server-support-memcached-ticket-registry
# Set to true if you'd like to enable the Nagle algorithm.
# cas.ticket.registry.memcached.use-nagle-algorithm: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Name of the database to use for authentication.
# cas.ticket.registry.mongo.authentication-database-name: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# The connection uri to the mongodb instance. This typically takes on the form of {@code mongodb://user:psw@ds135522.somewhere.com:35522/db}. If not specified, will fallback onto other individual settings. If specified, takes over all other settings where applicable.
# cas.ticket.registry.mongo.client-uri: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.mongo.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.mongo.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.mongo.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.mongo.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.mongo.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.mongo.crypto.signing.key-size: 512

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database instance name.
# cas.ticket.registry.mongo.database-name: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Whether collections should be dropped on startup and re-created.
# cas.ticket.registry.mongo.drop-collection: false

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database host for authentication. Multiple host addresses may be defined, separated by comma. If more than one host is defined, it is assumed that each host contains the port as well, if any. Otherwise the configuration may fallback onto the port defined.
# cas.ticket.registry.mongo.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database password for authentication.
# cas.ticket.registry.mongo.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum idle time of a pooled connection.  A zero value indicates no limit to the idle time.  A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection.
# cas.ticket.registry.mongo.pool.idle-time: PT30S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time a pooled connection can live for.  A zero value indicates no limit to the life time.  A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
# cas.ticket.registry.mongo.pool.life-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Maximum number of connections to keep around.
# cas.ticket.registry.mongo.pool.max-size: 10

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# The maximum time that a thread may wait for a connection to become available.
# cas.ticket.registry.mongo.pool.max-wait-time: PT60S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Minimum number of connections to keep around.
# cas.ticket.registry.mongo.pool.min-size: 1

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.MongoDbConnectionPoolProperties
# Module: cas-server-support-mongo-core
# Total number of connections allowed per host.
# cas.ticket.registry.mongo.pool.per-host: 10

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database port.
# cas.ticket.registry.mongo.port: 27017

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Read concern. Accepted values are: <ul>     <li>{@code LOCAL}</li>     <li>{@code MAJORITY}</li>     <li>{@code LINEARIZABLE}</li>     <li>{@code SNAPSHOT}</li>     <li>{@code AVAILABLE}</li> </ul>
# cas.ticket.registry.mongo.read-concern: AVAILABLE

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Read preference. Accepted values are: <ul>     <li>{@code PRIMARY}</li>     <li>{@code SECONDARY}</li>     <li>{@code SECONDARY_PREFERRED}</li>     <li>{@code PRIMARY_PREFERRED}</li>     <li>{@code NEAREST}</li> </ul>
# cas.ticket.registry.mongo.read-preference: PRIMARY

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# A replica set in MongoDB is a group of {@code mongod} processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.
# cas.ticket.registry.mongo.replica-set: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Sets whether writes should be retried if they fail due to a network error.
# cas.ticket.registry.mongo.retry-writes: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Whether the database socket connection should be tagged with keep-alive.
# cas.ticket.registry.mongo.socket-keep-alive: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Whether connections require SSL.
# cas.ticket.registry.mongo.ssl-enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database connection timeout.
# cas.ticket.registry.mongo.timeout: PT5S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# MongoDb database user for authentication.
# cas.ticket.registry.mongo.user-id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.mongo.ticketregistry.MongoDbTicketRegistryProperties
# Module: cas-server-support-mongo-ticket-registry
# Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongo db or to replica sets or to sharded clusters. In sharded clusters, mongo db instances will pass the write concern on to the shards.
# cas.ticket.registry.mongo.write-concern: ACKNOWLEDGED

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether adaptive topology refreshing using all available refresh triggers should be used.
# cas.ticket.registry.redis.cluster.adaptive-topology-refresh: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.
# cas.ticket.registry.redis.cluster.dynamic-refresh-sources: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The max number of redirects to follow.
# cas.ticket.registry.redis.cluster.max-redirects: 0

# Required: false
# Type: java.util.List<org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# List of nodes available in the redis cluster.
# cas.ticket.registry.redis.cluster.nodes: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's host address.
# cas.ticket.registry.redis.cluster.nodes[].host: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Identifier of this node.
# cas.ticket.registry.redis.cluster.nodes[].id: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Name of this node.
# cas.ticket.registry.redis.cluster.nodes[].name: 

# Required: true
# Type: int
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Server's port number.
# cas.ticket.registry.redis.cluster.nodes[].port: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Set the id of the master node.
# cas.ticket.registry.redis.cluster.nodes[].replica-of: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterNodeProperties
# Module: cas-server-support-redis-core
# Indicate the type/role of this node.
Accepted values are: {@code MASTER, SLAVE}.
# cas.ticket.registry.redis.cluster.nodes[].type: 

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# The cluster connection's password.
# cas.ticket.registry.redis.cluster.password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisClusterProperties
# Module: cas-server-support-redis-core
# Enables periodic refresh of cluster topology and sets the refresh period.
# cas.ticket.registry.redis.cluster.topology-refresh-period: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Connection timeout.
# cas.ticket.registry.redis.connect-timeout: PT10S

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.ticket.registry.redis.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.ticket.registry.redis.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.ticket.registry.redis.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.ticket.registry.redis.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.ticket.registry.redis.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.ticket.registry.redis.crypto.signing.key-size: 512

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Database index used by the connection factory.
# cas.ticket.registry.redis.database: 0

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Whether the module is enabled or not, defaults to true.
# cas.ticket.registry.redis.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Redis server host.
# cas.ticket.registry.redis.host: localhost

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Login password of the redis server.
# cas.ticket.registry.redis.password: 

# Required: true
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Enable the pooling configuration.
# cas.ticket.registry.redis.pool.enabled: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether or not the pool serves threads waiting to borrow objects fairly. True means that waiting threads are served as if waiting in a FIFO queue.
# cas.ticket.registry.redis.pool.fairness: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether the pool has LIFO (last in, first out) behaviour with respect to idle objects - always returning the most recently used object from the pool, or as a FIFO (first in, first out) queue, where the pool always returns the oldest object in the idle object pool.
# cas.ticket.registry.redis.pool.lifo: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
# cas.ticket.registry.redis.pool.max-active: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# cas.ticket.registry.redis.pool.max-idle: 8

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
# cas.ticket.registry.redis.pool.max-wait: -1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)). When non-positive, no objects will be evicted from the pool due to idle time alone.
# cas.ticket.registry.redis.pool.min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
# cas.ticket.registry.redis.pool.min-idle: 0

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the maximum number of objects to examine during each run (if any) of the idle object evictor thread. When positive, the number of tests performed for a run will be the minimum of the configured value and the number of idle instances in the pool. When negative, the number of tests performed will be ceil(getNumIdle()/ abs(getNumTestsPerEvictionRun())) which means that when the value is -n roughly one nth of the idle objects will be tested per run.
# cas.ticket.registry.redis.pool.num-tests-per-eviction-run: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any - see setTimeBetweenEvictionRunsMillis(long)), with the extra condition that at least minIdle object instances remain in the pool. This setting is overridden by getMinEvictableIdleTimeMillis() (that is, if getMinEvictableIdleTimeMillis() is positive, then getSoftMinEvictableIdleTimeMillis() is ignored).
# cas.ticket.registry.redis.pool.soft-min-evictable-idle-time-millis: 0

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed, and a new attempt will be made to borrow an object from the pool.
# cas.ticket.registry.redis.pool.test-on-borrow: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects created for the pool will be validated before being returned from the borrowObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, then borrowObject() will fail.
# cas.ticket.registry.redis.pool.test-on-create: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects borrowed from the pool will be validated when they are returned to the pool via the returnObject() method. Validation is performed by the validateObject() method of the factory associated with the pool. Returning objects that fail validation are destroyed rather then being returned the pool.
# cas.ticket.registry.redis.pool.test-on-return: false

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisPoolProperties
# Module: cas-server-support-redis-core
# Returns whether objects sitting idle in the pool will be validated by the idle object evictor ( if any - see setTimeBetweenEvictionRunsMillis(long)). Validation is performed by the validateObject() method of the factory associated with the pool. If the object fails to validate, it will be removed from the pool and destroyed.
# cas.ticket.registry.redis.pool.test-while-idle: false

# Required: true
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Redis server port.
# cas.ticket.registry.redis.port: 6379

# Required: false
# Type: org.apereo.cas.configuration.model.support.redis.BaseRedisProperties$RedisReadFromTypes
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Setting that describes how Lettuce routes read operations to replica nodes. Note that modes referencing MASTER/SLAVE are deprecated (but still supported) in the Lettuce redis client dependency so migrate config to UPSTREAM/REPLICA.
Available values are as follows:
<ul><li>{@code UPSTREAM}: Read from the current upstream node.</li><li>{@code UPSTREAMPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code MASTER}: Read from the current upstream node.</li><li>{@code MASTERPREFERRED}: Read from the upstream node, but if it is unavailable, read from replica nodes.</li><li>{@code SLAVE}: Read from replica nodes.</li><li>{@code SLAVEPREFERRED}:  Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code REPLICA}: Read from replica nodes.</li><li>{@code REPLICAPREFERRED}: Read from the replica nodes, but if none is unavailable, read from the upstream node.</li><li>{@code ANY}: Read from any node of the cluster.</li><li>{@code ANYREPLICA}: Read from any replica node of the cluster.</li><li>{@code NEAREST}: Read from the nearest node.</li></ul>
# cas.ticket.registry.redis.read-from: PT10S

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# Name of Redis server.
# cas.ticket.registry.redis.sentinel.master: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.support.redis.RedisSentinelProperties
# Module: cas-server-support-redis-core
# list of host:port pairs.
# cas.ticket.registry.redis.sentinel.node: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Command timeout.
# cas.ticket.registry.redis.timeout: PT60S

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.redis.RedisTicketRegistryProperties
# Module: cas-server-support-redis-ticket-registry
# Whether or not to use SSL for connection factory.
# cas.ticket.registry.redis.use-ssl: false

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.ServiceTicketProperties
# Module: cas-server-core-tickets
# Maximum length of generated service tickets.
# cas.ticket.st.max-length: 20

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.ServiceTicketProperties
# Module: cas-server-core-tickets
# Controls number of times a service ticket can be used within CAS server. Usage in CAS context means service ticket validation transaction.
# cas.ticket.st.number-of-uses: 1

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.ServiceTicketProperties
# Module: cas-server-core-tickets
# Time in seconds that service tickets should be considered live in CAS server.
# cas.ticket.st.time-to-kill-in-seconds: 10

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.TicketGrantingTicketCoreProperties
# Module: cas-server-core-tickets
# Maximum length of tickets.
# cas.ticket.tgt.core.max-length: 50

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.ticket.TicketGrantingTicketCoreProperties
# Module: cas-server-core-tickets
# Flag to control whether to track most recent SSO sessions. As multiple tickets may be issued for the same application, this impacts how session information is tracked for every ticket which then has a subsequent impact on logout.
# cas.ticket.tgt.core.only-track-most-recent-session: true

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.HardTimeoutTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Timeout in seconds to kill the session and consider tickets expired.
# cas.ticket.tgt.hard-timeout.time-to-kill-in-seconds: 0

# Required: false
# Type: java.lang.Integer
# Owner: 
# Module: 
# 
# cas.ticket.tgt.max-time-to-live-in-seconds: 
# Deprecation Level: ERROR
# Deprecation Reason: max-time-to-live-in-seconds setting is now moved into the primary namespace.
# Deprecation Replacement: cas.ticket.tgt.primary.max-time-to-live-in-seconds

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.PrimaryTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Maximum time in seconds tickets would be live in CAS server.
# cas.ticket.tgt.primary.max-time-to-live-in-seconds: 28800

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.PrimaryTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Time in seconds after which tickets would be destroyed after a period of inactivity.
# cas.ticket.tgt.primary.time-to-kill-in-seconds: 7200

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.ticket.RememberMeAuthenticationProperties
# Module: cas-server-core-tickets
# Flag to indicate whether remember-me facility is enabled.
# cas.ticket.tgt.remember-me.enabled: false

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.ticket.RememberMeAuthenticationProperties
# Module: cas-server-core-tickets
# Regular expression that, when defined, forces CAS to create a remember-me authentication session if the current client ip (remote) address matches this pattern. If a match is not found, remember-me is ignored. If left undefined, remember-me authentication will proceed with the default CAS behavior.
# cas.ticket.tgt.remember-me.supported-ip-addresses: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.ticket.RememberMeAuthenticationProperties
# Module: cas-server-core-tickets
# Regular expression that, when defined, forces CAS to create a remember-me authentication session if the current user-agent matches this pattern. If a match is not found, remember-me is ignored. If left undefined, remember-me authentication will proceed with the default CAS behavior.
# cas.ticket.tgt.remember-me.supported-user-agents: 

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.RememberMeAuthenticationProperties
# Module: cas-server-core-tickets
# Time in seconds after which remember-me enabled SSO session will be destroyed.
# cas.ticket.tgt.remember-me.time-to-kill-in-seconds: 1209600

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.ThrottledTimeoutTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Timeout in between each attempt.
# cas.ticket.tgt.throttled-timeout.time-in-between-uses-in-seconds: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.ThrottledTimeoutTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Timeout in seconds to kill the session and consider tickets expired.
# cas.ticket.tgt.throttled-timeout.time-to-kill-in-seconds: 0

# Required: false
# Type: java.lang.Integer
# Owner: 
# Module: 
# 
# cas.ticket.tgt.time-to-kill-in-seconds: 
# Deprecation Level: ERROR
# Deprecation Reason: time-to-kill-in-seconds setting is now moved into the primary namespace.
# Deprecation Replacement: cas.ticket.tgt.primary.time-to-kill-in-seconds

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.ticket.TimeoutTicketExpirationPolicyProperties
# Module: cas-server-core-tickets
# Maximum time in seconds. for TGTs to be live in CAS server.
# cas.ticket.tgt.timeout.max-time-to-live-in-seconds: 0

# Required: false
# Type: java.lang.Long
# Owner: org.apereo.cas.configuration.model.core.ticket.TransientSessionTicketProperties
# Module: cas-server-core-tickets
# Number of seconds after which this ticket becomes invalid.
# cas.ticket.tst.time-to-kill-in-seconds: 5

# Required: false
# Type: java.lang.Boolean
# Owner: 
# Module: 
# 
# cas.tomcat.clustering.enabled: 
# Deprecation Level: ERROR
# Deprecation Reason: cas.server.* moved to cas.server.tomcat.*.
# Deprecation Replacement: cas.server.tomcat.clustering.enabled

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.view.ViewProperties
# Module: cas-server-core-web
# When set to {@code true}, attempts to calculate and display the list of authorized services for the authenticated user on successful authentication attempts.
# cas.view.authorized-services-on-successful-login: false

# Required: false
# Type: org.apereo.cas.configuration.model.core.web.view.Cas10ViewProperties$ValidationAttributesRendererTypes
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas10ViewProperties
# Module: cas-server-core-web
# Indicates how attributes in the final validation response should be formatted. Options available are: <ul> <li>{@code DEFAULT}: The default option implements the rendering strategy specified by the CAS protocol.</li> <li>{@code VALUES_PER_LINE}: Includes the attribute value on each single line. (Values are comma-separated, if multiple).</li> </ul>
Available values are as follows:
<ul><li>{@code DEFAULT}: Render attributes using CAS protocol suggestions.</li><li>{@code VALUES_PER_LINE}: Inline attribute value(s) on each line.</li></ul>
# cas.view.cas1.attribute-renderer-type: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas20ViewProperties
# Module: cas-server-core-web
# The relative location of the CAS3 failure view bean.
# cas.view.cas2.failure: protocol/2.0/casServiceValidationFailure

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas20ProxyViewProperties
# Module: cas-server-core-web
# The relative location of the CAS2 proxy failure view bean.
# cas.view.cas2.proxy.failure: protocol/2.0/casProxyFailureView

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas20ProxyViewProperties
# Module: cas-server-core-web
# The relative location of the CAS2 proxy success view bean.
# cas.view.cas2.proxy.success: protocol/2.0/casProxySuccessView

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas20ViewProperties
# Module: cas-server-core-web
# The relative location of the CAS2 success view bean.
# cas.view.cas2.success: protocol/2.0/casServiceValidationSuccess

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas20ViewProperties
# Module: cas-server-core-web
# Whether v2 protocol support should be forward compatible to act like v3 and match its response, mainly for attribute release.
# cas.view.cas2.v3-forward-compatible: false

# Required: false
# Type: org.apereo.cas.configuration.model.core.web.view.Cas30ViewProperties$ValidationAttributesRendererTypes
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas30ViewProperties
# Module: cas-server-core-web
# Indicates how attributes in the final validation response should be formatted. Options available are: <ul> <li>{@code DEFAULT}: The default option implements the rendering strategy specified by the CAS protocol.</li> <li>{@code INLINE}: Includes the attribute name and value as XML attributes.</li> </ul>
Available values are as follows:
<ul><li>{@code DEFAULT}: Render attributes using CAS protocol suggestions.</li><li>{@code INLINE}: Inline attribute name/value as XML attributes.</li></ul>
# cas.view.cas3.attribute-renderer-type: DEFAULT

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas30ViewProperties
# Module: cas-server-core-web
# The relative location of the CAS3 success validation bean.
# cas.view.cas3.failure: protocol/3.0/casServiceValidationFailure

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.Cas30ViewProperties
# Module: cas-server-core-web
# The relative location of the CAS3 success validation bean.
# cas.view.cas3.success: protocol/3.0/casServiceValidationSuccess

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.CustomLoginFieldViewProperties
# Module: cas-server-core-web
# The id of the custom converter to use to convert bound property values.
# cas.view.custom-login-form-fields.[key].converter: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.CustomLoginFieldViewProperties
# Module: cas-server-core-web
# The key for this field found in the message bundle
used to present a label/text in CAS views.
# cas.view.custom-login-form-fields.[key].message-bundle-key: 

# Required: false
# Type: boolean
# Owner: org.apereo.cas.configuration.model.core.web.view.CustomLoginFieldViewProperties
# Module: cas-server-core-web
# Whether this field is required to have a value.
# cas.view.custom-login-form-fields.[key].required: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.ViewProperties
# Module: cas-server-core-web
# The default redirect URL if none is specified after a successful authentication event.
# cas.view.default-redirect-url: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.RestfulViewProperties
# Module: cas-server-core-web
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.view.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.RestfulViewProperties
# Module: cas-server-core-web
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.view.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.view.RestfulViewProperties
# Module: cas-server-core-web
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.view.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.RestfulViewProperties
# Module: cas-server-core-web
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.view.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.view.RestfulViewProperties
# Module: cas-server-core-web
# The endpoint URL to contact and retrieve attributes.
# cas.view.rest.url: 

# Required: false
# Type: java.util.List<java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.view.ViewProperties
# Module: cas-server-core-web
# Comma separated paths to where CAS templates may be found.
# cas.view.template-prefixes: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# A regular expression pattern that indicates the set of allowed IP addresses, when {@link #isPinToSession()} is cofigured. In the event that there is a mismatch between the cookie IP address and the current request-provided IP address (i.e. network switches, VPN, etc), the cookie can still be considered valid if the new IP address matches the pattern specified here.
# cas.warning-cookie.allowed-ip-addresses-pattern: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# Decide if cookie paths should be automatically configured based on the application context path, when the cookie path is not configured.
# cas.warning-cookie.auto-configure-cookie-path: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# CAS Cookie comment, describes the cookie's usage and purpose.
# cas.warning-cookie.comment: CAS Cookie

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# Cookie domain. Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.
# cas.warning-cookie.domain: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
# cas.warning-cookie.http-only: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# The maximum age of the cookie, specified in seconds. By default, {@code -1} indicating the cookie will persist until browser shutdown. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie's current age. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.
# cas.warning-cookie.max-age: -1

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# Cookie name. Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a {@code $} character. The cookie's name cannot be changed after creation. By default, cookies are created according to the RFC 2965 cookie specification. Cookie names are automatically calculated assigned by CAS at runtime, and there is usually no need to customize the name or assign it a different value unless a special use case warrants the change.
# cas.warning-cookie.name: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# Cookie path. Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.
# cas.warning-cookie.path: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# When generating cookie values, determine whether the value should be compounded and signed with the properties of the current session, such as IP address, user-agent, etc.
# cas.warning-cookie.pin-to-session: true

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# If a cookie is only intended to be accessed in a first party context, the developer has the option to apply one of settings {@code SameSite=Lax} or {@code SameSite=Strict} or {@code SameSite=None} to prevent external access. <p> To safeguard more websites and their users, the new secure-by-default model assumes all cookies should be protected from external access unless otherwise specified. Developers must use a new cookie setting, {@code SameSite=None}, to designate cookies for cross-site access. When the {@code SameSite=None} attribute is present, an additional {@code Secure} attribute is used so cross-site cookies can only be accessed over HTTPS connections. </p> <p>Accepted values are: {@code Lax}, {@code Strict},  {@code None}.</p>
# cas.warning-cookie.same-site-policy: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.support.cookie.WarningCookieProperties
# Module: cas-server-core-cookie
# True if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
# cas.warning-cookie.secure: true

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# Whether webflow auto-configuration should be enabled.
# cas.webflow.auto-configuration.enabled: true

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowAutoConfigurationProperties
# Module: cas-server-core-webflow
# The order in which the webflow is configured.
# cas.webflow.auto-configuration.order: 0

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# The signing/encryption algorithm to use.
# cas.webflow.crypto.alg: AES

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedSigningJwtCryptographyProperties
# Module: cas-server-core-util
# Whether crypto operations are enabled.
# cas.webflow.crypto.enabled: true

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# The encryption key. The encryption key by default and unless specified otherwise must be randomly-generated string whose length is defined by the encryption key size setting.
# cas.webflow.crypto.encryption.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.EncryptionRandomizedCryptoProperties
# Module: cas-server-core-util
# Encryption key size.
# cas.webflow.crypto.encryption.key-size: 16

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key is a JWT whose length is defined by the signing key size setting.
# cas.webflow.crypto.signing.key: 

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.util.SigningJwtCryptoProperties
# Module: cas-server-core-util
# The signing key size.
# cas.webflow.crypto.signing.key-size: 512

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.web.flow.GroovyWebflowProperties
# Module: cas-server-core-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.webflow.groovy.location: 

# Required: true
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.web.flow.GroovyWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# The location of the resource. Resources can be URLS, or files found either on the classpath or outside somewhere in the file system.
# cas.webflow.login-decorator.groovy.location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.flow.RestfulWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# If REST endpoint is protected via basic authentication, specify the password for authentication.
# cas.webflow.login-decorator.rest.basic-auth-password: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.flow.RestfulWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# If REST endpoint is protected via basic authentication, specify the username for authentication.
# cas.webflow.login-decorator.rest.basic-auth-username: 

# Required: false
# Type: java.util.Map<java.lang.String,java.lang.String>
# Owner: org.apereo.cas.configuration.model.core.web.flow.RestfulWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# Headers, defined as a Map, to include in the request when making the REST call. Will overwrite any header that CAS is pre-defined to send and include in the request. Key in the map should be the header name and the value in the map should be the header value.
# cas.webflow.login-decorator.rest.headers: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.flow.RestfulWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# HTTP method to use when contacting the rest endpoint. Examples include {@code GET, POST}, etc.
# cas.webflow.login-decorator.rest.method: GET

# Required: true
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.flow.RestfulWebflowLoginDecoratorProperties
# Module: cas-server-core-webflow
# The endpoint URL to contact and retrieve attributes.
# cas.webflow.login-decorator.rest.url: 

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowSessionManagementProperties
# Module: cas-server-core-webflow
# Whether or not the snapshots should be compressed.
# cas.webflow.session.compress: false

# Required: false
# Type: org.springframework.core.io.Resource
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowSessionManagementProperties
# Module: cas-server-core-webflow
# If sessions are to be replicated via Hazelcast, defines the location of a {@code hazelcast.xml} file that defines how state should be replicated. Only relevant if session storage is done on the server.
# cas.webflow.session.hz-location: 

# Required: false
# Type: java.lang.String
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowSessionManagementProperties
# Module: cas-server-core-webflow
# Sets the time period that can elapse before a timeout occurs on an attempt to acquire a conversation lock. The default is 30 seconds. Only relevant if session storage is done on the server.
# cas.webflow.session.lock-timeout: PT30S

# Required: false
# Type: java.lang.Integer
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowSessionManagementProperties
# Module: cas-server-core-webflow
# Using the maxConversations property, you can limit the number of concurrently active conversations allowed in a single session. If the maximum is exceeded, the conversation manager will automatically end the oldest conversation. The default is 5, which should be fine for most situations. Set it to -1 for no limit. Setting maxConversations to 1 allows easy resource cleanup in situations where there should only be one active conversation per session. Only relevant if session storage is done on the server.
# cas.webflow.session.max-conversations: 5

# Required: false
# Type: java.lang.Boolean
# Owner: org.apereo.cas.configuration.model.core.web.flow.WebflowSessionManagementProperties
# Module: cas-server-core-webflow
# Controls whether spring webflow sessions are to be stored server-side or client side. By default state is managed on the client side, that is also signed and encrypted.
# cas.webflow.session.storage: false

