apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cas-server.fullname" . }}
  labels: {{- include "cas-server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategy | quote}}
  serviceName: {{ include "cas-server.fullname" . }}
  podManagementPolicy: {{ .Values.podManagementPolicy | quote}}
  selector:
    matchLabels:
      {{- include "cas-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{ if .Values.casServerContainer.alwaysRoll }}
        rollme: {{ randAlphaNum 5 | quote }}
    {{- else }}
        rollme: "rolldisabled"
    {{- end }}
      labels:
        {{- include "cas-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cas-server.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      volumes:
        {{- range $.Values.casServerContainer.casConfigMounts }}
        {{- $configMount := printf "%s-%s" "cas-config" . | replace "." "-" | replace "_" "-" | lower }}
        - name: {{ $configMount | quote }}
          configMap:
            name: {{ include "cas-server.fullname" $ }}-casconfig
            defaultMode: 0644
        {{- end }}
        - name: scripts
          configMap:
            name: {{ include "cas-server.fullname" . }}-scripts
            defaultMode: 0755
        - name: logdir
          {{- include "cas-server.logdir" . | nindent 10 }}
        {{- if .Values.casServerContainer.serverKeystoreExistingSecret }}
        - name: cas-server-keystore
          secret:
            secretName: {{ .Values.casServerContainer.serverKeystoreExistingSecret }}
            defaultMode: 0444
            items:
              - key: {{ .Values.casServerContainer.serverKeystoreSubPath }}
                path: {{ .Values.casServerContainer.serverKeystoreSubPath }}
        {{- end }}
        {{- if .Values.casServerContainer.extraVolumes }}
        {{- include "cas-server.tplvalues.render" ( dict "value" .Values.casServerContainer.extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
      {{- if or .Values.casServerContainer.initContainers (and .Values.podSecurityContext.enabled .Values.volumePermissions.enabled .Values.persistence.enabled) }}
      initContainers:
        {{- if and .Values.podSecurityContext.enabled .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "cas-server.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -cx
            - |
              {{- if .Values.persistence.enabled }}
              {{- if eq ( toString ( .Values.volumePermissions.securityContext.runAsUser )) "auto" }}
              chown `id -u`:`id -G | cut -d " " -f2` {{ .Values.persistence.mountPath }}
              {{- else }}
              chown {{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} {{ .Values.persistence.mountPath }}
              {{- end }}
              mkdir -p {{ .Values.persistence.mountPath }}/data
              chmod 700 {{ .Values.persistence.mountPath }}/data
              find {{ .Values.persistence.mountPath }} -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              {{- if eq ( toString ( .Values.volumePermissions.securityContext.runAsUser )) "auto" }}
                xargs chown -R `id -u`:`id -G | cut -d " " -f2`
              {{- else }}
                xargs chown -R {{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}
              {{- end }}
              {{- end }}
          {{- if eq ( toString ( .Values.volumePermissions.securityContext.runAsUser )) "auto" }}
          securityContext: {{- omit .Values.volumePermissions.securityContext "runAsUser" | toYaml | nindent 12 }}
          {{- else }}
          securityContext: {{- .Values.volumePermissions.securityContext | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
        {{- end }}
        {{- if .Values.casServerContainer.initContainers }}
        {{- include "cas-server.tplvalues.render" (dict "value" .Values.casServerContainer.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: {{ include "cas-server.imageName" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if .Values.casServerContainer.warPath }}
            - name: CAS_WAR
              value: {{ .Values.casServerContainer.warPath | quote }}
            {{- end }}
            {{- if .Values.casServerContainer.profiles }}
            - name: CAS_SPRING_PROFILES
              value: {{ .Values.casServerContainer.profiles | quote }}
            {{- end }}
            {{- if .Values.casServerContainer.jvm.maxHeapOpt }}
            - name: MAX_HEAP_OPT
              value: {{ .Values.casServerContainer.jvm.maxHeapOpt | quote }}
            {{- end }}
            {{- if .Values.casServerContainer.jvm.minHeapOpt }}
            - name: MIN_HEAP_OPT
              value: {{ .Values.casServerContainer.jvm.minHeapOpt | quote }}
            {{- end }}
            {{- if .Values.casServerContainer.jvm.extraOpts }}
            - name: JVM_EXTRA_OPTS
              value: {{ .Values.casServerContainer.jvm.extraOpts | quote }}
            {{- end }}
            - name: JAVA_ENABLE_DEBUG
              value: {{ .Values.casServerContainer.jvm.debugEnabled | quote }}
            - name: JAVA_DEBUG_SUSPEND
              value: {{ .Values.casServerContainer.jvm.debugSuspend | quote }}
            - name: 'KUBERNETES_NAMESPACE' # used by org.apache.catalina.tribes.membership.cloud.CloudMembershipProvider
              value: {{ .Release.Namespace }}
            - name: 'POD_IP'
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if .Values.casServerContainer.extraEnvVars }}
              {{- include "cas-server.tplvalues.render" (dict "value" .Values.casServerContainer.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.casServerContainer.extraEnvVarsConfigMap }}
            - configMapRef:
                name: {{ .Values.casServerContainer.extraEnvVarsConfigMap }}
            {{- end }}
            {{- if .Values.casServerContainer.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.casServerContainer.extraEnvVarsSecret }}
            {{- end }}
          {{- if .Values.casServerContainer.command }}
          command: {{- include "cas-server.tplvalues.render" (dict "value" .Values.casServerContainer.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - '/entrypoint.sh'
          {{- end }}
          {{- if .Values.casServerContainer.args }}
          args: {{- include "cas-server.tplvalues.render" (dict "value" .Values.casServerContainer.args "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: https
              containerPort: {{ .Values.cas.listenPortHttps }}
              protocol: TCP
            - name: jvm-debug
              containerPort: {{ .Values.cas.listenPortJvmDebug }}
              protocol: TCP
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}          
            {{- end }}
            {{- range $.Values.casServerContainer.casConfigMounts }}
            {{- $configMount := printf "%s-%s" "cas-config" . | replace "." "-" | replace "_" "-" | lower }}
            {{- $configMountPath := printf "%s/%s" "/etc/cas/config" . }}
            - name: {{ $configMount | quote }}
              mountPath: {{ $configMountPath }}
              subPath: {{ . | quote }}
            {{- end }}
            - name: scripts
              mountPath: /entrypoint.sh
              subPath: entrypoint.sh
            - name: logdir
              mountPath: {{ .Values.logdir.mountPath }}
            {{- if .Values.casServerContainer.serverKeystoreExistingSecret }}
            - name: cas-server-keystore
              mountPath: {{ .Values.casServerContainer.serverKeystoreMountPath }}
              subPath: {{ .Values.casServerContainer.serverKeystoreSubPath }}
            {{- end }}
            {{- if .Values.casServerContainer.extraVolumeMounts }}
            {{- include "cas-server.tplvalues.render" ( dict "value" .Values.casServerContainer.extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}
          startupProbe:
            httpGet:
              path: {{ .Values.casServerContainer.defaultStatusUrl }}
              port: https
              scheme: HTTPS
              {{- if .Values.casServerContainer.defaultStatusHeaders }}
              {{- include "cas-server.tplvalues.render" ( dict "value" .Values.casServerContainer.defaultStatusHeaders "context" $ ) | nindent 14 }}
              {{- end }}
            failureThreshold: {{ .Values.casServerContainer.startupFailureThreshold }}
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: {{ .Values.casServerContainer.defaultStatusUrl }}
              port: https
              scheme: HTTPS
              {{- if .Values.casServerContainer.defaultStatusHeaders }}
              {{- include "cas-server.tplvalues.render" ( dict "value" .Values.casServerContainer.defaultStatusHeaders "context" $ ) | nindent 14 }}
              {{- end }}
            initialDelaySeconds: {{ .Values.casServerContainer.readinessInitialDelaySeconds }}
            periodSeconds: 5
            failureThreshold: {{ .Values.casServerContainer.readinessFailureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.casServerContainer.defaultStatusUrl }}
              port: https
              scheme: HTTPS
              {{- if .Values.casServerContainer.defaultStatusHeaders }}
              {{- include "cas-server.tplvalues.render" ( dict "value" .Values.casServerContainer.defaultStatusHeaders "context" $ ) | nindent 14 }}
              {{- end }}
            initialDelaySeconds: {{ .Values.casServerContainer.livenessInitialDelaySeconds }}
            periodSeconds: 15
            failureThreshold: {{ .Values.casServerContainer.livenessFailureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "cas-server.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
{{- end }}