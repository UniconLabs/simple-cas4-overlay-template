# Default values for cas-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

casServerName: cas.example.org
casMgmtServerName: casmgmt.example.org

replicaCount: 1

image:
  registry: ""
  repository: "apereo/cas"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

bootadminimage:
  registry: ""
  repository: "apereo/cas-bootadmin-server"
  pullPolicy: IfNotPresent
  tag: "latest"

mgmtimage:
  registry: ""
  repository: "apereo/cas-management"
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# There are two valid stateful set update strategies, RollingUpdate and the (legacy) OnDelete
updateStrategy: RollingUpdate

# OrderedReady: Pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. 
#   When scaling down, the pods are removed in the opposite order.
# Parallel: Creates pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
podManagementPolicy: OrderedReady

# Map folder for logs directory from host or pvc, or leave both blank to use emptyDir volume
# In docker for windows hostPath could be '/host_mnt/c/opt/cas/logs'
# Windows: Give full access local Users group to the  to ~/.docker folder if getting permission denied)
logdir:
#  hostPath: '/host_mnt/c/opt/cas/logs'
  hostPath: ''
  claimName: ''
  mountPath: '/var/log'

# CAS Server container properties
casServerContainer:
  ## Roll on upgrade changes deployment when helm upgrade runs, forcing pod to restart
  alwaysRoll: false
  ## JVM Settings
  ## JVM settings only used if command not set, use args to set app arguments
  jvm:
    ## Extra JVM options
    ##
    extraOpts: '-Djavax.net.ssl.trustStore=/etc/cas/truststore -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit'

    ## Memory settings: If these aren't defined, java will calc values automatically, but requires setting limits on pod
    ## so it doesn't base heap size on host memory
    maxHeapOpt: '-Xmx2G'
    newHeapOpt: '-Xms600M'
    debugEnabled: true
    debugSuspend: "n" # could be n or y, must quote or yaml changes to boolean
  warPath: 'app.war'
  ## Override cmd
  ##
  command:
  ## Override args
  ##
  args:
  ## extraVolumes and extraVolumeMounts allows you to mount other volumes
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: extras
  ##     mountPath: /usr/share/extras
  ##     readOnly: true
  ## extraVolumes:
  ##   - name: extras
  ##     emptyDir: {}
  ##
  profiles: 'standalone'

  extraVolumeMounts:
    - name: truststore
      mountPath: /etc/cas/truststore
      subPath: truststore

  extraVolumes:
    - name: truststore
      configMap:
        name: cas-truststore
        defaultMode: 0444

  ## Url to use for readiness, startupprobe, and liveliness check, change to health actuator if the module is available
  ## Naming it "default" in case in future template supports individual urls for the different checks, with this as default if they aren't specified
  defaultStatusUrl: '/cas/actuator/health'

  # number of startup probe failures before it will be killed, set high if trying to debug startup issues
  # liveness and readiness failure threshold might be 1 but startup failure threshold accounts for
  # failures while server is starting up
  startupFailureThreshold: 30
  livenessFailureThreshold: 1
  readinessFailureThreshold: 1
  readinessInitialDelaySeconds: 45
  livenessInitialDelaySeconds: 120

  ## Extra init containers to add to the statefulset
  ##
  initContainers: []

  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##  - name: MY_ENV_VAR
  ##    value: env_var_value
  ##
  extraEnvVars: []

  ## Name of a ConfigMap containing extra env vars
  ##
  extraEnvVarsConfigMap: ''

  # name of secret containing server keystore
  serverKeystoreExistingSecret: cas-server-keystore
  # folder that should container the keystore
  serverKeystoreMountPath: '/etc/cas/thekeystore'
  # name of keystore file in container and in secret
  serverKeystoreSubPath: 'thekeystore'

  ## Name of a Secret containing extra env vars
  ##
  extraEnvVarsSecret: ''
  ## Choose which config files from casConfig to mount
  casConfigMounts:
    - 'cas.properties'
    - 'cas.yaml'
  ## Create various config files from casConfig that may or may not be mounted
  casConfig:
    # issue with line breaks? means can't use {{}} variables after first line
    # workaround is to use {{}} variables in yaml version of properties file
    cas.properties: |-
      cas.server.name=https://{{ .Values.casServerName }}
      context.path=/cas
      cas.server.prefix=${cas.server.name}${context.path}

      cas.http-client.truststore.psw=changeit
      cas.http-client.truststore.file=/etc/cas/truststore

      # put web access logs in same directory as cas logs
      cas.server.tomcat.ext-access-log.directory=/var/log
      cas.server.tomcat.ext-access-log.enabled=true

      # uncomment the folowing to not allow login of built-in users
      # cas.authn.accept.users= 
 
      # since we are behind ingress controller, need to use x-forwarded-for to get client ip
      # if nginx ingress controller is behind another proxy, it needs to be configured globally with the following settings in the ingress controller configmap
      #  use-forwarded-headers: "true"   # very important for CAS or any app that compares IP being used against IP that initiated sessions (session fixation)
      #  enable-underscores-in-headers: "true" # while you are at it, allow underscores in headers, can't recall if important for cas but no need to have nginx dropping your headers with underscores
      cas.audit.engine.alternate-client-addr-header-name=X-Forwarded-For
      server.tomcat.remoteip.remote-ip-header=X-FORWARDED-FOR

      server.ssl.key-store=file:/etc/cas/thekeystore
      server.ssl.key-store-type=PKCS12
      server.ssl.key-store-password=changeit
      server.ssl.trust-store=file:/etc/cas/truststore
      server.ssl.trust-store-type=PKCS12
      server.ssl.trust-store-password=changeit

      # expose endpoints via http
      management.endpoints.web.exposure.include=health,info,prometheus,metrics,env,loggers,statistics,status,loggingConfig,events,configurationMetadata,caches
      management.endpoints.web.base-path=/actuator
      management.endpoints.web.cors.allowed-origins=https://${cas-host}
      management.endpoints.web.cors.allowed-methods=GET,POST

      # enable endpoints
      management.endpoint.metrics.enabled=true
      management.endpoint.health.enabled=true
      management.endpoint.info.enabled=true
      management.endpoint.env.enabled=true
      management.endpoint.loggers.enabled=true
      management.endpoint.status.enabled=true
      management.endpoint.statistics.enabled=true
      management.endpoint.prometheus.enabled=true
      management.endpoint.events.enabled=true
      management.endpoint.loggingConfig.enabled=true
      management.endpoint.configurationMetadata.enabled=true
      # configure health endpoint
      management.health.defaults.enabled=false
      management.health.ping.enabled=true
      management.health.caches.enabled=true

      # secure endpoints to localhost

      cas.monitor.endpoints.endpoint.defaults.access[0]=AUTHENTICATED
      cas.monitor.endpoints.endpoint.health.access[0]=IP_ADDRESS
      cas.monitor.endpoints.endpoint.health.requiredIpAddresses[0]=127.0.0.1
      cas.monitor.endpoints.endpoint.health.requiredIpAddresses[1]=0:0:0:0:0:0:0:1
      cas.monitor.endpoints.endpoint.health.requiredIpAddresses[2]=10.0.0.0/8
      cas.monitor.endpoints.endpoint.health.requiredIpAddresses[3]=172.16.0.0/12
      cas.monitor.endpoints.endpoint.health.requiredIpAddresses[4]=192.168.0.0/16

      spring.boot.admin.client.enabled=true
      #eof

    cas.yaml: |-
      ---
      logging:
        config: 'file:/etc/cas/config/log4j2.xml'
      cas:
        server:
          tomcat:
            clustering:
              enabled: true
              clustering-type: 'CLOUD'
              cloud-membership-provider: 'kubernetes'
      spring:
        security:
          user:
            name: "{{ .Values.casAdminUser }}"
            password: "{{ .Values.casAdminPassword }}"
        boot:
          admin:
            client:
              username: {{ .Values.bootAdminUser }}
              password: {{ .Values.bootAdminPassword }}
              url: https://{{ include "cas-server.bootadminname" . }}:8443
              instance:
                metadata:
                  user:
                    name: "{{ .Values.casAdminUser }}"
                    password: "{{ .Values.casAdminPassword }}"
                management-base-url: https://${HOSTNAME}.{{ include "cas-server.fullname" . }}.{{ .Release.Namespace }}.svc:8443${context.path}
      #eof



# CAS Boot-Admin Server container properties
bootAdminContainer:
  ## Roll on upgrade changes deployment when helm upgrade runs, forcing pod to restart
  alwaysRoll: false
  ## JVM Settings
  ## JVM settings only used if command not set, use args to set app arguments
  jvm:
    ## Extra JVM options
    ##
    extraOpts: '-Djavax.net.ssl.trustStore=/etc/cas/truststore -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit'
    ## Memory settings: If these aren't defined, java will calc values automatically, but requires setting limits on pod
    ## so it doesn't base heap size on host memory
    maxHeapOpt: -Xmx1G
    newHeapOpt: -Xms250M
    debugEnabled: true
    debugSuspend: "n" # could be n or y, must quote or yaml changes to boolean
  warPath: 'app.war'
  ## Override cmd
  ##
  command:
  ## Override args
  ##
  args:
    - '--spring.config.additional-location=file:/etc/cas/config/' # directories should end in / and have protocol
    - '--logging.config=file:/etc/cas/config/log4j2.xml'

  profiles: 'standalone'

  ## extraVolumes and extraVolumeMounts allows you to mount other volumes
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: extras
  ##     mountPath: /usr/share/extras
  ##     readOnly: true
  ## extraVolumes:
  ##   - name: extras
  ##     emptyDir: {}
  ##
  extraVolumeMounts:
    - name: truststore
      mountPath: /etc/cas/truststore
      subPath: truststore

  extraVolumes:
    - name: truststore
      configMap:
        name: cas-truststore
        defaultMode: 0444

  ## Url to use for readiness, startupprobe, and liveliness check, change to health actuator if the module is available
  ## Naming it "default" in case in future template supports individual urls for the different checks, with this as default if they aren't specified
  defaultStatusUrl: '/login'

  # number of startup probe failures before it will be killed, set high if trying to debug startup issues
  # liveness and readiness failure threshold might be 1 but startup failure threshold accounts for
  # failures while server is starting up
  startupFailureThreshold: 30
  livenessFailureThreshold: 1
  readinessFailureThreshold: 1
  readinessInitialDelaySeconds: 45
  livenessInitialDelaySeconds: 120

  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##  - name: MY_ENV_VAR
  ##    value: env_var_value
  ##
  extraEnvVars: []

  ## Name of a ConfigMap containing extra env vars
  ##
  extraEnvVarsConfigMap: ''

  # name of secret containing bootadmin server keystore
  serverKeystoreExistingSecret: cas-server-keystore
  # folder that should container the keystore
  serverKeystoreMountPath: '/etc/cas/thekeystore'
  # name of keystore file in container and in secret
  serverKeystoreSubPath: 'thekeystore'

  ## Name of a Secret containing extra env vars
  ##
  extraEnvVarsSecret: ''
  ## Choose which config files from casConfig to mount
  casConfigMounts:
    - 'application.properties'
    - 'application.yml'
    - 'log4j2.xml'
  ## Create various config files from casConfig that may or may not be mounted
  casConfig:
    application.properties: |-
      server.ssl.enabled=true
      server.ssl.key-store=file:/etc/cas/thekeystore
      server.ssl.key-store-type=PKCS12
      server.ssl.key-store-password=changeit
      server.ssl.trust-store=file:/etc/cas/truststore
      server.ssl.trust-store-type=PKCS12
      server.ssl.trust-store-password=changeit

    application.yml: |-
      ---
      spring:
        security:
          user:
            name: "{{ .Values.bootAdminUser }}"
            password: "{{ .Values.bootAdminPassword }}"

    log4j2.xml: |-
      <?xml version="1.0" encoding="UTF-8" ?>
      <Configuration monitorInterval="5">
          <Appenders>
              <Console name="casConsole" target="SYSTEM_OUT">
                  <PatternLayout pattern="%highlight{%d %p [%c] - &lt;%m&gt;%n}"/>
              </Console>

              <RollingFile name="casFile" fileName="casbootadmin.log" append="true"
                           filePattern="casbootadmin-%d{yyyy-MM-dd-HH}-%i.log">
                  <PatternLayout pattern="%highlight{%d %p [%c] - &lt;%m&gt;%n}" />
                  <Policies>
                      <OnStartupTriggeringPolicy />
                      <SizeBasedTriggeringPolicy size="10 MB"/>
                      <TimeBasedTriggeringPolicy />
                  </Policies>
              </RollingFile>
          </Appenders>

          <Loggers>
              <Logger name="org.apereo.cas" level="info" includeLocation="true" />
              <Logger name="org.apache" level="info" />
              <Logger name="org.springframework.boot.admin" level="info" />
              <Logger name="de.codecentric.boot" level="info" />
              <Logger name="org.springframework.boot" level="info" />
              <Root level="info">
                  <AppenderRef ref="casFile" />
                  <AppenderRef ref="casConsole" />
              </Root>
          </Loggers>
      </Configuration>

# CAS Management Server container properties
mgmtContainer:
  ## Roll on upgrade changes deployment when helm upgrade runs, forcing pod to restart
  alwaysRoll: false
  ## JVM Settings
  ## JVM settings only used if command not set, use args to set app arguments
  jvm:
    ## Extra JVM options
    ##
    extraOpts: '-Djavax.net.ssl.trustStore=/etc/cas/truststore -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit'
    ## Memory settings: If these aren't defined, java will calc values automatically, but requires setting limits on pod
    ## so it doesn't base heap size on host memory
    maxHeapOpt: -Xmx1G
    newHeapOpt: -Xms250M
    debugEnabled: true
    debugSuspend: "n" # could be n or y, must quote or yaml changes to boolean
  warPath: 'app.war'
  ## Override cmd
  ##
  command:
  ## Override args
  ##
  args:
    - '--spring.config.additional-location=file:/etc/cas/config/' # directories should end in / and have protocol
    - '--logging.config=file:/etc/cas/config/log4j2.xml'

  profiles: 'standalone'

  ## extraVolumes and extraVolumeMounts allows you to mount other volumes
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: extras
  ##     mountPath: /usr/share/extras
  ##     readOnly: true
  ## extraVolumes:
  ##   - name: extras
  ##     emptyDir: {}
  ##
  extraVolumeMounts:
    - name: truststore
      mountPath: /etc/cas/truststore
      subPath: truststore

  extraVolumes:
    - name: truststore
      configMap:
        name: cas-truststore
        defaultMode: 0444

  ## Url to use for readiness, startupprobe, and liveliness check, change to health actuator if the module is available
  ## Naming it "default" in case in future template supports individual urls for the different checks, with this as default if they aren't specified
  defaultStatusUrl: '/cas-management/actuator/health'

  # number of startup probe failures before it will be killed, set high if trying to debug startup issues
  # liveness and readiness failure threshold might be 1 but startup failure threshold accounts for
  # failures while server is starting up
  startupFailureThreshold: 30
  livenessFailureThreshold: 1
  readinessFailureThreshold: 1
  readinessInitialDelaySeconds: 45
  livenessInitialDelaySeconds: 120

  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##  - name: MY_ENV_VAR
  ##    value: env_var_value
  ##
  extraEnvVars: []

  ## Name of a ConfigMap containing extra env vars
  ##
  extraEnvVarsConfigMap: ''

  # name of secret containing mgmt server keystore
  serverKeystoreExistingSecret: cas-server-keystore
  # folder that should container the keystore
  serverKeystoreMountPath: '/etc/cas/thekeystore'
  # name of keystore file in container and in secret
  serverKeystoreSubPath: 'thekeystore'

  ## Name of a Secret containing extra env vars
  ##
  extraEnvVarsSecret: ''
  ## Choose which config files from casConfig to mount
  casConfigMounts:
    - 'application-standalone.properties'
    - 'application-standalone.yml'
    - 'log4j2.xml'
  ## Create various config files from casConfig that may or may not be mounted
  casConfig:
    application-standalone.properties: |-
      server.ssl.enabled=true
      server.ssl.key-store=file:/etc/cas/thekeystore
      server.ssl.key-store-type=PKCS12
      server.ssl.key-store-password=changeit
      server.ssl.trust-store=file:/etc/cas/truststore
      server.ssl.trust-store-type=PKCS12
      server.ssl.trust-store-password=changeit

    application-standalone.yml: |-
      ---
      cas:
        server:
          name: https://{{ .Values.casServerName }}
      mgmt:
        serverName: https://{{ .Values.casMgmtServerName }}
        enableDiscoveryEndpointCall: false # turning off b/c external call to cas requires external DNS, need internal URL

    log4j2.xml: |-
      <?xml version="1.0" encoding="UTF-8" ?>
      <Configuration monitorInterval="5">
          <Properties>
            <Property name="cas.log.dir">.</Property>
            <Property name="cas.log.level">info</Property>
          </Properties>
          <Appenders>
              <Console name="casConsole" target="SYSTEM_OUT">
                  <PatternLayout pattern="%highlight{%d %p [%c] - &lt;%m&gt;%n}"/>
              </Console>

              <RollingFile name="casFile" fileName="cas-management.log" append="true"
                           filePattern="cas-management-%d{yyyy-MM-dd-HH}-%i.log">
                  <PatternLayout pattern="%highlight{%d %p [%c] - &lt;%m&gt;%n}" />
                  <Policies>
                      <OnStartupTriggeringPolicy />
                      <SizeBasedTriggeringPolicy size="10 MB"/>
                      <TimeBasedTriggeringPolicy />
                  </Policies>
              </RollingFile>
          </Appenders>
          <Loggers>
              <Logger name="org.apereo" level="${sys:cas.log.level}" />
              <Logger name="org.apache" level="info" />
              <Logger name="org.pac4j" level="info" />
              <Logger name="org.springframework" level="warn" />
              <Logger name="org.springframework.boot" level="info" />
              <Root level="info">
                  <AppenderRef ref="casFile" />
                  <AppenderRef ref="casConsole" />
              </Root>
          </Loggers>
      </Configuration>


podAnnotations: {}

## Pod security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000

containerSecurityContext:
  enabled: false
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1000

## Override parts of this ingress in your own values file with appropriate host names
## This currently is only set up to work with Nginx Ingress Controller from Kubernetes project
cas:
  service:
    type: ClusterIP
    port: 8443
  listenPortHttps: 8443
  listenPortJvmDebug: 5005
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/session-cookie-samesite: "None"
      nginx.ingress.kubernetes.io/session-cookie-conditional-samesite-none: "true"
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "sticky-session-route"
      nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      nginx.ingress.kubernetes.io/secure-backends: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: cas.example.org
        paths:
          - "/cas"
      - host: kubernetes.docker.internal
        paths:
          - "/cas"
    tls:
      - secretName: cas-server-ingress-tls
        hosts:
          - cas.example.org
          - kubernetes.docker.internal

## Override parts of this ingress in your own values file with appropriate host names
## This currently is only set up to work with Nginx Ingress Controller from Kubernetes project
bootadmin:
  enabled: true
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8443
  listenPortHttps: 8444
  listenPortJvmDebug: 5005
  # Request some resources so kubernetes will schedule somewhere with enough resources
  # Limits can also be set if desired
  resources:
    requests:
      cpu: 50m
      memory: 384Mi
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/session-cookie-samesite: "None"
      nginx.ingress.kubernetes.io/session-cookie-conditional-samesite-none: "true"
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "sticky-session-route"
      nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      nginx.ingress.kubernetes.io/secure-backends: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: casadmin.example.org
        paths:
          - "/"
      - host: kubernetes.docker.internal
        paths:
          - "/"
    tls:
      - secretName: cas-server-ingress-tls
        hosts:
          - casadmin.example.org
          - kubernetes.docker.internal

## Override parts of this ingress in your own values file with appropriate host names
## This currently is only set up to work with Nginx Ingress Controller from Kubernetes project
mgmt:
  enabled: true
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8443
  listenPortHttps: 8443
  listenPortJvmDebug: 5005
  # Request some resources so kubernetes will schedule somewhere with enough resources
  # Limits can also be set if desired
  resources:
    requests:
      cpu: 50m
      memory: 384Mi
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/session-cookie-samesite: "None"
      nginx.ingress.kubernetes.io/session-cookie-conditional-samesite-none: "true"
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "sticky-session-route"
      nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      nginx.ingress.kubernetes.io/secure-backends: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
      - host: casmgmt.example.org
        paths:
          - "/cas-management"
      - host: kubernetes.docker.internal
        paths:
          - "/cas-management"
    tls:
      - secretName: cas-server-ingress-tls
        hosts:
          - casmgmt.example.org
          - kubernetes.docker.internal

# Request some resources for main cas server so kubernetes will schedule somewhere with enough resources
# Limits can also be set if desired
resources: 
  requests:
    cpu: 100m
    memory: 512Mi
#  limits:
#    cpu: 100m
#    memory: 128Mi

# node selector for CAS server
nodeSelector: {}
# tolerations for CAS server (i.e taints on nodes that it can tolerate)
tolerations: []
# affinity config for CAS server
affinity: {}


# credentials for boot admin server (ideally you should make boot admin accessible internally )
bootAdminUser: 'casadmin'
bootAdminPassword: 'ChangeThisSecretPassword'

# spring boot admin uses these credentials to hit actuators in cas (and it could be used externally)
casAdminUser: 'casuser'
casAdminPassword: 'Mellon'

# rbac may or may not be necessary, but it can allow for certain types of discovery (e.g. tomcat cloud session replication)
rbac:
  # specified whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


## CAS can use a persistent volume to store config such as services and saml IDP/SP metadata that it pulls from git
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## If true, use a Persistent Volume Claim for data folder mounted where you specify using mountPath
  ##
  enabled: true
  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ## Persistent Volume Claim annotations
  ##
  annotations:
  ## Persistent Volume Access Mode
  ##
  accessModes:
    - ReadWriteOnce
  ## Persistent Volume size
  ##
  size: 2Gi
  ## The path the volume will be mounted at, will contain writable folder called "data" under mountPath,
  ## if volumePermissions init container creates it
  ##
  mountPath: /var/cas

## Init containers parameters:
## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from
## the securityContext section.
##
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: alpine
    tag: latest
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  ## Init container' resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  ## Init container Security Context
  ## Note: the chown of the data folder is done to securityContext.runAsUser
  ## and not the below volumePermissions.securityContext.runAsUser
  ## When runAsUser is set to special value "auto", init container will try to chown the
  ## data folder to autodetermined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ## "auto" is especially useful for OpenShift which has scc with dynamic userids (and 0 is not allowed).
  ## You may want to use this volumePermissions.securityContext.runAsUser="auto" in combination with
  ## pod securityContext.enabled=false and shmVolume.chmod.enabled=false
  ##
  securityContext:
    runAsUser: 0
